
stm32f446rc_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008968  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08008b38  08008b38  00018b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cac  08008cac  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008cac  08008cac  00018cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cb4  08008cb4  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cb4  08008cb4  00018cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cb8  08008cb8  00018cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08008cbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a00  200001fc  08008eb8  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00002604  20001bfc  08008eb8  00021bfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018243  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000032eb  00000000  00000000  0003846f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f48  00000000  00000000  0003b760  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000df8  00000000  00000000  0003c6a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024744  00000000  00000000  0003d4a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f8ea  00000000  00000000  00061be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cc8a4  00000000  00000000  000714ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013dd72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041e8  00000000  00000000  0013ddf0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008b20 	.word	0x08008b20

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000200 	.word	0x20000200
 800020c:	08008b20 	.word	0x08008b20

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c6:	f000 fb99 	bl	8000cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ca:	f000 f94d 	bl	8000868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ce:	f000 fa05 	bl	80009dc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80005d2:	f006 fffd 	bl	80075d0 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 80005d6:	f000 f9d3 	bl	8000980 <MX_I2C1_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //uint8_t capability = read_capability(&hi2c1);
	  //read_status_specific(&hi2c1);
	  read_status_cml(&hi2c1);
 80005da:	4896      	ldr	r0, [pc, #600]	; (8000834 <main+0x274>)
 80005dc:	f007 fdb6 	bl	800814c <read_status_cml>
	  /*read_status_iout(&hi2c1);
	  read_status_input(&hi2c1);*/

	  sprintf(msg, "%s      0x%x\n\r", "Status CML:", bcm.status_cml.all);
 80005e0:	4b95      	ldr	r3, [pc, #596]	; (8000838 <main+0x278>)
 80005e2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80005e6:	4a95      	ldr	r2, [pc, #596]	; (800083c <main+0x27c>)
 80005e8:	4995      	ldr	r1, [pc, #596]	; (8000840 <main+0x280>)
 80005ea:	4896      	ldr	r0, [pc, #600]	; (8000844 <main+0x284>)
 80005ec:	f007 ff54 	bl	8008498 <siprintf>
	  CDC_Transmit_FS((uint8_t*)msg, (uint16_t)strlen(msg));
 80005f0:	4894      	ldr	r0, [pc, #592]	; (8000844 <main+0x284>)
 80005f2:	f7ff fe0d 	bl	8000210 <strlen>
 80005f6:	4603      	mov	r3, r0
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	4619      	mov	r1, r3
 80005fc:	4891      	ldr	r0, [pc, #580]	; (8000844 <main+0x284>)
 80005fe:	f007 f8b9 	bl	8007774 <CDC_Transmit_FS>

	  clear_faults(&hi2c1);
 8000602:	488c      	ldr	r0, [pc, #560]	; (8000834 <main+0x274>)
 8000604:	f007 fe22 	bl	800824c <clear_faults>
	  read_temperature(&hi2c1);
	  read_iout(&hi2c1);
	  read_iin(&hi2c1);
	  read_pout(&hi2c1)*/;

	  HAL_StatusTypeDef myop = read_operation(&hi2c1);
 8000608:	488a      	ldr	r0, [pc, #552]	; (8000834 <main+0x274>)
 800060a:	f007 fe03 	bl	8008214 <read_operation>
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]

	  switch (myop)
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	2b02      	cmp	r3, #2
 8000616:	d017      	beq.n	8000648 <main+0x88>
 8000618:	2b03      	cmp	r3, #3
 800061a:	d026      	beq.n	800066a <main+0xaa>
 800061c:	2b01      	cmp	r3, #1
 800061e:	d000      	beq.n	8000622 <main+0x62>
	          CDC_Transmit_FS((uint8_t*)msg, (uint16_t)strlen(msg));
	          break;

	      default:
	          // Keep default to ignore warning about HAL_OK case.
	          break;
 8000620:	e038      	b.n	8000694 <main+0xd4>
	          sprintf(msg, "HAL Error.\r\n");
 8000622:	4a88      	ldr	r2, [pc, #544]	; (8000844 <main+0x284>)
 8000624:	4b88      	ldr	r3, [pc, #544]	; (8000848 <main+0x288>)
 8000626:	4614      	mov	r4, r2
 8000628:	cb07      	ldmia	r3!, {r0, r1, r2}
 800062a:	6020      	str	r0, [r4, #0]
 800062c:	6061      	str	r1, [r4, #4]
 800062e:	60a2      	str	r2, [r4, #8]
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	7323      	strb	r3, [r4, #12]
	          CDC_Transmit_FS((uint8_t*)msg, (uint16_t)strlen(msg));
 8000634:	4883      	ldr	r0, [pc, #524]	; (8000844 <main+0x284>)
 8000636:	f7ff fdeb 	bl	8000210 <strlen>
 800063a:	4603      	mov	r3, r0
 800063c:	b29b      	uxth	r3, r3
 800063e:	4619      	mov	r1, r3
 8000640:	4880      	ldr	r0, [pc, #512]	; (8000844 <main+0x284>)
 8000642:	f007 f897 	bl	8007774 <CDC_Transmit_FS>
	          break;
 8000646:	e025      	b.n	8000694 <main+0xd4>
	          sprintf(msg, "HAL Busy.\r\n");
 8000648:	4a7e      	ldr	r2, [pc, #504]	; (8000844 <main+0x284>)
 800064a:	4b80      	ldr	r3, [pc, #512]	; (800084c <main+0x28c>)
 800064c:	4614      	mov	r4, r2
 800064e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000650:	6020      	str	r0, [r4, #0]
 8000652:	6061      	str	r1, [r4, #4]
 8000654:	60a2      	str	r2, [r4, #8]
	          CDC_Transmit_FS((uint8_t*)msg, (uint16_t)strlen(msg));
 8000656:	487b      	ldr	r0, [pc, #492]	; (8000844 <main+0x284>)
 8000658:	f7ff fdda 	bl	8000210 <strlen>
 800065c:	4603      	mov	r3, r0
 800065e:	b29b      	uxth	r3, r3
 8000660:	4619      	mov	r1, r3
 8000662:	4878      	ldr	r0, [pc, #480]	; (8000844 <main+0x284>)
 8000664:	f007 f886 	bl	8007774 <CDC_Transmit_FS>
	          break;
 8000668:	e014      	b.n	8000694 <main+0xd4>
	          sprintf(msg, "HAL Timeout.\r\n");
 800066a:	4a76      	ldr	r2, [pc, #472]	; (8000844 <main+0x284>)
 800066c:	4b78      	ldr	r3, [pc, #480]	; (8000850 <main+0x290>)
 800066e:	4614      	mov	r4, r2
 8000670:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000672:	6020      	str	r0, [r4, #0]
 8000674:	6061      	str	r1, [r4, #4]
 8000676:	60a2      	str	r2, [r4, #8]
 8000678:	881a      	ldrh	r2, [r3, #0]
 800067a:	789b      	ldrb	r3, [r3, #2]
 800067c:	81a2      	strh	r2, [r4, #12]
 800067e:	73a3      	strb	r3, [r4, #14]
	          CDC_Transmit_FS((uint8_t*)msg, (uint16_t)strlen(msg));
 8000680:	4870      	ldr	r0, [pc, #448]	; (8000844 <main+0x284>)
 8000682:	f7ff fdc5 	bl	8000210 <strlen>
 8000686:	4603      	mov	r3, r0
 8000688:	b29b      	uxth	r3, r3
 800068a:	4619      	mov	r1, r3
 800068c:	486d      	ldr	r0, [pc, #436]	; (8000844 <main+0x284>)
 800068e:	f007 f871 	bl	8007774 <CDC_Transmit_FS>
	          break;
 8000692:	bf00      	nop
	      }
	   write_page(&hi2c1, 0x01);
 8000694:	2101      	movs	r1, #1
 8000696:	4867      	ldr	r0, [pc, #412]	; (8000834 <main+0x274>)
 8000698:	f007 fd88 	bl	80081ac <write_page>
	   read_page(&hi2c1);
 800069c:	4865      	ldr	r0, [pc, #404]	; (8000834 <main+0x274>)
 800069e:	f007 fd71 	bl	8008184 <read_page>


	  sprintf(msg, "%s      0x%x\n\r", "Operation:", bcm.operation);
 80006a2:	4b65      	ldr	r3, [pc, #404]	; (8000838 <main+0x278>)
 80006a4:	785b      	ldrb	r3, [r3, #1]
 80006a6:	4a6b      	ldr	r2, [pc, #428]	; (8000854 <main+0x294>)
 80006a8:	4965      	ldr	r1, [pc, #404]	; (8000840 <main+0x280>)
 80006aa:	4866      	ldr	r0, [pc, #408]	; (8000844 <main+0x284>)
 80006ac:	f007 fef4 	bl	8008498 <siprintf>
	  CDC_Transmit_FS((uint8_t*)msg, (uint16_t)strlen(msg));
 80006b0:	4864      	ldr	r0, [pc, #400]	; (8000844 <main+0x284>)
 80006b2:	f7ff fdad 	bl	8000210 <strlen>
 80006b6:	4603      	mov	r3, r0
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	4619      	mov	r1, r3
 80006bc:	4861      	ldr	r0, [pc, #388]	; (8000844 <main+0x284>)
 80006be:	f007 f859 	bl	8007774 <CDC_Transmit_FS>

	  write_operation(&hi2c1, 0x80);
 80006c2:	2180      	movs	r1, #128	; 0x80
 80006c4:	485b      	ldr	r0, [pc, #364]	; (8000834 <main+0x274>)
 80006c6:	f007 fd8b 	bl	80081e0 <write_operation>
	  	          // Keep default to ignore warning about HAL_OK case.
	  	          break;
	  	      }*/


	  sprintf(msg, "%s      0x%x\n\r", "Operation:", bcm.operation);
 80006ca:	4b5b      	ldr	r3, [pc, #364]	; (8000838 <main+0x278>)
 80006cc:	785b      	ldrb	r3, [r3, #1]
 80006ce:	4a61      	ldr	r2, [pc, #388]	; (8000854 <main+0x294>)
 80006d0:	495b      	ldr	r1, [pc, #364]	; (8000840 <main+0x280>)
 80006d2:	485c      	ldr	r0, [pc, #368]	; (8000844 <main+0x284>)
 80006d4:	f007 fee0 	bl	8008498 <siprintf>
	  CDC_Transmit_FS((uint8_t*)msg, (uint16_t)strlen(msg));
 80006d8:	485a      	ldr	r0, [pc, #360]	; (8000844 <main+0x284>)
 80006da:	f7ff fd99 	bl	8000210 <strlen>
 80006de:	4603      	mov	r3, r0
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	4619      	mov	r1, r3
 80006e4:	4857      	ldr	r0, [pc, #348]	; (8000844 <main+0x284>)
 80006e6:	f007 f845 	bl	8007774 <CDC_Transmit_FS>

	  write_page(&hi2c1, 0x00);
 80006ea:	2100      	movs	r1, #0
 80006ec:	4851      	ldr	r0, [pc, #324]	; (8000834 <main+0x274>)
 80006ee:	f007 fd5d 	bl	80081ac <write_page>

	  sprintf(msg, "%s      0x%x\n\r", "Operation:", bcm.operation);
 80006f2:	4b51      	ldr	r3, [pc, #324]	; (8000838 <main+0x278>)
 80006f4:	785b      	ldrb	r3, [r3, #1]
 80006f6:	4a57      	ldr	r2, [pc, #348]	; (8000854 <main+0x294>)
 80006f8:	4951      	ldr	r1, [pc, #324]	; (8000840 <main+0x280>)
 80006fa:	4852      	ldr	r0, [pc, #328]	; (8000844 <main+0x284>)
 80006fc:	f007 fecc 	bl	8008498 <siprintf>
	  CDC_Transmit_FS((uint8_t*)msg, (uint16_t)strlen(msg));
 8000700:	4850      	ldr	r0, [pc, #320]	; (8000844 <main+0x284>)
 8000702:	f7ff fd85 	bl	8000210 <strlen>
 8000706:	4603      	mov	r3, r0
 8000708:	b29b      	uxth	r3, r3
 800070a:	4619      	mov	r1, r3
 800070c:	484d      	ldr	r0, [pc, #308]	; (8000844 <main+0x284>)
 800070e:	f007 f831 	bl	8007774 <CDC_Transmit_FS>

	  HAL_Delay(1000);
 8000712:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000716:	f000 fb63 	bl	8000de0 <HAL_Delay>
	  print_data("Manufacture Date: ", bcm.module_specific.date);
	  print_data("Manufacture Revision: ", bcm.module_specific.revision);
	  print_data("Manufacture Location: ", bcm.module_specific.location);*/


	  if (bcm.status_cml.cmd_stat_rx) {
 800071a:	4b47      	ldr	r3, [pc, #284]	; (8000838 <main+0x278>)
 800071c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8000720:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000724:	b2db      	uxtb	r3, r3
 8000726:	2b00      	cmp	r3, #0
 8000728:	d024      	beq.n	8000774 <main+0x1b4>
		sprintf(msg, "CML: Invalid Or Unsupported Command Received\r\n");
 800072a:	4b46      	ldr	r3, [pc, #280]	; (8000844 <main+0x284>)
 800072c:	4a4a      	ldr	r2, [pc, #296]	; (8000858 <main+0x298>)
 800072e:	4615      	mov	r5, r2
 8000730:	469c      	mov	ip, r3
 8000732:	f105 0e20 	add.w	lr, r5, #32
 8000736:	4664      	mov	r4, ip
 8000738:	462e      	mov	r6, r5
 800073a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800073c:	6020      	str	r0, [r4, #0]
 800073e:	6061      	str	r1, [r4, #4]
 8000740:	60a2      	str	r2, [r4, #8]
 8000742:	60e3      	str	r3, [r4, #12]
 8000744:	3510      	adds	r5, #16
 8000746:	f10c 0c10 	add.w	ip, ip, #16
 800074a:	4575      	cmp	r5, lr
 800074c:	d1f3      	bne.n	8000736 <main+0x176>
 800074e:	4664      	mov	r4, ip
 8000750:	462b      	mov	r3, r5
 8000752:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000754:	6020      	str	r0, [r4, #0]
 8000756:	6061      	str	r1, [r4, #4]
 8000758:	60a2      	str	r2, [r4, #8]
 800075a:	881a      	ldrh	r2, [r3, #0]
 800075c:	789b      	ldrb	r3, [r3, #2]
 800075e:	81a2      	strh	r2, [r4, #12]
 8000760:	73a3      	strb	r3, [r4, #14]
		CDC_Transmit_FS((uint8_t*)msg, (uint16_t)strlen(msg));
 8000762:	4838      	ldr	r0, [pc, #224]	; (8000844 <main+0x284>)
 8000764:	f7ff fd54 	bl	8000210 <strlen>
 8000768:	4603      	mov	r3, r0
 800076a:	b29b      	uxth	r3, r3
 800076c:	4619      	mov	r1, r3
 800076e:	4835      	ldr	r0, [pc, #212]	; (8000844 <main+0x284>)
 8000770:	f007 f800 	bl	8007774 <CDC_Transmit_FS>
	  }

	  if (bcm.status_cml.data_stat_rx) {
 8000774:	4b30      	ldr	r3, [pc, #192]	; (8000838 <main+0x278>)
 8000776:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800077a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800077e:	b2db      	uxtb	r3, r3
 8000780:	2b00      	cmp	r3, #0
 8000782:	d020      	beq.n	80007c6 <main+0x206>
		sprintf(msg, "CML: Invalid Or Unsupported Data Received\r\n");
 8000784:	4b2f      	ldr	r3, [pc, #188]	; (8000844 <main+0x284>)
 8000786:	4a35      	ldr	r2, [pc, #212]	; (800085c <main+0x29c>)
 8000788:	4614      	mov	r4, r2
 800078a:	469c      	mov	ip, r3
 800078c:	f104 0e20 	add.w	lr, r4, #32
 8000790:	4665      	mov	r5, ip
 8000792:	4626      	mov	r6, r4
 8000794:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000796:	6028      	str	r0, [r5, #0]
 8000798:	6069      	str	r1, [r5, #4]
 800079a:	60aa      	str	r2, [r5, #8]
 800079c:	60eb      	str	r3, [r5, #12]
 800079e:	3410      	adds	r4, #16
 80007a0:	f10c 0c10 	add.w	ip, ip, #16
 80007a4:	4574      	cmp	r4, lr
 80007a6:	d1f3      	bne.n	8000790 <main+0x1d0>
 80007a8:	4665      	mov	r5, ip
 80007aa:	4623      	mov	r3, r4
 80007ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 80007ae:	6028      	str	r0, [r5, #0]
 80007b0:	6069      	str	r1, [r5, #4]
 80007b2:	60aa      	str	r2, [r5, #8]
		CDC_Transmit_FS((uint8_t*)msg, (uint16_t)strlen(msg));
 80007b4:	4823      	ldr	r0, [pc, #140]	; (8000844 <main+0x284>)
 80007b6:	f7ff fd2b 	bl	8000210 <strlen>
 80007ba:	4603      	mov	r3, r0
 80007bc:	b29b      	uxth	r3, r3
 80007be:	4619      	mov	r1, r3
 80007c0:	4820      	ldr	r0, [pc, #128]	; (8000844 <main+0x284>)
 80007c2:	f006 ffd7 	bl	8007774 <CDC_Transmit_FS>
	  }

	  if (bcm.status_cml.other) {
 80007c6:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <main+0x278>)
 80007c8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80007cc:	f003 0302 	and.w	r3, r3, #2
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d01e      	beq.n	8000814 <main+0x254>
		sprintf(msg, "CML: Other Communication Faults\r\n");
 80007d6:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <main+0x284>)
 80007d8:	4a21      	ldr	r2, [pc, #132]	; (8000860 <main+0x2a0>)
 80007da:	4614      	mov	r4, r2
 80007dc:	469c      	mov	ip, r3
 80007de:	f104 0e20 	add.w	lr, r4, #32
 80007e2:	4665      	mov	r5, ip
 80007e4:	4626      	mov	r6, r4
 80007e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007e8:	6028      	str	r0, [r5, #0]
 80007ea:	6069      	str	r1, [r5, #4]
 80007ec:	60aa      	str	r2, [r5, #8]
 80007ee:	60eb      	str	r3, [r5, #12]
 80007f0:	3410      	adds	r4, #16
 80007f2:	f10c 0c10 	add.w	ip, ip, #16
 80007f6:	4574      	cmp	r4, lr
 80007f8:	d1f3      	bne.n	80007e2 <main+0x222>
 80007fa:	4662      	mov	r2, ip
 80007fc:	4623      	mov	r3, r4
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS((uint8_t*)msg, (uint16_t)strlen(msg));
 8000802:	4810      	ldr	r0, [pc, #64]	; (8000844 <main+0x284>)
 8000804:	f7ff fd04 	bl	8000210 <strlen>
 8000808:	4603      	mov	r3, r0
 800080a:	b29b      	uxth	r3, r3
 800080c:	4619      	mov	r1, r3
 800080e:	480d      	ldr	r0, [pc, #52]	; (8000844 <main+0x284>)
 8000810:	f006 ffb0 	bl	8007774 <CDC_Transmit_FS>
	  }

	  sprintf(msg, "\r\n");
 8000814:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <main+0x284>)
 8000816:	4a13      	ldr	r2, [pc, #76]	; (8000864 <main+0x2a4>)
 8000818:	8811      	ldrh	r1, [r2, #0]
 800081a:	7892      	ldrb	r2, [r2, #2]
 800081c:	8019      	strh	r1, [r3, #0]
 800081e:	709a      	strb	r2, [r3, #2]
	  CDC_Transmit_FS((uint8_t*)msg, (uint16_t)strlen(msg));
 8000820:	4808      	ldr	r0, [pc, #32]	; (8000844 <main+0x284>)
 8000822:	f7ff fcf5 	bl	8000210 <strlen>
 8000826:	4603      	mov	r3, r0
 8000828:	b29b      	uxth	r3, r3
 800082a:	4619      	mov	r1, r3
 800082c:	4805      	ldr	r0, [pc, #20]	; (8000844 <main+0x284>)
 800082e:	f006 ffa1 	bl	8007774 <CDC_Transmit_FS>
  {
 8000832:	e6d2      	b.n	80005da <main+0x1a>
 8000834:	20000228 	.word	0x20000228
 8000838:	20001b90 	.word	0x20001b90
 800083c:	08008b38 	.word	0x08008b38
 8000840:	08008b44 	.word	0x08008b44
 8000844:	2000027c 	.word	0x2000027c
 8000848:	08008b54 	.word	0x08008b54
 800084c:	08008b64 	.word	0x08008b64
 8000850:	08008b70 	.word	0x08008b70
 8000854:	08008b80 	.word	0x08008b80
 8000858:	08008b8c 	.word	0x08008b8c
 800085c:	08008bbc 	.word	0x08008bbc
 8000860:	08008be8 	.word	0x08008be8
 8000864:	08008c0c 	.word	0x08008c0c

08000868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b0ac      	sub	sp, #176	; 0xb0
 800086c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000872:	2234      	movs	r2, #52	; 0x34
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f007 fd4d 	bl	8008316 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	225c      	movs	r2, #92	; 0x5c
 8000892:	2100      	movs	r1, #0
 8000894:	4618      	mov	r0, r3
 8000896:	f007 fd3e 	bl	8008316 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	4b36      	ldr	r3, [pc, #216]	; (8000978 <SystemClock_Config+0x110>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a2:	4a35      	ldr	r2, [pc, #212]	; (8000978 <SystemClock_Config+0x110>)
 80008a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a8:	6413      	str	r3, [r2, #64]	; 0x40
 80008aa:	4b33      	ldr	r3, [pc, #204]	; (8000978 <SystemClock_Config+0x110>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b30      	ldr	r3, [pc, #192]	; (800097c <SystemClock_Config+0x114>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008c2:	4a2e      	ldr	r2, [pc, #184]	; (800097c <SystemClock_Config+0x114>)
 80008c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c8:	6013      	str	r3, [r2, #0]
 80008ca:	4b2c      	ldr	r3, [pc, #176]	; (800097c <SystemClock_Config+0x114>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d6:	2301      	movs	r3, #1
 80008d8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e2:	2302      	movs	r3, #2
 80008e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008f0:	2308      	movs	r3, #8
 80008f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80008f6:	2348      	movs	r3, #72	; 0x48
 80008f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008fc:	2302      	movs	r3, #2
 80008fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000902:	2303      	movs	r3, #3
 8000904:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000908:	2302      	movs	r3, #2
 800090a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000912:	4618      	mov	r0, r3
 8000914:	f003 fcac 	bl	8004270 <HAL_RCC_OscConfig>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800091e:	f000 f8bb 	bl	8000a98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000922:	230f      	movs	r3, #15
 8000924:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000926:	2301      	movs	r3, #1
 8000928:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800092a:	2300      	movs	r3, #0
 800092c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800092e:	2300      	movs	r3, #0
 8000930:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000932:	2300      	movs	r3, #0
 8000934:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000936:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800093a:	2100      	movs	r1, #0
 800093c:	4618      	mov	r0, r3
 800093e:	f002 fea1 	bl	8003684 <HAL_RCC_ClockConfig>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000948:	f000 f8a6 	bl	8000a98 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800094c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000950:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000952:	2300      	movs	r3, #0
 8000954:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000956:	f107 030c 	add.w	r3, r7, #12
 800095a:	4618      	mov	r0, r3
 800095c:	f002 ffc0 	bl	80038e0 <HAL_RCCEx_PeriphCLKConfig>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <SystemClock_Config+0x102>
  {
    Error_Handler();
 8000966:	f000 f897 	bl	8000a98 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800096a:	f002 ff71 	bl	8003850 <HAL_RCC_EnableCSS>
}
 800096e:	bf00      	nop
 8000970:	37b0      	adds	r7, #176	; 0xb0
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800
 800097c:	40007000 	.word	0x40007000

08000980 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <MX_I2C1_Init+0x50>)
 8000986:	4a13      	ldr	r2, [pc, #76]	; (80009d4 <MX_I2C1_Init+0x54>)
 8000988:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 88000;
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_I2C1_Init+0x50>)
 800098c:	4a12      	ldr	r2, [pc, #72]	; (80009d8 <MX_I2C1_Init+0x58>)
 800098e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_I2C1_Init+0x50>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_I2C1_Init+0x50>)
 8000998:	2200      	movs	r2, #0
 800099a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_I2C1_Init+0x50>)
 800099e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009a4:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <MX_I2C1_Init+0x50>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_I2C1_Init+0x50>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <MX_I2C1_Init+0x50>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_I2C1_Init+0x50>)
 80009b8:	2280      	movs	r2, #128	; 0x80
 80009ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009bc:	4804      	ldr	r0, [pc, #16]	; (80009d0 <MX_I2C1_Init+0x50>)
 80009be:	f000 fcef 	bl	80013a0 <HAL_I2C_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009c8:	f000 f866 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000228 	.word	0x20000228
 80009d4:	40005400 	.word	0x40005400
 80009d8:	000157c0 	.word	0x000157c0

080009dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	4b26      	ldr	r3, [pc, #152]	; (8000a90 <MX_GPIO_Init+0xb4>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a25      	ldr	r2, [pc, #148]	; (8000a90 <MX_GPIO_Init+0xb4>)
 80009fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b23      	ldr	r3, [pc, #140]	; (8000a90 <MX_GPIO_Init+0xb4>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <MX_GPIO_Init+0xb4>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a1e      	ldr	r2, [pc, #120]	; (8000a90 <MX_GPIO_Init+0xb4>)
 8000a18:	f043 0304 	orr.w	r3, r3, #4
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <MX_GPIO_Init+0xb4>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0304 	and.w	r3, r3, #4
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <MX_GPIO_Init+0xb4>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a17      	ldr	r2, [pc, #92]	; (8000a90 <MX_GPIO_Init+0xb4>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <MX_GPIO_Init+0xb4>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <MX_GPIO_Init+0xb4>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a10      	ldr	r2, [pc, #64]	; (8000a90 <MX_GPIO_Init+0xb4>)
 8000a50:	f043 0302 	orr.w	r3, r3, #2
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <MX_GPIO_Init+0xb4>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0302 	and.w	r3, r3, #2
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2108      	movs	r1, #8
 8000a66:	480b      	ldr	r0, [pc, #44]	; (8000a94 <MX_GPIO_Init+0xb8>)
 8000a68:	f000 fc80 	bl	800136c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a6c:	2308      	movs	r3, #8
 8000a6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a70:	2301      	movs	r3, #1
 8000a72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	4804      	ldr	r0, [pc, #16]	; (8000a94 <MX_GPIO_Init+0xb8>)
 8000a84:	f000 fae0 	bl	8001048 <HAL_GPIO_Init>

}
 8000a88:	bf00      	nop
 8000a8a:	3728      	adds	r7, #40	; 0x28
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40020800 	.word	0x40020800

08000a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	2108      	movs	r1, #8
 8000aa0:	4806      	ldr	r0, [pc, #24]	; (8000abc <Error_Handler+0x24>)
 8000aa2:	f000 fc63 	bl	800136c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000aa6:	200a      	movs	r0, #10
 8000aa8:	f000 f99a 	bl	8000de0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2108      	movs	r1, #8
 8000ab0:	4802      	ldr	r0, [pc, #8]	; (8000abc <Error_Handler+0x24>)
 8000ab2:	f000 fc5b 	bl	800136c <HAL_GPIO_WritePin>
  /* USER CODE END Error_Handler_Debug */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40020800 	.word	0x40020800

08000ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <HAL_MspInit+0x4c>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	4a0f      	ldr	r2, [pc, #60]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad6:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	603b      	str	r3, [r7, #0]
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	4a08      	ldr	r2, [pc, #32]	; (8000b0c <HAL_MspInit+0x4c>)
 8000aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af0:	6413      	str	r3, [r2, #64]	; 0x40
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_MspInit+0x4c>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800

08000b10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	; 0x28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a19      	ldr	r2, [pc, #100]	; (8000b94 <HAL_I2C_MspInit+0x84>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d12c      	bne.n	8000b8c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a17      	ldr	r2, [pc, #92]	; (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b3c:	f043 0302 	orr.w	r3, r3, #2
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0302 	and.w	r3, r3, #2
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000b4e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b54:	2312      	movs	r3, #18
 8000b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b60:	2304      	movs	r3, #4
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4619      	mov	r1, r3
 8000b6a:	480c      	ldr	r0, [pc, #48]	; (8000b9c <HAL_I2C_MspInit+0x8c>)
 8000b6c:	f000 fa6c 	bl	8001048 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	4a07      	ldr	r2, [pc, #28]	; (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b8c:	bf00      	nop
 8000b8e:	3728      	adds	r7, #40	; 0x28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40005400 	.word	0x40005400
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40020400 	.word	0x40020400

08000ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000ba4:	f002 fe80 	bl	80038a8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}

08000bac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <HardFault_Handler+0x4>

08000bb2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <MemManage_Handler+0x4>

08000bb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <BusFault_Handler+0x4>

08000bbe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <UsageFault_Handler+0x4>

08000bc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf2:	f000 f8d5 	bl	8000da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c00:	4802      	ldr	r0, [pc, #8]	; (8000c0c <OTG_FS_IRQHandler+0x10>)
 8000c02:	f001 fcc7 	bl	8002594 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20001788 	.word	0x20001788

08000c10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c18:	4a14      	ldr	r2, [pc, #80]	; (8000c6c <_sbrk+0x5c>)
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <_sbrk+0x60>)
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c24:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <_sbrk+0x64>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d102      	bne.n	8000c32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <_sbrk+0x64>)
 8000c2e:	4a12      	ldr	r2, [pc, #72]	; (8000c78 <_sbrk+0x68>)
 8000c30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c32:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <_sbrk+0x64>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4413      	add	r3, r2
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d207      	bcs.n	8000c50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c40:	f007 fb24 	bl	800828c <__errno>
 8000c44:	4602      	mov	r2, r0
 8000c46:	230c      	movs	r3, #12
 8000c48:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4e:	e009      	b.n	8000c64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c50:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <_sbrk+0x64>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c56:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <_sbrk+0x64>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	4a05      	ldr	r2, [pc, #20]	; (8000c74 <_sbrk+0x64>)
 8000c60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c62:	68fb      	ldr	r3, [r7, #12]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20020000 	.word	0x20020000
 8000c70:	00000600 	.word	0x00000600
 8000c74:	20000218 	.word	0x20000218
 8000c78:	20001c00 	.word	0x20001c00

08000c7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <SystemInit+0x28>)
 8000c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c86:	4a07      	ldr	r2, [pc, #28]	; (8000ca4 <SystemInit+0x28>)
 8000c88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c90:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <SystemInit+0x28>)
 8000c92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c96:	609a      	str	r2, [r3, #8]
#endif
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ca8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000cac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000cae:	e003      	b.n	8000cb8 <LoopCopyDataInit>

08000cb0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000cb2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000cb4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000cb6:	3104      	adds	r1, #4

08000cb8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000cb8:	480b      	ldr	r0, [pc, #44]	; (8000ce8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000cbc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cbe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000cc0:	d3f6      	bcc.n	8000cb0 <CopyDataInit>
  ldr  r2, =_sbss
 8000cc2:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000cc4:	e002      	b.n	8000ccc <LoopFillZerobss>

08000cc6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000cc6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000cc8:	f842 3b04 	str.w	r3, [r2], #4

08000ccc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000cce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000cd0:	d3f9      	bcc.n	8000cc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cd2:	f7ff ffd3 	bl	8000c7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cd6:	f007 fadf 	bl	8008298 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cda:	f7ff fc71 	bl	80005c0 <main>
  bx  lr    
 8000cde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ce0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ce4:	08008cbc 	.word	0x08008cbc
  ldr  r0, =_sdata
 8000ce8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000cec:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 8000cf0:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 8000cf4:	20001bfc 	.word	0x20001bfc

08000cf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf8:	e7fe      	b.n	8000cf8 <ADC_IRQHandler>
	...

08000cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d00:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <HAL_Init+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0d      	ldr	r2, [pc, #52]	; (8000d3c <HAL_Init+0x40>)
 8000d06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <HAL_Init+0x40>)
 8000d12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a07      	ldr	r2, [pc, #28]	; (8000d3c <HAL_Init+0x40>)
 8000d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d24:	2003      	movs	r0, #3
 8000d26:	f000 f94d 	bl	8000fc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f000 f808 	bl	8000d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d30:	f7ff fec6 	bl	8000ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40023c00 	.word	0x40023c00

08000d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <HAL_InitTick+0x54>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <HAL_InitTick+0x58>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 f965 	bl	800102e <HAL_SYSTICK_Config>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e00e      	b.n	8000d8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b0f      	cmp	r3, #15
 8000d72:	d80a      	bhi.n	8000d8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d74:	2200      	movs	r2, #0
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7c:	f000 f92d 	bl	8000fda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d80:	4a06      	ldr	r2, [pc, #24]	; (8000d9c <HAL_InitTick+0x5c>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d86:	2300      	movs	r3, #0
 8000d88:	e000      	b.n	8000d8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000000 	.word	0x20000000
 8000d98:	20000008 	.word	0x20000008
 8000d9c:	20000004 	.word	0x20000004

08000da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_IncTick+0x20>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	461a      	mov	r2, r3
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_IncTick+0x24>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4413      	add	r3, r2
 8000db0:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <HAL_IncTick+0x24>)
 8000db2:	6013      	str	r3, [r2, #0]
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	200002b4 	.word	0x200002b4

08000dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return uwTick;
 8000dcc:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <HAL_GetTick+0x14>)
 8000dce:	681b      	ldr	r3, [r3, #0]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	200002b4 	.word	0x200002b4

08000de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de8:	f7ff ffee 	bl	8000dc8 <HAL_GetTick>
 8000dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df8:	d005      	beq.n	8000e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <HAL_Delay+0x40>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4413      	add	r3, r2
 8000e04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e06:	bf00      	nop
 8000e08:	f7ff ffde 	bl	8000dc8 <HAL_GetTick>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d8f7      	bhi.n	8000e08 <HAL_Delay+0x28>
  {
  }
}
 8000e18:	bf00      	nop
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000008 	.word	0x20000008

08000e24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e34:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e40:	4013      	ands	r3, r2
 8000e42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e56:	4a04      	ldr	r2, [pc, #16]	; (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	60d3      	str	r3, [r2, #12]
}
 8000e5c:	bf00      	nop
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <__NVIC_GetPriorityGrouping+0x18>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	f003 0307 	and.w	r3, r3, #7
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	db0b      	blt.n	8000eb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	f003 021f 	and.w	r2, r3, #31
 8000ea0:	4907      	ldr	r1, [pc, #28]	; (8000ec0 <__NVIC_EnableIRQ+0x38>)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	095b      	lsrs	r3, r3, #5
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8000eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000e100 	.word	0xe000e100

08000ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	6039      	str	r1, [r7, #0]
 8000ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	db0a      	blt.n	8000eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	490c      	ldr	r1, [pc, #48]	; (8000f10 <__NVIC_SetPriority+0x4c>)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	0112      	lsls	r2, r2, #4
 8000ee4:	b2d2      	uxtb	r2, r2
 8000ee6:	440b      	add	r3, r1
 8000ee8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eec:	e00a      	b.n	8000f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	4908      	ldr	r1, [pc, #32]	; (8000f14 <__NVIC_SetPriority+0x50>)
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	f003 030f 	and.w	r3, r3, #15
 8000efa:	3b04      	subs	r3, #4
 8000efc:	0112      	lsls	r2, r2, #4
 8000efe:	b2d2      	uxtb	r2, r2
 8000f00:	440b      	add	r3, r1
 8000f02:	761a      	strb	r2, [r3, #24]
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000e100 	.word	0xe000e100
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b089      	sub	sp, #36	; 0x24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f1c3 0307 	rsb	r3, r3, #7
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	bf28      	it	cs
 8000f36:	2304      	movcs	r3, #4
 8000f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	2b06      	cmp	r3, #6
 8000f40:	d902      	bls.n	8000f48 <NVIC_EncodePriority+0x30>
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3b03      	subs	r3, #3
 8000f46:	e000      	b.n	8000f4a <NVIC_EncodePriority+0x32>
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43da      	mvns	r2, r3
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f60:	f04f 31ff 	mov.w	r1, #4294967295
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6a:	43d9      	mvns	r1, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	4313      	orrs	r3, r2
         );
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3724      	adds	r7, #36	; 0x24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
	...

08000f80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f90:	d301      	bcc.n	8000f96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f92:	2301      	movs	r3, #1
 8000f94:	e00f      	b.n	8000fb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f96:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <SysTick_Config+0x40>)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9e:	210f      	movs	r1, #15
 8000fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa4:	f7ff ff8e 	bl	8000ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <SysTick_Config+0x40>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fae:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <SysTick_Config+0x40>)
 8000fb0:	2207      	movs	r2, #7
 8000fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	e000e010 	.word	0xe000e010

08000fc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff ff29 	bl	8000e24 <__NVIC_SetPriorityGrouping>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b086      	sub	sp, #24
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	60b9      	str	r1, [r7, #8]
 8000fe4:	607a      	str	r2, [r7, #4]
 8000fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fec:	f7ff ff3e 	bl	8000e6c <__NVIC_GetPriorityGrouping>
 8000ff0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	68b9      	ldr	r1, [r7, #8]
 8000ff6:	6978      	ldr	r0, [r7, #20]
 8000ff8:	f7ff ff8e 	bl	8000f18 <NVIC_EncodePriority>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001002:	4611      	mov	r1, r2
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ff5d 	bl	8000ec4 <__NVIC_SetPriority>
}
 800100a:	bf00      	nop
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	4603      	mov	r3, r0
 800101a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800101c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff31 	bl	8000e88 <__NVIC_EnableIRQ>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ffa2 	bl	8000f80 <SysTick_Config>
 800103c:	4603      	mov	r3, r0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001048:	b480      	push	{r7}
 800104a:	b089      	sub	sp, #36	; 0x24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
 8001062:	e165      	b.n	8001330 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001064:	2201      	movs	r2, #1
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	697a      	ldr	r2, [r7, #20]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	429a      	cmp	r2, r3
 800107e:	f040 8154 	bne.w	800132a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d00b      	beq.n	80010a2 <HAL_GPIO_Init+0x5a>
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2b02      	cmp	r3, #2
 8001090:	d007      	beq.n	80010a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001096:	2b11      	cmp	r3, #17
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2b12      	cmp	r3, #18
 80010a0:	d130      	bne.n	8001104 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	2203      	movs	r2, #3
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	68da      	ldr	r2, [r3, #12]
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010d8:	2201      	movs	r2, #1
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	091b      	lsrs	r3, r3, #4
 80010ee:	f003 0201 	and.w	r2, r3, #1
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	2203      	movs	r2, #3
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	2b02      	cmp	r3, #2
 800113a:	d003      	beq.n	8001144 <HAL_GPIO_Init+0xfc>
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	2b12      	cmp	r3, #18
 8001142:	d123      	bne.n	800118c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	08da      	lsrs	r2, r3, #3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3208      	adds	r2, #8
 800114c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001150:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	220f      	movs	r2, #15
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	691a      	ldr	r2, [r3, #16]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	08da      	lsrs	r2, r3, #3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3208      	adds	r2, #8
 8001186:	69b9      	ldr	r1, [r7, #24]
 8001188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	2203      	movs	r2, #3
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 0203 	and.w	r2, r3, #3
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f000 80ae 	beq.w	800132a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	4b5c      	ldr	r3, [pc, #368]	; (8001344 <HAL_GPIO_Init+0x2fc>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	4a5b      	ldr	r2, [pc, #364]	; (8001344 <HAL_GPIO_Init+0x2fc>)
 80011d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011dc:	6453      	str	r3, [r2, #68]	; 0x44
 80011de:	4b59      	ldr	r3, [pc, #356]	; (8001344 <HAL_GPIO_Init+0x2fc>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ea:	4a57      	ldr	r2, [pc, #348]	; (8001348 <HAL_GPIO_Init+0x300>)
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	089b      	lsrs	r3, r3, #2
 80011f0:	3302      	adds	r3, #2
 80011f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f003 0303 	and.w	r3, r3, #3
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	220f      	movs	r2, #15
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a4e      	ldr	r2, [pc, #312]	; (800134c <HAL_GPIO_Init+0x304>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d025      	beq.n	8001262 <HAL_GPIO_Init+0x21a>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a4d      	ldr	r2, [pc, #308]	; (8001350 <HAL_GPIO_Init+0x308>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d01f      	beq.n	800125e <HAL_GPIO_Init+0x216>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4c      	ldr	r2, [pc, #304]	; (8001354 <HAL_GPIO_Init+0x30c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d019      	beq.n	800125a <HAL_GPIO_Init+0x212>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4b      	ldr	r2, [pc, #300]	; (8001358 <HAL_GPIO_Init+0x310>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d013      	beq.n	8001256 <HAL_GPIO_Init+0x20e>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4a      	ldr	r2, [pc, #296]	; (800135c <HAL_GPIO_Init+0x314>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d00d      	beq.n	8001252 <HAL_GPIO_Init+0x20a>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a49      	ldr	r2, [pc, #292]	; (8001360 <HAL_GPIO_Init+0x318>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d007      	beq.n	800124e <HAL_GPIO_Init+0x206>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a48      	ldr	r2, [pc, #288]	; (8001364 <HAL_GPIO_Init+0x31c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d101      	bne.n	800124a <HAL_GPIO_Init+0x202>
 8001246:	2306      	movs	r3, #6
 8001248:	e00c      	b.n	8001264 <HAL_GPIO_Init+0x21c>
 800124a:	2307      	movs	r3, #7
 800124c:	e00a      	b.n	8001264 <HAL_GPIO_Init+0x21c>
 800124e:	2305      	movs	r3, #5
 8001250:	e008      	b.n	8001264 <HAL_GPIO_Init+0x21c>
 8001252:	2304      	movs	r3, #4
 8001254:	e006      	b.n	8001264 <HAL_GPIO_Init+0x21c>
 8001256:	2303      	movs	r3, #3
 8001258:	e004      	b.n	8001264 <HAL_GPIO_Init+0x21c>
 800125a:	2302      	movs	r3, #2
 800125c:	e002      	b.n	8001264 <HAL_GPIO_Init+0x21c>
 800125e:	2301      	movs	r3, #1
 8001260:	e000      	b.n	8001264 <HAL_GPIO_Init+0x21c>
 8001262:	2300      	movs	r3, #0
 8001264:	69fa      	ldr	r2, [r7, #28]
 8001266:	f002 0203 	and.w	r2, r2, #3
 800126a:	0092      	lsls	r2, r2, #2
 800126c:	4093      	lsls	r3, r2
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001274:	4934      	ldr	r1, [pc, #208]	; (8001348 <HAL_GPIO_Init+0x300>)
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	089b      	lsrs	r3, r3, #2
 800127a:	3302      	adds	r3, #2
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001282:	4b39      	ldr	r3, [pc, #228]	; (8001368 <HAL_GPIO_Init+0x320>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012a6:	4a30      	ldr	r2, [pc, #192]	; (8001368 <HAL_GPIO_Init+0x320>)
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012ac:	4b2e      	ldr	r3, [pc, #184]	; (8001368 <HAL_GPIO_Init+0x320>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012d0:	4a25      	ldr	r2, [pc, #148]	; (8001368 <HAL_GPIO_Init+0x320>)
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012d6:	4b24      	ldr	r3, [pc, #144]	; (8001368 <HAL_GPIO_Init+0x320>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012fa:	4a1b      	ldr	r2, [pc, #108]	; (8001368 <HAL_GPIO_Init+0x320>)
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001300:	4b19      	ldr	r3, [pc, #100]	; (8001368 <HAL_GPIO_Init+0x320>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001324:	4a10      	ldr	r2, [pc, #64]	; (8001368 <HAL_GPIO_Init+0x320>)
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3301      	adds	r3, #1
 800132e:	61fb      	str	r3, [r7, #28]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	2b0f      	cmp	r3, #15
 8001334:	f67f ae96 	bls.w	8001064 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001338:	bf00      	nop
 800133a:	3724      	adds	r7, #36	; 0x24
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	40023800 	.word	0x40023800
 8001348:	40013800 	.word	0x40013800
 800134c:	40020000 	.word	0x40020000
 8001350:	40020400 	.word	0x40020400
 8001354:	40020800 	.word	0x40020800
 8001358:	40020c00 	.word	0x40020c00
 800135c:	40021000 	.word	0x40021000
 8001360:	40021400 	.word	0x40021400
 8001364:	40021800 	.word	0x40021800
 8001368:	40013c00 	.word	0x40013c00

0800136c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	807b      	strh	r3, [r7, #2]
 8001378:	4613      	mov	r3, r2
 800137a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800137c:	787b      	ldrb	r3, [r7, #1]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001382:	887a      	ldrh	r2, [r7, #2]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001388:	e003      	b.n	8001392 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800138a:	887b      	ldrh	r3, [r7, #2]
 800138c:	041a      	lsls	r2, r3, #16
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	619a      	str	r2, [r3, #24]
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
	...

080013a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e11f      	b.n	80015f2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d106      	bne.n	80013cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff fba2 	bl	8000b10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2224      	movs	r2, #36	; 0x24
 80013d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 0201 	bic.w	r2, r2, #1
 80013e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001402:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001404:	f002 fa3c 	bl	8003880 <HAL_RCC_GetPCLK1Freq>
 8001408:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	4a7b      	ldr	r2, [pc, #492]	; (80015fc <HAL_I2C_Init+0x25c>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d807      	bhi.n	8001424 <HAL_I2C_Init+0x84>
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4a7a      	ldr	r2, [pc, #488]	; (8001600 <HAL_I2C_Init+0x260>)
 8001418:	4293      	cmp	r3, r2
 800141a:	bf94      	ite	ls
 800141c:	2301      	movls	r3, #1
 800141e:	2300      	movhi	r3, #0
 8001420:	b2db      	uxtb	r3, r3
 8001422:	e006      	b.n	8001432 <HAL_I2C_Init+0x92>
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4a77      	ldr	r2, [pc, #476]	; (8001604 <HAL_I2C_Init+0x264>)
 8001428:	4293      	cmp	r3, r2
 800142a:	bf94      	ite	ls
 800142c:	2301      	movls	r3, #1
 800142e:	2300      	movhi	r3, #0
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e0db      	b.n	80015f2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4a72      	ldr	r2, [pc, #456]	; (8001608 <HAL_I2C_Init+0x268>)
 800143e:	fba2 2303 	umull	r2, r3, r2, r3
 8001442:	0c9b      	lsrs	r3, r3, #18
 8001444:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	68ba      	ldr	r2, [r7, #8]
 8001456:	430a      	orrs	r2, r1
 8001458:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6a1b      	ldr	r3, [r3, #32]
 8001460:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	4a64      	ldr	r2, [pc, #400]	; (80015fc <HAL_I2C_Init+0x25c>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d802      	bhi.n	8001474 <HAL_I2C_Init+0xd4>
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	3301      	adds	r3, #1
 8001472:	e009      	b.n	8001488 <HAL_I2C_Init+0xe8>
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800147a:	fb02 f303 	mul.w	r3, r2, r3
 800147e:	4a63      	ldr	r2, [pc, #396]	; (800160c <HAL_I2C_Init+0x26c>)
 8001480:	fba2 2303 	umull	r2, r3, r2, r3
 8001484:	099b      	lsrs	r3, r3, #6
 8001486:	3301      	adds	r3, #1
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	6812      	ldr	r2, [r2, #0]
 800148c:	430b      	orrs	r3, r1
 800148e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800149a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	4956      	ldr	r1, [pc, #344]	; (80015fc <HAL_I2C_Init+0x25c>)
 80014a4:	428b      	cmp	r3, r1
 80014a6:	d80d      	bhi.n	80014c4 <HAL_I2C_Init+0x124>
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	1e59      	subs	r1, r3, #1
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80014b6:	3301      	adds	r3, #1
 80014b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014bc:	2b04      	cmp	r3, #4
 80014be:	bf38      	it	cc
 80014c0:	2304      	movcc	r3, #4
 80014c2:	e04f      	b.n	8001564 <HAL_I2C_Init+0x1c4>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d111      	bne.n	80014f0 <HAL_I2C_Init+0x150>
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	1e58      	subs	r0, r3, #1
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6859      	ldr	r1, [r3, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	440b      	add	r3, r1
 80014da:	fbb0 f3f3 	udiv	r3, r0, r3
 80014de:	3301      	adds	r3, #1
 80014e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	bf0c      	ite	eq
 80014e8:	2301      	moveq	r3, #1
 80014ea:	2300      	movne	r3, #0
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	e012      	b.n	8001516 <HAL_I2C_Init+0x176>
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	1e58      	subs	r0, r3, #1
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6859      	ldr	r1, [r3, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	440b      	add	r3, r1
 80014fe:	0099      	lsls	r1, r3, #2
 8001500:	440b      	add	r3, r1
 8001502:	fbb0 f3f3 	udiv	r3, r0, r3
 8001506:	3301      	adds	r3, #1
 8001508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800150c:	2b00      	cmp	r3, #0
 800150e:	bf0c      	ite	eq
 8001510:	2301      	moveq	r3, #1
 8001512:	2300      	movne	r3, #0
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_I2C_Init+0x17e>
 800151a:	2301      	movs	r3, #1
 800151c:	e022      	b.n	8001564 <HAL_I2C_Init+0x1c4>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10e      	bne.n	8001544 <HAL_I2C_Init+0x1a4>
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	1e58      	subs	r0, r3, #1
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6859      	ldr	r1, [r3, #4]
 800152e:	460b      	mov	r3, r1
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	440b      	add	r3, r1
 8001534:	fbb0 f3f3 	udiv	r3, r0, r3
 8001538:	3301      	adds	r3, #1
 800153a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800153e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001542:	e00f      	b.n	8001564 <HAL_I2C_Init+0x1c4>
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	1e58      	subs	r0, r3, #1
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6859      	ldr	r1, [r3, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	440b      	add	r3, r1
 8001552:	0099      	lsls	r1, r3, #2
 8001554:	440b      	add	r3, r1
 8001556:	fbb0 f3f3 	udiv	r3, r0, r3
 800155a:	3301      	adds	r3, #1
 800155c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001560:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	6809      	ldr	r1, [r1, #0]
 8001568:	4313      	orrs	r3, r2
 800156a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69da      	ldr	r2, [r3, #28]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a1b      	ldr	r3, [r3, #32]
 800157e:	431a      	orrs	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	430a      	orrs	r2, r1
 8001586:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001592:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	6911      	ldr	r1, [r2, #16]
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	68d2      	ldr	r2, [r2, #12]
 800159e:	4311      	orrs	r1, r2
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	6812      	ldr	r2, [r2, #0]
 80015a4:	430b      	orrs	r3, r1
 80015a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	695a      	ldr	r2, [r3, #20]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	431a      	orrs	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	430a      	orrs	r2, r1
 80015c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f042 0201 	orr.w	r2, r2, #1
 80015d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2220      	movs	r2, #32
 80015de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	000186a0 	.word	0x000186a0
 8001600:	001e847f 	.word	0x001e847f
 8001604:	003d08ff 	.word	0x003d08ff
 8001608:	431bde83 	.word	0x431bde83
 800160c:	10624dd3 	.word	0x10624dd3

08001610 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af02      	add	r7, sp, #8
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	607a      	str	r2, [r7, #4]
 800161a:	461a      	mov	r2, r3
 800161c:	460b      	mov	r3, r1
 800161e:	817b      	strh	r3, [r7, #10]
 8001620:	4613      	mov	r3, r2
 8001622:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001624:	f7ff fbd0 	bl	8000dc8 <HAL_GetTick>
 8001628:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b20      	cmp	r3, #32
 8001634:	f040 80e0 	bne.w	80017f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2319      	movs	r3, #25
 800163e:	2201      	movs	r2, #1
 8001640:	4970      	ldr	r1, [pc, #448]	; (8001804 <HAL_I2C_Master_Transmit+0x1f4>)
 8001642:	68f8      	ldr	r0, [r7, #12]
 8001644:	f000 fc72 	bl	8001f2c <I2C_WaitOnFlagUntilTimeout>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800164e:	2302      	movs	r3, #2
 8001650:	e0d3      	b.n	80017fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001658:	2b01      	cmp	r3, #1
 800165a:	d101      	bne.n	8001660 <HAL_I2C_Master_Transmit+0x50>
 800165c:	2302      	movs	r3, #2
 800165e:	e0cc      	b.n	80017fa <HAL_I2C_Master_Transmit+0x1ea>
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2201      	movs	r2, #1
 8001664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b01      	cmp	r3, #1
 8001674:	d007      	beq.n	8001686 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f042 0201 	orr.w	r2, r2, #1
 8001684:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001694:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2221      	movs	r2, #33	; 0x21
 800169a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2210      	movs	r2, #16
 80016a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2200      	movs	r2, #0
 80016aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	893a      	ldrh	r2, [r7, #8]
 80016b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016bc:	b29a      	uxth	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	4a50      	ldr	r2, [pc, #320]	; (8001808 <HAL_I2C_Master_Transmit+0x1f8>)
 80016c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80016c8:	8979      	ldrh	r1, [r7, #10]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	6a3a      	ldr	r2, [r7, #32]
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f000 fac2 	bl	8001c58 <I2C_MasterRequestWrite>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e08d      	b.n	80017fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	695b      	ldr	r3, [r3, #20]
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80016f4:	e066      	b.n	80017c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	6a39      	ldr	r1, [r7, #32]
 80016fa:	68f8      	ldr	r0, [r7, #12]
 80016fc:	f000 fcec 	bl	80020d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d00d      	beq.n	8001722 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	2b04      	cmp	r3, #4
 800170c:	d107      	bne.n	800171e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800171c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e06b      	b.n	80017fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	781a      	ldrb	r2, [r3, #0]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	1c5a      	adds	r2, r3, #1
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800173c:	b29b      	uxth	r3, r3
 800173e:	3b01      	subs	r3, #1
 8001740:	b29a      	uxth	r2, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800174a:	3b01      	subs	r3, #1
 800174c:	b29a      	uxth	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	2b04      	cmp	r3, #4
 800175e:	d11b      	bne.n	8001798 <HAL_I2C_Master_Transmit+0x188>
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001764:	2b00      	cmp	r3, #0
 8001766:	d017      	beq.n	8001798 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176c:	781a      	ldrb	r2, [r3, #0]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001778:	1c5a      	adds	r2, r3, #1
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001782:	b29b      	uxth	r3, r3
 8001784:	3b01      	subs	r3, #1
 8001786:	b29a      	uxth	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001790:	3b01      	subs	r3, #1
 8001792:	b29a      	uxth	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001798:	697a      	ldr	r2, [r7, #20]
 800179a:	6a39      	ldr	r1, [r7, #32]
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f000 fcdc 	bl	800215a <I2C_WaitOnBTFFlagUntilTimeout>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00d      	beq.n	80017c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	2b04      	cmp	r3, #4
 80017ae:	d107      	bne.n	80017c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e01a      	b.n	80017fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d194      	bne.n	80016f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2220      	movs	r2, #32
 80017e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	e000      	b.n	80017fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80017f8:	2302      	movs	r3, #2
  }
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	00100002 	.word	0x00100002
 8001808:	ffff0000 	.word	0xffff0000

0800180c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08c      	sub	sp, #48	; 0x30
 8001810:	af02      	add	r7, sp, #8
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	4608      	mov	r0, r1
 8001816:	4611      	mov	r1, r2
 8001818:	461a      	mov	r2, r3
 800181a:	4603      	mov	r3, r0
 800181c:	817b      	strh	r3, [r7, #10]
 800181e:	460b      	mov	r3, r1
 8001820:	813b      	strh	r3, [r7, #8]
 8001822:	4613      	mov	r3, r2
 8001824:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001826:	f7ff facf 	bl	8000dc8 <HAL_GetTick>
 800182a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b20      	cmp	r3, #32
 8001836:	f040 8208 	bne.w	8001c4a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	9300      	str	r3, [sp, #0]
 800183e:	2319      	movs	r3, #25
 8001840:	2201      	movs	r2, #1
 8001842:	497b      	ldr	r1, [pc, #492]	; (8001a30 <HAL_I2C_Mem_Read+0x224>)
 8001844:	68f8      	ldr	r0, [r7, #12]
 8001846:	f000 fb71 	bl	8001f2c <I2C_WaitOnFlagUntilTimeout>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001850:	2302      	movs	r3, #2
 8001852:	e1fb      	b.n	8001c4c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800185a:	2b01      	cmp	r3, #1
 800185c:	d101      	bne.n	8001862 <HAL_I2C_Mem_Read+0x56>
 800185e:	2302      	movs	r3, #2
 8001860:	e1f4      	b.n	8001c4c <HAL_I2C_Mem_Read+0x440>
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b01      	cmp	r3, #1
 8001876:	d007      	beq.n	8001888 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f042 0201 	orr.w	r2, r2, #1
 8001886:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001896:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2222      	movs	r2, #34	; 0x22
 800189c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2240      	movs	r2, #64	; 0x40
 80018a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2200      	movs	r2, #0
 80018ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80018b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018be:	b29a      	uxth	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4a5b      	ldr	r2, [pc, #364]	; (8001a34 <HAL_I2C_Mem_Read+0x228>)
 80018c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018ca:	88f8      	ldrh	r0, [r7, #6]
 80018cc:	893a      	ldrh	r2, [r7, #8]
 80018ce:	8979      	ldrh	r1, [r7, #10]
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	9301      	str	r3, [sp, #4]
 80018d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	4603      	mov	r3, r0
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f000 fa3e 	bl	8001d5c <I2C_RequestMemoryRead>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e1b0      	b.n	8001c4c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d113      	bne.n	800191a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018f2:	2300      	movs	r3, #0
 80018f4:	623b      	str	r3, [r7, #32]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	623b      	str	r3, [r7, #32]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	623b      	str	r3, [r7, #32]
 8001906:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	e184      	b.n	8001c24 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800191e:	2b01      	cmp	r3, #1
 8001920:	d11b      	bne.n	800195a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001930:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	695b      	ldr	r3, [r3, #20]
 800193c:	61fb      	str	r3, [r7, #28]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	61fb      	str	r3, [r7, #28]
 8001946:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	e164      	b.n	8001c24 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800195e:	2b02      	cmp	r3, #2
 8001960:	d11b      	bne.n	800199a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001970:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001980:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001982:	2300      	movs	r3, #0
 8001984:	61bb      	str	r3, [r7, #24]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	695b      	ldr	r3, [r3, #20]
 800198c:	61bb      	str	r3, [r7, #24]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	61bb      	str	r3, [r7, #24]
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	e144      	b.n	8001c24 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	695b      	ldr	r3, [r3, #20]
 80019a4:	617b      	str	r3, [r7, #20]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80019b0:	e138      	b.n	8001c24 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b6:	2b03      	cmp	r3, #3
 80019b8:	f200 80f1 	bhi.w	8001b9e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d123      	bne.n	8001a0c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	f000 fc07 	bl	80021dc <I2C_WaitOnRXNEFlagUntilTimeout>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e139      	b.n	8001c4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	691a      	ldr	r2, [r3, #16]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ea:	1c5a      	adds	r2, r3, #1
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f4:	3b01      	subs	r3, #1
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	3b01      	subs	r3, #1
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a0a:	e10b      	b.n	8001c24 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d14e      	bne.n	8001ab2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	4906      	ldr	r1, [pc, #24]	; (8001a38 <HAL_I2C_Mem_Read+0x22c>)
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f000 fa84 	bl	8001f2c <I2C_WaitOnFlagUntilTimeout>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d008      	beq.n	8001a3c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e10e      	b.n	8001c4c <HAL_I2C_Mem_Read+0x440>
 8001a2e:	bf00      	nop
 8001a30:	00100002 	.word	0x00100002
 8001a34:	ffff0000 	.word	0xffff0000
 8001a38:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	691a      	ldr	r2, [r3, #16]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	3b01      	subs	r3, #1
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	691a      	ldr	r2, [r3, #16]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a90:	1c5a      	adds	r2, r3, #1
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ab0:	e0b8      	b.n	8001c24 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ab8:	2200      	movs	r2, #0
 8001aba:	4966      	ldr	r1, [pc, #408]	; (8001c54 <HAL_I2C_Mem_Read+0x448>)
 8001abc:	68f8      	ldr	r0, [r7, #12]
 8001abe:	f000 fa35 	bl	8001f2c <I2C_WaitOnFlagUntilTimeout>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e0bf      	b.n	8001c4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ada:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	691a      	ldr	r2, [r3, #16]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aee:	1c5a      	adds	r2, r3, #1
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af8:	3b01      	subs	r3, #1
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	3b01      	subs	r3, #1
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b14:	2200      	movs	r2, #0
 8001b16:	494f      	ldr	r1, [pc, #316]	; (8001c54 <HAL_I2C_Mem_Read+0x448>)
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f000 fa07 	bl	8001f2c <I2C_WaitOnFlagUntilTimeout>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e091      	b.n	8001c4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	691a      	ldr	r2, [r3, #16]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4a:	1c5a      	adds	r2, r3, #1
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b54:	3b01      	subs	r3, #1
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	3b01      	subs	r3, #1
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	691a      	ldr	r2, [r3, #16]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7c:	1c5a      	adds	r2, r3, #1
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b86:	3b01      	subs	r3, #1
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	3b01      	subs	r3, #1
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b9c:	e042      	b.n	8001c24 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ba0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f000 fb1a 	bl	80021dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e04c      	b.n	8001c4c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	691a      	ldr	r2, [r3, #16]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc4:	1c5a      	adds	r2, r3, #1
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	d118      	bne.n	8001c24 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	691a      	ldr	r2, [r3, #16]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	1c5a      	adds	r2, r3, #1
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f47f aec2 	bne.w	80019b2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2220      	movs	r2, #32
 8001c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c46:	2300      	movs	r3, #0
 8001c48:	e000      	b.n	8001c4c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001c4a:	2302      	movs	r3, #2
  }
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3728      	adds	r7, #40	; 0x28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	00010004 	.word	0x00010004

08001c58 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b088      	sub	sp, #32
 8001c5c:	af02      	add	r7, sp, #8
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	607a      	str	r2, [r7, #4]
 8001c62:	603b      	str	r3, [r7, #0]
 8001c64:	460b      	mov	r3, r1
 8001c66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	d006      	beq.n	8001c82 <I2C_MasterRequestWrite+0x2a>
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d003      	beq.n	8001c82 <I2C_MasterRequestWrite+0x2a>
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c80:	d108      	bne.n	8001c94 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	e00b      	b.n	8001cac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c98:	2b12      	cmp	r3, #18
 8001c9a:	d107      	bne.n	8001cac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001caa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f000 f937 	bl	8001f2c <I2C_WaitOnFlagUntilTimeout>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d00d      	beq.n	8001ce0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cd2:	d103      	bne.n	8001cdc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cda:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e035      	b.n	8001d4c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ce8:	d108      	bne.n	8001cfc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cea:	897b      	ldrh	r3, [r7, #10]
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001cf8:	611a      	str	r2, [r3, #16]
 8001cfa:	e01b      	b.n	8001d34 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001cfc:	897b      	ldrh	r3, [r7, #10]
 8001cfe:	11db      	asrs	r3, r3, #7
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	f003 0306 	and.w	r3, r3, #6
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	f063 030f 	orn	r3, r3, #15
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	490e      	ldr	r1, [pc, #56]	; (8001d54 <I2C_MasterRequestWrite+0xfc>)
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f000 f95d 	bl	8001fda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e010      	b.n	8001d4c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d2a:	897b      	ldrh	r3, [r7, #10]
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	4907      	ldr	r1, [pc, #28]	; (8001d58 <I2C_MasterRequestWrite+0x100>)
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 f94d 	bl	8001fda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	00010008 	.word	0x00010008
 8001d58:	00010002 	.word	0x00010002

08001d5c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b088      	sub	sp, #32
 8001d60:	af02      	add	r7, sp, #8
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	4608      	mov	r0, r1
 8001d66:	4611      	mov	r1, r2
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	817b      	strh	r3, [r7, #10]
 8001d6e:	460b      	mov	r3, r1
 8001d70:	813b      	strh	r3, [r7, #8]
 8001d72:	4613      	mov	r3, r2
 8001d74:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d84:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	6a3b      	ldr	r3, [r7, #32]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f000 f8c2 	bl	8001f2c <I2C_WaitOnFlagUntilTimeout>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00d      	beq.n	8001dca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dbc:	d103      	bne.n	8001dc6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dc4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e0aa      	b.n	8001f20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001dca:	897b      	ldrh	r3, [r7, #10]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	461a      	mov	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001dd8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	6a3a      	ldr	r2, [r7, #32]
 8001dde:	4952      	ldr	r1, [pc, #328]	; (8001f28 <I2C_RequestMemoryRead+0x1cc>)
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	f000 f8fa 	bl	8001fda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e097      	b.n	8001f20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	617b      	str	r3, [r7, #20]
 8001e04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e08:	6a39      	ldr	r1, [r7, #32]
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f000 f964 	bl	80020d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00d      	beq.n	8001e32 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	d107      	bne.n	8001e2e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e076      	b.n	8001f20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e32:	88fb      	ldrh	r3, [r7, #6]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d105      	bne.n	8001e44 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e38:	893b      	ldrh	r3, [r7, #8]
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	611a      	str	r2, [r3, #16]
 8001e42:	e021      	b.n	8001e88 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001e44:	893b      	ldrh	r3, [r7, #8]
 8001e46:	0a1b      	lsrs	r3, r3, #8
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e54:	6a39      	ldr	r1, [r7, #32]
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f000 f93e 	bl	80020d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00d      	beq.n	8001e7e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	d107      	bne.n	8001e7a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e050      	b.n	8001f20 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e7e:	893b      	ldrh	r3, [r7, #8]
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e8a:	6a39      	ldr	r1, [r7, #32]
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f000 f923 	bl	80020d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00d      	beq.n	8001eb4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	2b04      	cmp	r3, #4
 8001e9e:	d107      	bne.n	8001eb0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e035      	b.n	8001f20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ec2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	6a3b      	ldr	r3, [r7, #32]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f000 f82b 	bl	8001f2c <I2C_WaitOnFlagUntilTimeout>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00d      	beq.n	8001ef8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eea:	d103      	bne.n	8001ef4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ef2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e013      	b.n	8001f20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001ef8:	897b      	ldrh	r3, [r7, #10]
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	6a3a      	ldr	r2, [r7, #32]
 8001f0c:	4906      	ldr	r1, [pc, #24]	; (8001f28 <I2C_RequestMemoryRead+0x1cc>)
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f000 f863 	bl	8001fda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e000      	b.n	8001f20 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	00010002 	.word	0x00010002

08001f2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	603b      	str	r3, [r7, #0]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f3c:	e025      	b.n	8001f8a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f44:	d021      	beq.n	8001f8a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f46:	f7fe ff3f 	bl	8000dc8 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d302      	bcc.n	8001f5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d116      	bne.n	8001f8a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2220      	movs	r2, #32
 8001f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f043 0220 	orr.w	r2, r3, #32
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e023      	b.n	8001fd2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	0c1b      	lsrs	r3, r3, #16
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d10d      	bne.n	8001fb0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	43da      	mvns	r2, r3
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	bf0c      	ite	eq
 8001fa6:	2301      	moveq	r3, #1
 8001fa8:	2300      	movne	r3, #0
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	461a      	mov	r2, r3
 8001fae:	e00c      	b.n	8001fca <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	43da      	mvns	r2, r3
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	bf0c      	ite	eq
 8001fc2:	2301      	moveq	r3, #1
 8001fc4:	2300      	movne	r3, #0
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	461a      	mov	r2, r3
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d0b6      	beq.n	8001f3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b084      	sub	sp, #16
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	60f8      	str	r0, [r7, #12]
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	607a      	str	r2, [r7, #4]
 8001fe6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fe8:	e051      	b.n	800208e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ff8:	d123      	bne.n	8002042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002008:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002012:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2220      	movs	r2, #32
 800201e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	f043 0204 	orr.w	r2, r3, #4
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e046      	b.n	80020d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002048:	d021      	beq.n	800208e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800204a:	f7fe febd 	bl	8000dc8 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	429a      	cmp	r2, r3
 8002058:	d302      	bcc.n	8002060 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d116      	bne.n	800208e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2220      	movs	r2, #32
 800206a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f043 0220 	orr.w	r2, r3, #32
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e020      	b.n	80020d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	0c1b      	lsrs	r3, r3, #16
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b01      	cmp	r3, #1
 8002096:	d10c      	bne.n	80020b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	43da      	mvns	r2, r3
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	4013      	ands	r3, r2
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	bf14      	ite	ne
 80020aa:	2301      	movne	r3, #1
 80020ac:	2300      	moveq	r3, #0
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	e00b      	b.n	80020ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	43da      	mvns	r2, r3
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	4013      	ands	r3, r2
 80020be:	b29b      	uxth	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	bf14      	ite	ne
 80020c4:	2301      	movne	r3, #1
 80020c6:	2300      	moveq	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d18d      	bne.n	8001fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020e4:	e02d      	b.n	8002142 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 f8ce 	bl	8002288 <I2C_IsAcknowledgeFailed>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e02d      	b.n	8002152 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020fc:	d021      	beq.n	8002142 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020fe:	f7fe fe63 	bl	8000dc8 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	68ba      	ldr	r2, [r7, #8]
 800210a:	429a      	cmp	r2, r3
 800210c:	d302      	bcc.n	8002114 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d116      	bne.n	8002142 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2220      	movs	r2, #32
 800211e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	f043 0220 	orr.w	r2, r3, #32
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e007      	b.n	8002152 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	695b      	ldr	r3, [r3, #20]
 8002148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800214c:	2b80      	cmp	r3, #128	; 0x80
 800214e:	d1ca      	bne.n	80020e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b084      	sub	sp, #16
 800215e:	af00      	add	r7, sp, #0
 8002160:	60f8      	str	r0, [r7, #12]
 8002162:	60b9      	str	r1, [r7, #8]
 8002164:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002166:	e02d      	b.n	80021c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f000 f88d 	bl	8002288 <I2C_IsAcknowledgeFailed>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e02d      	b.n	80021d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217e:	d021      	beq.n	80021c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002180:	f7fe fe22 	bl	8000dc8 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	429a      	cmp	r2, r3
 800218e:	d302      	bcc.n	8002196 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d116      	bne.n	80021c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2220      	movs	r2, #32
 80021a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b0:	f043 0220 	orr.w	r2, r3, #32
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e007      	b.n	80021d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	f003 0304 	and.w	r3, r3, #4
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d1ca      	bne.n	8002168 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021e8:	e042      	b.n	8002270 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	f003 0310 	and.w	r3, r3, #16
 80021f4:	2b10      	cmp	r3, #16
 80021f6:	d119      	bne.n	800222c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f06f 0210 	mvn.w	r2, #16
 8002200:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2220      	movs	r2, #32
 800220c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e029      	b.n	8002280 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800222c:	f7fe fdcc 	bl	8000dc8 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	429a      	cmp	r2, r3
 800223a:	d302      	bcc.n	8002242 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d116      	bne.n	8002270 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2220      	movs	r2, #32
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225c:	f043 0220 	orr.w	r2, r3, #32
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e007      	b.n	8002280 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227a:	2b40      	cmp	r3, #64	; 0x40
 800227c:	d1b5      	bne.n	80021ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800229a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800229e:	d11b      	bne.n	80022d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2220      	movs	r2, #32
 80022b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c4:	f043 0204 	orr.w	r2, r3, #4
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e000      	b.n	80022da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022e8:	b08f      	sub	sp, #60	; 0x3c
 80022ea:	af0a      	add	r7, sp, #40	; 0x28
 80022ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e116      	b.n	8002526 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d106      	bne.n	8002318 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f005 fb86 	bl	8007a24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2203      	movs	r2, #3
 800231c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002328:	2b00      	cmp	r3, #0
 800232a:	d102      	bne.n	8002332 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f002 fb09 	bl	800494e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	603b      	str	r3, [r7, #0]
 8002342:	687e      	ldr	r6, [r7, #4]
 8002344:	466d      	mov	r5, sp
 8002346:	f106 0410 	add.w	r4, r6, #16
 800234a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800234c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800234e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002350:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002352:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002356:	e885 0003 	stmia.w	r5, {r0, r1}
 800235a:	1d33      	adds	r3, r6, #4
 800235c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800235e:	6838      	ldr	r0, [r7, #0]
 8002360:	f002 f9e0 	bl	8004724 <USB_CoreInit>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d005      	beq.n	8002376 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2202      	movs	r2, #2
 800236e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e0d7      	b.n	8002526 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2100      	movs	r1, #0
 800237c:	4618      	mov	r0, r3
 800237e:	f002 faf7 	bl	8004970 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002382:	2300      	movs	r3, #0
 8002384:	73fb      	strb	r3, [r7, #15]
 8002386:	e04a      	b.n	800241e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002388:	7bfa      	ldrb	r2, [r7, #15]
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	1a9b      	subs	r3, r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	333d      	adds	r3, #61	; 0x3d
 8002398:	2201      	movs	r2, #1
 800239a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800239c:	7bfa      	ldrb	r2, [r7, #15]
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	1a9b      	subs	r3, r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	333c      	adds	r3, #60	; 0x3c
 80023ac:	7bfa      	ldrb	r2, [r7, #15]
 80023ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023b0:	7bfa      	ldrb	r2, [r7, #15]
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
 80023b4:	b298      	uxth	r0, r3
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	1a9b      	subs	r3, r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	3342      	adds	r3, #66	; 0x42
 80023c4:	4602      	mov	r2, r0
 80023c6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023c8:	7bfa      	ldrb	r2, [r7, #15]
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	1a9b      	subs	r3, r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	333f      	adds	r3, #63	; 0x3f
 80023d8:	2200      	movs	r2, #0
 80023da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80023dc:	7bfa      	ldrb	r2, [r7, #15]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	1a9b      	subs	r3, r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	3344      	adds	r3, #68	; 0x44
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80023f0:	7bfa      	ldrb	r2, [r7, #15]
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	4613      	mov	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	1a9b      	subs	r3, r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	3348      	adds	r3, #72	; 0x48
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002404:	7bfa      	ldrb	r2, [r7, #15]
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	4613      	mov	r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	1a9b      	subs	r3, r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	3350      	adds	r3, #80	; 0x50
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002418:	7bfb      	ldrb	r3, [r7, #15]
 800241a:	3301      	adds	r3, #1
 800241c:	73fb      	strb	r3, [r7, #15]
 800241e:	7bfa      	ldrb	r2, [r7, #15]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	429a      	cmp	r2, r3
 8002426:	d3af      	bcc.n	8002388 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002428:	2300      	movs	r3, #0
 800242a:	73fb      	strb	r3, [r7, #15]
 800242c:	e044      	b.n	80024b8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800242e:	7bfa      	ldrb	r2, [r7, #15]
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	1a9b      	subs	r3, r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	440b      	add	r3, r1
 800243c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002440:	2200      	movs	r2, #0
 8002442:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002444:	7bfa      	ldrb	r2, [r7, #15]
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	1a9b      	subs	r3, r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002456:	7bfa      	ldrb	r2, [r7, #15]
 8002458:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800245a:	7bfa      	ldrb	r2, [r7, #15]
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	1a9b      	subs	r3, r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	440b      	add	r3, r1
 8002468:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002470:	7bfa      	ldrb	r2, [r7, #15]
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	1a9b      	subs	r3, r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002486:	7bfa      	ldrb	r2, [r7, #15]
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	4613      	mov	r3, r2
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	1a9b      	subs	r3, r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	440b      	add	r3, r1
 8002494:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800249c:	7bfa      	ldrb	r2, [r7, #15]
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	4613      	mov	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	1a9b      	subs	r3, r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	3301      	adds	r3, #1
 80024b6:	73fb      	strb	r3, [r7, #15]
 80024b8:	7bfa      	ldrb	r2, [r7, #15]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d3b5      	bcc.n	800242e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	603b      	str	r3, [r7, #0]
 80024c8:	687e      	ldr	r6, [r7, #4]
 80024ca:	466d      	mov	r5, sp
 80024cc:	f106 0410 	add.w	r4, r6, #16
 80024d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80024e0:	1d33      	adds	r3, r6, #4
 80024e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024e4:	6838      	ldr	r0, [r7, #0]
 80024e6:	f002 fa6d 	bl	80049c4 <USB_DevInit>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2202      	movs	r2, #2
 80024f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e014      	b.n	8002526 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	2b01      	cmp	r3, #1
 8002512:	d102      	bne.n	800251a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f001 f891 	bl	800363c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f003 faa8 	bl	8005a74 <USB_DevDisconnect>

  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800252e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b084      	sub	sp, #16
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002542:	2b01      	cmp	r3, #1
 8002544:	d101      	bne.n	800254a <HAL_PCD_Start+0x1c>
 8002546:	2302      	movs	r3, #2
 8002548:	e020      	b.n	800258c <HAL_PCD_Start+0x5e>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002556:	2b01      	cmp	r3, #1
 8002558:	d109      	bne.n	800256e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800255e:	2b01      	cmp	r3, #1
 8002560:	d005      	beq.n	800256e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002566:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f002 f9da 	bl	800492c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f003 fa58 	bl	8005a32 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002594:	b590      	push	{r4, r7, lr}
 8002596:	b08d      	sub	sp, #52	; 0x34
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025a2:	6a3b      	ldr	r3, [r7, #32]
 80025a4:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f003 fb16 	bl	8005bdc <USB_GetMode>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f040 83ca 	bne.w	8002d4c <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f003 fa7a 	bl	8005ab6 <USB_ReadInterrupts>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 83c0 	beq.w	8002d4a <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f003 fa71 	bl	8005ab6 <USB_ReadInterrupts>
 80025d4:	4603      	mov	r3, r0
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d107      	bne.n	80025ee <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	695a      	ldr	r2, [r3, #20]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f002 0202 	and.w	r2, r2, #2
 80025ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f003 fa5f 	bl	8005ab6 <USB_ReadInterrupts>
 80025f8:	4603      	mov	r3, r0
 80025fa:	f003 0310 	and.w	r3, r3, #16
 80025fe:	2b10      	cmp	r3, #16
 8002600:	d161      	bne.n	80026c6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	699a      	ldr	r2, [r3, #24]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0210 	bic.w	r2, r2, #16
 8002610:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002612:	6a3b      	ldr	r3, [r7, #32]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	f003 020f 	and.w	r2, r3, #15
 800261e:	4613      	mov	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	1a9b      	subs	r3, r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	4413      	add	r3, r2
 800262e:	3304      	adds	r3, #4
 8002630:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	0c5b      	lsrs	r3, r3, #17
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	2b02      	cmp	r3, #2
 800263c:	d124      	bne.n	8002688 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002644:	4013      	ands	r3, r2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d035      	beq.n	80026b6 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	091b      	lsrs	r3, r3, #4
 8002652:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002654:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002658:	b29b      	uxth	r3, r3
 800265a:	461a      	mov	r2, r3
 800265c:	6a38      	ldr	r0, [r7, #32]
 800265e:	f003 f8c5 	bl	80057ec <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	091b      	lsrs	r3, r3, #4
 800266a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800266e:	441a      	add	r2, r3
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	699a      	ldr	r2, [r3, #24]
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	091b      	lsrs	r3, r3, #4
 800267c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002680:	441a      	add	r2, r3
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	619a      	str	r2, [r3, #24]
 8002686:	e016      	b.n	80026b6 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	0c5b      	lsrs	r3, r3, #17
 800268c:	f003 030f 	and.w	r3, r3, #15
 8002690:	2b06      	cmp	r3, #6
 8002692:	d110      	bne.n	80026b6 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800269a:	2208      	movs	r2, #8
 800269c:	4619      	mov	r1, r3
 800269e:	6a38      	ldr	r0, [r7, #32]
 80026a0:	f003 f8a4 	bl	80057ec <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	699a      	ldr	r2, [r3, #24]
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	091b      	lsrs	r3, r3, #4
 80026ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026b0:	441a      	add	r2, r3
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	699a      	ldr	r2, [r3, #24]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f042 0210 	orr.w	r2, r2, #16
 80026c4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f003 f9f3 	bl	8005ab6 <USB_ReadInterrupts>
 80026d0:	4603      	mov	r3, r0
 80026d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026d6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80026da:	d16e      	bne.n	80027ba <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f003 f9f9 	bl	8005adc <USB_ReadDevAllOutEpInterrupt>
 80026ea:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80026ec:	e062      	b.n	80027b4 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80026ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d057      	beq.n	80027a8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	4611      	mov	r1, r2
 8002702:	4618      	mov	r0, r3
 8002704:	f003 fa1e 	bl	8005b44 <USB_ReadDevOutEPInterrupt>
 8002708:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00c      	beq.n	800272e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	4413      	add	r3, r2
 800271c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002720:	461a      	mov	r2, r3
 8002722:	2301      	movs	r3, #1
 8002724:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002726:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 fddd 	bl	80032e8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	f003 0308 	and.w	r3, r3, #8
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00c      	beq.n	8002752 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	4413      	add	r3, r2
 8002740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002744:	461a      	mov	r2, r3
 8002746:	2308      	movs	r3, #8
 8002748:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800274a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 fed7 	bl	8003500 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	f003 0310 	and.w	r3, r3, #16
 8002758:	2b00      	cmp	r3, #0
 800275a:	d008      	beq.n	800276e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	015a      	lsls	r2, r3, #5
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	4413      	add	r3, r2
 8002764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002768:	461a      	mov	r2, r3
 800276a:	2310      	movs	r3, #16
 800276c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	f003 0320 	and.w	r3, r3, #32
 8002774:	2b00      	cmp	r3, #0
 8002776:	d008      	beq.n	800278a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	015a      	lsls	r2, r3, #5
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	4413      	add	r3, r2
 8002780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002784:	461a      	mov	r2, r3
 8002786:	2320      	movs	r3, #32
 8002788:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d009      	beq.n	80027a8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	015a      	lsls	r2, r3, #5
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	4413      	add	r3, r2
 800279c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027a0:	461a      	mov	r2, r3
 80027a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027a6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	3301      	adds	r3, #1
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80027ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b0:	085b      	lsrs	r3, r3, #1
 80027b2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80027b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d199      	bne.n	80026ee <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f003 f979 	bl	8005ab6 <USB_ReadInterrupts>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80027ce:	f040 80c0 	bne.w	8002952 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f003 f99a 	bl	8005b10 <USB_ReadDevAllInEpInterrupt>
 80027dc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80027de:	2300      	movs	r3, #0
 80027e0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80027e2:	e0b2      	b.n	800294a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80027e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 80a7 	beq.w	800293e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	4611      	mov	r1, r2
 80027fa:	4618      	mov	r0, r3
 80027fc:	f003 f9c0 	bl	8005b80 <USB_ReadDevInEPInterrupt>
 8002800:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b00      	cmp	r3, #0
 800280a:	d057      	beq.n	80028bc <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	2201      	movs	r2, #1
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	43db      	mvns	r3, r3
 8002826:	69f9      	ldr	r1, [r7, #28]
 8002828:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800282c:	4013      	ands	r3, r2
 800282e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	015a      	lsls	r2, r3, #5
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	4413      	add	r3, r2
 8002838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800283c:	461a      	mov	r2, r3
 800283e:	2301      	movs	r3, #1
 8002840:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d132      	bne.n	80028b0 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800284e:	4613      	mov	r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	1a9b      	subs	r3, r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	440b      	add	r3, r1
 8002858:	3348      	adds	r3, #72	; 0x48
 800285a:	6819      	ldr	r1, [r3, #0]
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002860:	4613      	mov	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	1a9b      	subs	r3, r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4403      	add	r3, r0
 800286a:	3344      	adds	r3, #68	; 0x44
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4419      	add	r1, r3
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002874:	4613      	mov	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	1a9b      	subs	r3, r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4403      	add	r3, r0
 800287e:	3348      	adds	r3, #72	; 0x48
 8002880:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	2b00      	cmp	r3, #0
 8002886:	d113      	bne.n	80028b0 <HAL_PCD_IRQHandler+0x31c>
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800288c:	4613      	mov	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	1a9b      	subs	r3, r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	3350      	adds	r3, #80	; 0x50
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d108      	bne.n	80028b0 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6818      	ldr	r0, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80028a8:	461a      	mov	r2, r3
 80028aa:	2101      	movs	r1, #1
 80028ac:	f003 f9c8 	bl	8005c40 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	4619      	mov	r1, r3
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f005 f935 	bl	8007b26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d008      	beq.n	80028d8 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	015a      	lsls	r2, r3, #5
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	4413      	add	r3, r2
 80028ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028d2:	461a      	mov	r2, r3
 80028d4:	2308      	movs	r3, #8
 80028d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	f003 0310 	and.w	r3, r3, #16
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d008      	beq.n	80028f4 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	015a      	lsls	r2, r3, #5
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	4413      	add	r3, r2
 80028ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028ee:	461a      	mov	r2, r3
 80028f0:	2310      	movs	r3, #16
 80028f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d008      	beq.n	8002910 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	015a      	lsls	r2, r3, #5
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	4413      	add	r3, r2
 8002906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800290a:	461a      	mov	r2, r3
 800290c:	2340      	movs	r3, #64	; 0x40
 800290e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d008      	beq.n	800292c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	015a      	lsls	r2, r3, #5
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	4413      	add	r3, r2
 8002922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002926:	461a      	mov	r2, r3
 8002928:	2302      	movs	r3, #2
 800292a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002936:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 fc48 	bl	80031ce <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	3301      	adds	r3, #1
 8002942:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002946:	085b      	lsrs	r3, r3, #1
 8002948:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800294a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294c:	2b00      	cmp	r3, #0
 800294e:	f47f af49 	bne.w	80027e4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f003 f8ad 	bl	8005ab6 <USB_ReadInterrupts>
 800295c:	4603      	mov	r3, r0
 800295e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002962:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002966:	d122      	bne.n	80029ae <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	69fa      	ldr	r2, [r7, #28]
 8002972:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002976:	f023 0301 	bic.w	r3, r3, #1
 800297a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002982:	2b01      	cmp	r3, #1
 8002984:	d108      	bne.n	8002998 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800298e:	2100      	movs	r1, #0
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f005 fb17 	bl	8007fc4 <HAL_PCDEx_LPM_Callback>
 8002996:	e002      	b.n	800299e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f005 f93b 	bl	8007c14 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	695a      	ldr	r2, [r3, #20]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80029ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f003 f87f 	bl	8005ab6 <USB_ReadInterrupts>
 80029b8:	4603      	mov	r3, r0
 80029ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029c2:	d112      	bne.n	80029ea <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d102      	bne.n	80029da <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f005 f8f7 	bl	8007bc8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	695a      	ldr	r2, [r3, #20]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80029e8:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f003 f861 	bl	8005ab6 <USB_ReadInterrupts>
 80029f4:	4603      	mov	r3, r0
 80029f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029fe:	d121      	bne.n	8002a44 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	695a      	ldr	r2, [r3, #20]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002a0e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d111      	bne.n	8002a3e <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a28:	089b      	lsrs	r3, r3, #2
 8002a2a:	f003 020f 	and.w	r2, r3, #15
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002a34:	2101      	movs	r1, #1
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f005 fac4 	bl	8007fc4 <HAL_PCDEx_LPM_Callback>
 8002a3c:	e002      	b.n	8002a44 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f005 f8c2 	bl	8007bc8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f003 f834 	bl	8005ab6 <USB_ReadInterrupts>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a58:	f040 80c7 	bne.w	8002bea <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	69fa      	ldr	r2, [r7, #28]
 8002a66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a6a:	f023 0301 	bic.w	r3, r3, #1
 8002a6e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2110      	movs	r1, #16
 8002a76:	4618      	mov	r0, r3
 8002a78:	f002 f902 	bl	8004c80 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a80:	e056      	b.n	8002b30 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a84:	015a      	lsls	r2, r3, #5
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	4413      	add	r3, r2
 8002a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a8e:	461a      	mov	r2, r3
 8002a90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a94:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a98:	015a      	lsls	r2, r3, #5
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aa6:	0151      	lsls	r1, r2, #5
 8002aa8:	69fa      	ldr	r2, [r7, #28]
 8002aaa:	440a      	add	r2, r1
 8002aac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002ab0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ab4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab8:	015a      	lsls	r2, r3, #5
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	4413      	add	r3, r2
 8002abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ac6:	0151      	lsls	r1, r2, #5
 8002ac8:	69fa      	ldr	r2, [r7, #28]
 8002aca:	440a      	add	r2, r1
 8002acc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002ad0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ad4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad8:	015a      	lsls	r2, r3, #5
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	4413      	add	r3, r2
 8002ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ae8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aec:	015a      	lsls	r2, r3, #5
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	4413      	add	r3, r2
 8002af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002afa:	0151      	lsls	r1, r2, #5
 8002afc:	69fa      	ldr	r2, [r7, #28]
 8002afe:	440a      	add	r2, r1
 8002b00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002b04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b08:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0c:	015a      	lsls	r2, r3, #5
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	4413      	add	r3, r2
 8002b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b1a:	0151      	lsls	r1, r2, #5
 8002b1c:	69fa      	ldr	r2, [r7, #28]
 8002b1e:	440a      	add	r2, r1
 8002b20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002b24:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002b28:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d3a3      	bcc.n	8002a82 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	69fa      	ldr	r2, [r7, #28]
 8002b44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b48:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002b4c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d016      	beq.n	8002b84 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b60:	69fa      	ldr	r2, [r7, #28]
 8002b62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b66:	f043 030b 	orr.w	r3, r3, #11
 8002b6a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b76:	69fa      	ldr	r2, [r7, #28]
 8002b78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b7c:	f043 030b 	orr.w	r3, r3, #11
 8002b80:	6453      	str	r3, [r2, #68]	; 0x44
 8002b82:	e015      	b.n	8002bb0 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	69fa      	ldr	r2, [r7, #28]
 8002b8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b92:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b96:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002b9a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	69fa      	ldr	r2, [r7, #28]
 8002ba6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002baa:	f043 030b 	orr.w	r3, r3, #11
 8002bae:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	69fa      	ldr	r2, [r7, #28]
 8002bba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bbe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002bc2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6818      	ldr	r0, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	f003 f833 	bl	8005c40 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695a      	ldr	r2, [r3, #20]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002be8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f002 ff61 	bl	8005ab6 <USB_ReadInterrupts>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bfe:	d124      	bne.n	8002c4a <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f002 fff7 	bl	8005bf8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f002 f897 	bl	8004d42 <USB_GetDevSpeed>
 8002c14:	4603      	mov	r3, r0
 8002c16:	461a      	mov	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681c      	ldr	r4, [r3, #0]
 8002c20:	f000 fe22 	bl	8003868 <HAL_RCC_GetHCLKFreq>
 8002c24:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4620      	mov	r0, r4
 8002c30:	f001 fdda 	bl	80047e8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f004 ff9e 	bl	8007b76 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	695a      	ldr	r2, [r3, #20]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002c48:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f002 ff31 	bl	8005ab6 <USB_ReadInterrupts>
 8002c54:	4603      	mov	r3, r0
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b08      	cmp	r3, #8
 8002c5c:	d10a      	bne.n	8002c74 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f004 ff7b 	bl	8007b5a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	695a      	ldr	r2, [r3, #20]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f002 0208 	and.w	r2, r2, #8
 8002c72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f002 ff1c 	bl	8005ab6 <USB_ReadInterrupts>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c88:	d10f      	bne.n	8002caa <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	4619      	mov	r1, r3
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f004 ffdd 	bl	8007c54 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	695a      	ldr	r2, [r3, #20]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002ca8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f002 ff01 	bl	8005ab6 <USB_ReadInterrupts>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cbe:	d10f      	bne.n	8002ce0 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	4619      	mov	r1, r3
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f004 ffb0 	bl	8007c30 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	695a      	ldr	r2, [r3, #20]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002cde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f002 fee6 	bl	8005ab6 <USB_ReadInterrupts>
 8002cea:	4603      	mov	r3, r0
 8002cec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf4:	d10a      	bne.n	8002d0c <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f004 ffbe 	bl	8007c78 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	695a      	ldr	r2, [r3, #20]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002d0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f002 fed0 	bl	8005ab6 <USB_ReadInterrupts>
 8002d16:	4603      	mov	r3, r0
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b04      	cmp	r3, #4
 8002d1e:	d115      	bne.n	8002d4c <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	f003 0304 	and.w	r3, r3, #4
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d002      	beq.n	8002d38 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f004 ffae 	bl	8007c94 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6859      	ldr	r1, [r3, #4]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	605a      	str	r2, [r3, #4]
 8002d48:	e000      	b.n	8002d4c <HAL_PCD_IRQHandler+0x7b8>
      return;
 8002d4a:	bf00      	nop
    }
  }
}
 8002d4c:	3734      	adds	r7, #52	; 0x34
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd90      	pop	{r4, r7, pc}

08002d52 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b082      	sub	sp, #8
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d101      	bne.n	8002d6c <HAL_PCD_SetAddress+0x1a>
 8002d68:	2302      	movs	r3, #2
 8002d6a:	e013      	b.n	8002d94 <HAL_PCD_SetAddress+0x42>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	78fa      	ldrb	r2, [r7, #3]
 8002d78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	78fa      	ldrb	r2, [r7, #3]
 8002d82:	4611      	mov	r1, r2
 8002d84:	4618      	mov	r0, r3
 8002d86:	f002 fe2e 	bl	80059e6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	4608      	mov	r0, r1
 8002da6:	4611      	mov	r1, r2
 8002da8:	461a      	mov	r2, r3
 8002daa:	4603      	mov	r3, r0
 8002dac:	70fb      	strb	r3, [r7, #3]
 8002dae:	460b      	mov	r3, r1
 8002db0:	803b      	strh	r3, [r7, #0]
 8002db2:	4613      	mov	r3, r2
 8002db4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002dba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	da0f      	bge.n	8002de2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dc2:	78fb      	ldrb	r3, [r7, #3]
 8002dc4:	f003 020f 	and.w	r2, r3, #15
 8002dc8:	4613      	mov	r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	1a9b      	subs	r3, r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	3338      	adds	r3, #56	; 0x38
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3304      	adds	r3, #4
 8002dd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	705a      	strb	r2, [r3, #1]
 8002de0:	e00f      	b.n	8002e02 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002de2:	78fb      	ldrb	r3, [r7, #3]
 8002de4:	f003 020f 	and.w	r2, r3, #15
 8002de8:	4613      	mov	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	1a9b      	subs	r3, r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	4413      	add	r3, r2
 8002df8:	3304      	adds	r3, #4
 8002dfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e02:	78fb      	ldrb	r3, [r7, #3]
 8002e04:	f003 030f 	and.w	r3, r3, #15
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002e0e:	883a      	ldrh	r2, [r7, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	78ba      	ldrb	r2, [r7, #2]
 8002e18:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	785b      	ldrb	r3, [r3, #1]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d004      	beq.n	8002e2c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e2c:	78bb      	ldrb	r3, [r7, #2]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d102      	bne.n	8002e38 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d101      	bne.n	8002e46 <HAL_PCD_EP_Open+0xaa>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e00e      	b.n	8002e64 <HAL_PCD_EP_Open+0xc8>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68f9      	ldr	r1, [r7, #12]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f001 ff99 	bl	8004d8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002e62:	7afb      	ldrb	r3, [r7, #11]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	da0f      	bge.n	8002ea0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e80:	78fb      	ldrb	r3, [r7, #3]
 8002e82:	f003 020f 	and.w	r2, r3, #15
 8002e86:	4613      	mov	r3, r2
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	1a9b      	subs	r3, r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	3338      	adds	r3, #56	; 0x38
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	4413      	add	r3, r2
 8002e94:	3304      	adds	r3, #4
 8002e96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	705a      	strb	r2, [r3, #1]
 8002e9e:	e00f      	b.n	8002ec0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	f003 020f 	and.w	r2, r3, #15
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	1a9b      	subs	r3, r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ec0:	78fb      	ldrb	r3, [r7, #3]
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d101      	bne.n	8002eda <HAL_PCD_EP_Close+0x6e>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e00e      	b.n	8002ef8 <HAL_PCD_EP_Close+0x8c>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68f9      	ldr	r1, [r7, #12]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f001 ffd7 	bl	8004e9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	607a      	str	r2, [r7, #4]
 8002f0a:	603b      	str	r3, [r7, #0]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f10:	7afb      	ldrb	r3, [r7, #11]
 8002f12:	f003 020f 	and.w	r2, r3, #15
 8002f16:	4613      	mov	r3, r2
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	1a9b      	subs	r3, r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	4413      	add	r3, r2
 8002f26:	3304      	adds	r3, #4
 8002f28:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f42:	7afb      	ldrb	r3, [r7, #11]
 8002f44:	f003 030f 	and.w	r3, r3, #15
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d102      	bne.n	8002f5c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f5c:	7afb      	ldrb	r3, [r7, #11]
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d109      	bne.n	8002f7a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6818      	ldr	r0, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	461a      	mov	r2, r3
 8002f72:	6979      	ldr	r1, [r7, #20]
 8002f74:	f002 fab2 	bl	80054dc <USB_EP0StartXfer>
 8002f78:	e008      	b.n	8002f8c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6818      	ldr	r0, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	461a      	mov	r2, r3
 8002f86:	6979      	ldr	r1, [r7, #20]
 8002f88:	f002 f864 	bl	8005054 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002fa2:	78fb      	ldrb	r3, [r7, #3]
 8002fa4:	f003 020f 	and.w	r2, r3, #15
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	1a9b      	subs	r3, r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	440b      	add	r3, r1
 8002fb4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002fb8:	681b      	ldr	r3, [r3, #0]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b086      	sub	sp, #24
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	60f8      	str	r0, [r7, #12]
 8002fce:	607a      	str	r2, [r7, #4]
 8002fd0:	603b      	str	r3, [r7, #0]
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fd6:	7afb      	ldrb	r3, [r7, #11]
 8002fd8:	f003 020f 	and.w	r2, r3, #15
 8002fdc:	4613      	mov	r3, r2
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	1a9b      	subs	r3, r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	3338      	adds	r3, #56	; 0x38
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	4413      	add	r3, r2
 8002fea:	3304      	adds	r3, #4
 8002fec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	2201      	movs	r2, #1
 8003004:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003006:	7afb      	ldrb	r3, [r7, #11]
 8003008:	f003 030f 	and.w	r3, r3, #15
 800300c:	b2da      	uxtb	r2, r3
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d102      	bne.n	8003020 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003020:	7afb      	ldrb	r3, [r7, #11]
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	2b00      	cmp	r3, #0
 8003028:	d109      	bne.n	800303e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	b2db      	uxtb	r3, r3
 8003034:	461a      	mov	r2, r3
 8003036:	6979      	ldr	r1, [r7, #20]
 8003038:	f002 fa50 	bl	80054dc <USB_EP0StartXfer>
 800303c:	e008      	b.n	8003050 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6818      	ldr	r0, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	b2db      	uxtb	r3, r3
 8003048:	461a      	mov	r2, r3
 800304a:	6979      	ldr	r1, [r7, #20]
 800304c:	f002 f802 	bl	8005054 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3718      	adds	r7, #24
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b084      	sub	sp, #16
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
 8003062:	460b      	mov	r3, r1
 8003064:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003066:	78fb      	ldrb	r3, [r7, #3]
 8003068:	f003 020f 	and.w	r2, r3, #15
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	429a      	cmp	r2, r3
 8003072:	d901      	bls.n	8003078 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e050      	b.n	800311a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003078:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800307c:	2b00      	cmp	r3, #0
 800307e:	da0f      	bge.n	80030a0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003080:	78fb      	ldrb	r3, [r7, #3]
 8003082:	f003 020f 	and.w	r2, r3, #15
 8003086:	4613      	mov	r3, r2
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	1a9b      	subs	r3, r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	3338      	adds	r3, #56	; 0x38
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	4413      	add	r3, r2
 8003094:	3304      	adds	r3, #4
 8003096:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2201      	movs	r2, #1
 800309c:	705a      	strb	r2, [r3, #1]
 800309e:	e00d      	b.n	80030bc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030a0:	78fa      	ldrb	r2, [r7, #3]
 80030a2:	4613      	mov	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	1a9b      	subs	r3, r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	4413      	add	r3, r2
 80030b2:	3304      	adds	r3, #4
 80030b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2201      	movs	r2, #1
 80030c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030c2:	78fb      	ldrb	r3, [r7, #3]
 80030c4:	f003 030f 	and.w	r3, r3, #15
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d101      	bne.n	80030dc <HAL_PCD_EP_SetStall+0x82>
 80030d8:	2302      	movs	r3, #2
 80030da:	e01e      	b.n	800311a <HAL_PCD_EP_SetStall+0xc0>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68f9      	ldr	r1, [r7, #12]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f002 fba7 	bl	800583e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030f0:	78fb      	ldrb	r3, [r7, #3]
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10a      	bne.n	8003110 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6818      	ldr	r0, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	b2d9      	uxtb	r1, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800310a:	461a      	mov	r2, r3
 800310c:	f002 fd98 	bl	8005c40 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b084      	sub	sp, #16
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
 800312a:	460b      	mov	r3, r1
 800312c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800312e:	78fb      	ldrb	r3, [r7, #3]
 8003130:	f003 020f 	and.w	r2, r3, #15
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	429a      	cmp	r2, r3
 800313a:	d901      	bls.n	8003140 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e042      	b.n	80031c6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003140:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003144:	2b00      	cmp	r3, #0
 8003146:	da0f      	bge.n	8003168 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003148:	78fb      	ldrb	r3, [r7, #3]
 800314a:	f003 020f 	and.w	r2, r3, #15
 800314e:	4613      	mov	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	1a9b      	subs	r3, r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	3338      	adds	r3, #56	; 0x38
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	4413      	add	r3, r2
 800315c:	3304      	adds	r3, #4
 800315e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2201      	movs	r2, #1
 8003164:	705a      	strb	r2, [r3, #1]
 8003166:	e00f      	b.n	8003188 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003168:	78fb      	ldrb	r3, [r7, #3]
 800316a:	f003 020f 	and.w	r2, r3, #15
 800316e:	4613      	mov	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	1a9b      	subs	r3, r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	4413      	add	r3, r2
 800317e:	3304      	adds	r3, #4
 8003180:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800318e:	78fb      	ldrb	r3, [r7, #3]
 8003190:	f003 030f 	and.w	r3, r3, #15
 8003194:	b2da      	uxtb	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d101      	bne.n	80031a8 <HAL_PCD_EP_ClrStall+0x86>
 80031a4:	2302      	movs	r3, #2
 80031a6:	e00e      	b.n	80031c6 <HAL_PCD_EP_ClrStall+0xa4>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68f9      	ldr	r1, [r7, #12]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f002 fbaf 	bl	800591a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b08a      	sub	sp, #40	; 0x28
 80031d2:	af02      	add	r7, sp, #8
 80031d4:	6078      	str	r0, [r7, #4]
 80031d6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	4613      	mov	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	1a9b      	subs	r3, r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	3338      	adds	r3, #56	; 0x38
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	4413      	add	r3, r2
 80031f2:	3304      	adds	r3, #4
 80031f4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	699a      	ldr	r2, [r3, #24]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d901      	bls.n	8003206 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e06c      	b.n	80032e0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	695a      	ldr	r2, [r3, #20]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	69fa      	ldr	r2, [r7, #28]
 8003218:	429a      	cmp	r2, r3
 800321a:	d902      	bls.n	8003222 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	3303      	adds	r3, #3
 8003226:	089b      	lsrs	r3, r3, #2
 8003228:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800322a:	e02b      	b.n	8003284 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	695a      	ldr	r2, [r3, #20]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	69fa      	ldr	r2, [r7, #28]
 800323e:	429a      	cmp	r2, r3
 8003240:	d902      	bls.n	8003248 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	3303      	adds	r3, #3
 800324c:	089b      	lsrs	r3, r3, #2
 800324e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	68d9      	ldr	r1, [r3, #12]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	b2da      	uxtb	r2, r3
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003260:	b2db      	uxtb	r3, r3
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	4603      	mov	r3, r0
 8003266:	6978      	ldr	r0, [r7, #20]
 8003268:	f002 fa8b 	bl	8005782 <USB_WritePacket>

    ep->xfer_buff  += len;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	441a      	add	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	699a      	ldr	r2, [r3, #24]
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	441a      	add	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	015a      	lsls	r2, r3, #5
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	4413      	add	r3, r2
 800328c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	b29b      	uxth	r3, r3
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	429a      	cmp	r2, r3
 8003298:	d809      	bhi.n	80032ae <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	699a      	ldr	r2, [r3, #24]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d203      	bcs.n	80032ae <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1be      	bne.n	800322c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	695a      	ldr	r2, [r3, #20]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d811      	bhi.n	80032de <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	f003 030f 	and.w	r3, r3, #15
 80032c0:	2201      	movs	r2, #1
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	43db      	mvns	r3, r3
 80032d4:	6939      	ldr	r1, [r7, #16]
 80032d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032da:	4013      	ands	r3, r2
 80032dc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3720      	adds	r7, #32
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	333c      	adds	r3, #60	; 0x3c
 8003300:	3304      	adds	r3, #4
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	015a      	lsls	r2, r3, #5
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	4413      	add	r3, r2
 800330e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	2b01      	cmp	r3, #1
 800331c:	f040 80a0 	bne.w	8003460 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b00      	cmp	r3, #0
 8003328:	d015      	beq.n	8003356 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	4a72      	ldr	r2, [pc, #456]	; (80034f8 <PCD_EP_OutXfrComplete_int+0x210>)
 800332e:	4293      	cmp	r3, r2
 8003330:	f240 80dd 	bls.w	80034ee <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 80d7 	beq.w	80034ee <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	015a      	lsls	r2, r3, #5
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	4413      	add	r3, r2
 8003348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800334c:	461a      	mov	r2, r3
 800334e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003352:	6093      	str	r3, [r2, #8]
 8003354:	e0cb      	b.n	80034ee <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	f003 0320 	and.w	r3, r3, #32
 800335c:	2b00      	cmp	r3, #0
 800335e:	d009      	beq.n	8003374 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4413      	add	r3, r2
 8003368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800336c:	461a      	mov	r2, r3
 800336e:	2320      	movs	r3, #32
 8003370:	6093      	str	r3, [r2, #8]
 8003372:	e0bc      	b.n	80034ee <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800337a:	2b00      	cmp	r3, #0
 800337c:	f040 80b7 	bne.w	80034ee <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4a5d      	ldr	r2, [pc, #372]	; (80034f8 <PCD_EP_OutXfrComplete_int+0x210>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d90f      	bls.n	80033a8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00a      	beq.n	80033a8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	015a      	lsls	r2, r3, #5
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	4413      	add	r3, r2
 800339a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800339e:	461a      	mov	r2, r3
 80033a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033a4:	6093      	str	r3, [r2, #8]
 80033a6:	e0a2      	b.n	80034ee <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	4613      	mov	r3, r2
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	1a9b      	subs	r3, r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80033ba:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	0159      	lsls	r1, r3, #5
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	440b      	add	r3, r1
 80033c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80033ce:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	4613      	mov	r3, r2
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	1a9b      	subs	r3, r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4403      	add	r3, r0
 80033de:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80033e2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	4613      	mov	r3, r2
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	1a9b      	subs	r3, r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80033f6:	6819      	ldr	r1, [r3, #0]
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	4613      	mov	r3, r2
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	1a9b      	subs	r3, r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4403      	add	r3, r0
 8003406:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4419      	add	r1, r3
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	4613      	mov	r3, r2
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	1a9b      	subs	r3, r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4403      	add	r3, r0
 800341c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003420:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d114      	bne.n	8003452 <PCD_EP_OutXfrComplete_int+0x16a>
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	4613      	mov	r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	1a9b      	subs	r3, r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d108      	bne.n	8003452 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6818      	ldr	r0, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800344a:	461a      	mov	r2, r3
 800344c:	2101      	movs	r1, #1
 800344e:	f002 fbf7 	bl	8005c40 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	b2db      	uxtb	r3, r3
 8003456:	4619      	mov	r1, r3
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f004 fb49 	bl	8007af0 <HAL_PCD_DataOutStageCallback>
 800345e:	e046      	b.n	80034ee <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4a26      	ldr	r2, [pc, #152]	; (80034fc <PCD_EP_OutXfrComplete_int+0x214>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d124      	bne.n	80034b2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00a      	beq.n	8003488 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	015a      	lsls	r2, r3, #5
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	4413      	add	r3, r2
 800347a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800347e:	461a      	mov	r2, r3
 8003480:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003484:	6093      	str	r3, [r2, #8]
 8003486:	e032      	b.n	80034ee <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	f003 0320 	and.w	r3, r3, #32
 800348e:	2b00      	cmp	r3, #0
 8003490:	d008      	beq.n	80034a4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	015a      	lsls	r2, r3, #5
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	4413      	add	r3, r2
 800349a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800349e:	461a      	mov	r2, r3
 80034a0:	2320      	movs	r3, #32
 80034a2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	4619      	mov	r1, r3
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f004 fb20 	bl	8007af0 <HAL_PCD_DataOutStageCallback>
 80034b0:	e01d      	b.n	80034ee <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d114      	bne.n	80034e2 <PCD_EP_OutXfrComplete_int+0x1fa>
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	4613      	mov	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d108      	bne.n	80034e2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6818      	ldr	r0, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80034da:	461a      	mov	r2, r3
 80034dc:	2100      	movs	r1, #0
 80034de:	f002 fbaf 	bl	8005c40 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	4619      	mov	r1, r3
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f004 fb01 	bl	8007af0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3718      	adds	r7, #24
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	4f54300a 	.word	0x4f54300a
 80034fc:	4f54310a 	.word	0x4f54310a

08003500 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	333c      	adds	r3, #60	; 0x3c
 8003518:	3304      	adds	r3, #4
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	015a      	lsls	r2, r3, #5
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	4413      	add	r3, r2
 8003526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	4a15      	ldr	r2, [pc, #84]	; (8003588 <PCD_EP_OutSetupPacket_int+0x88>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d90e      	bls.n	8003554 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800353c:	2b00      	cmp	r3, #0
 800353e:	d009      	beq.n	8003554 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	4413      	add	r3, r2
 8003548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800354c:	461a      	mov	r2, r3
 800354e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003552:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f004 fab9 	bl	8007acc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	4a0a      	ldr	r2, [pc, #40]	; (8003588 <PCD_EP_OutSetupPacket_int+0x88>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d90c      	bls.n	800357c <PCD_EP_OutSetupPacket_int+0x7c>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d108      	bne.n	800357c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6818      	ldr	r0, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003574:	461a      	mov	r2, r3
 8003576:	2101      	movs	r1, #1
 8003578:	f002 fb62 	bl	8005c40 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	4f54300a 	.word	0x4f54300a

0800358c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	460b      	mov	r3, r1
 8003596:	70fb      	strb	r3, [r7, #3]
 8003598:	4613      	mov	r3, r2
 800359a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80035a4:	78fb      	ldrb	r3, [r7, #3]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d107      	bne.n	80035ba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80035aa:	883b      	ldrh	r3, [r7, #0]
 80035ac:	0419      	lsls	r1, r3, #16
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	629a      	str	r2, [r3, #40]	; 0x28
 80035b8:	e028      	b.n	800360c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c0:	0c1b      	lsrs	r3, r3, #16
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	4413      	add	r3, r2
 80035c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80035c8:	2300      	movs	r3, #0
 80035ca:	73fb      	strb	r3, [r7, #15]
 80035cc:	e00d      	b.n	80035ea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	7bfb      	ldrb	r3, [r7, #15]
 80035d4:	3340      	adds	r3, #64	; 0x40
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	0c1b      	lsrs	r3, r3, #16
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	4413      	add	r3, r2
 80035e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
 80035e6:	3301      	adds	r3, #1
 80035e8:	73fb      	strb	r3, [r7, #15]
 80035ea:	7bfa      	ldrb	r2, [r7, #15]
 80035ec:	78fb      	ldrb	r3, [r7, #3]
 80035ee:	3b01      	subs	r3, #1
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d3ec      	bcc.n	80035ce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80035f4:	883b      	ldrh	r3, [r7, #0]
 80035f6:	0418      	lsls	r0, r3, #16
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6819      	ldr	r1, [r3, #0]
 80035fc:	78fb      	ldrb	r3, [r7, #3]
 80035fe:	3b01      	subs	r3, #1
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	4302      	orrs	r2, r0
 8003604:	3340      	adds	r3, #64	; 0x40
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800361a:	b480      	push	{r7}
 800361c:	b083      	sub	sp, #12
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
 8003622:	460b      	mov	r3, r1
 8003624:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	887a      	ldrh	r2, [r7, #2]
 800362c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800366e:	f043 0303 	orr.w	r3, r3, #3
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e0cc      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003698:	4b68      	ldr	r3, [pc, #416]	; (800383c <HAL_RCC_ClockConfig+0x1b8>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 030f 	and.w	r3, r3, #15
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d90c      	bls.n	80036c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a6:	4b65      	ldr	r3, [pc, #404]	; (800383c <HAL_RCC_ClockConfig+0x1b8>)
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ae:	4b63      	ldr	r3, [pc, #396]	; (800383c <HAL_RCC_ClockConfig+0x1b8>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d001      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e0b8      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d020      	beq.n	800370e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d005      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036d8:	4b59      	ldr	r3, [pc, #356]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	4a58      	ldr	r2, [pc, #352]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80036de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0308 	and.w	r3, r3, #8
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d005      	beq.n	80036fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036f0:	4b53      	ldr	r3, [pc, #332]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	4a52      	ldr	r2, [pc, #328]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80036f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036fc:	4b50      	ldr	r3, [pc, #320]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	494d      	ldr	r1, [pc, #308]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	4313      	orrs	r3, r2
 800370c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d044      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d107      	bne.n	8003732 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003722:	4b47      	ldr	r3, [pc, #284]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d119      	bne.n	8003762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e07f      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b02      	cmp	r3, #2
 8003738:	d003      	beq.n	8003742 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800373e:	2b03      	cmp	r3, #3
 8003740:	d107      	bne.n	8003752 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003742:	4b3f      	ldr	r3, [pc, #252]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d109      	bne.n	8003762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e06f      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003752:	4b3b      	ldr	r3, [pc, #236]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e067      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003762:	4b37      	ldr	r3, [pc, #220]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f023 0203 	bic.w	r2, r3, #3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	4934      	ldr	r1, [pc, #208]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003770:	4313      	orrs	r3, r2
 8003772:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003774:	f7fd fb28 	bl	8000dc8 <HAL_GetTick>
 8003778:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800377a:	e00a      	b.n	8003792 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800377c:	f7fd fb24 	bl	8000dc8 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	f241 3288 	movw	r2, #5000	; 0x1388
 800378a:	4293      	cmp	r3, r2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e04f      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003792:	4b2b      	ldr	r3, [pc, #172]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 020c 	and.w	r2, r3, #12
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d1eb      	bne.n	800377c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037a4:	4b25      	ldr	r3, [pc, #148]	; (800383c <HAL_RCC_ClockConfig+0x1b8>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 030f 	and.w	r3, r3, #15
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d20c      	bcs.n	80037cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b2:	4b22      	ldr	r3, [pc, #136]	; (800383c <HAL_RCC_ClockConfig+0x1b8>)
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ba:	4b20      	ldr	r3, [pc, #128]	; (800383c <HAL_RCC_ClockConfig+0x1b8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d001      	beq.n	80037cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e032      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d008      	beq.n	80037ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037d8:	4b19      	ldr	r3, [pc, #100]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	4916      	ldr	r1, [pc, #88]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d009      	beq.n	800380a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037f6:	4b12      	ldr	r3, [pc, #72]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	490e      	ldr	r1, [pc, #56]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	4313      	orrs	r3, r2
 8003808:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800380a:	f000 fb93 	bl	8003f34 <HAL_RCC_GetSysClockFreq>
 800380e:	4601      	mov	r1, r0
 8003810:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	091b      	lsrs	r3, r3, #4
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	4a0a      	ldr	r2, [pc, #40]	; (8003844 <HAL_RCC_ClockConfig+0x1c0>)
 800381c:	5cd3      	ldrb	r3, [r2, r3]
 800381e:	fa21 f303 	lsr.w	r3, r1, r3
 8003822:	4a09      	ldr	r2, [pc, #36]	; (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 8003824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003826:	4b09      	ldr	r3, [pc, #36]	; (800384c <HAL_RCC_ClockConfig+0x1c8>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f7fd fa88 	bl	8000d40 <HAL_InitTick>

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40023c00 	.word	0x40023c00
 8003840:	40023800 	.word	0x40023800
 8003844:	08008c60 	.word	0x08008c60
 8003848:	20000000 	.word	0x20000000
 800384c:	20000004 	.word	0x20000004

08003850 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003854:	4b03      	ldr	r3, [pc, #12]	; (8003864 <HAL_RCC_EnableCSS+0x14>)
 8003856:	2201      	movs	r2, #1
 8003858:	601a      	str	r2, [r3, #0]
}
 800385a:	bf00      	nop
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	4247004c 	.word	0x4247004c

08003868 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800386c:	4b03      	ldr	r3, [pc, #12]	; (800387c <HAL_RCC_GetHCLKFreq+0x14>)
 800386e:	681b      	ldr	r3, [r3, #0]
}
 8003870:	4618      	mov	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	20000000 	.word	0x20000000

08003880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003884:	f7ff fff0 	bl	8003868 <HAL_RCC_GetHCLKFreq>
 8003888:	4601      	mov	r1, r0
 800388a:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	0a9b      	lsrs	r3, r3, #10
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	4a03      	ldr	r2, [pc, #12]	; (80038a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003896:	5cd3      	ldrb	r3, [r2, r3]
 8003898:	fa21 f303 	lsr.w	r3, r1, r3
}
 800389c:	4618      	mov	r0, r3
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40023800 	.word	0x40023800
 80038a4:	08008c70 	.word	0x08008c70

080038a8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80038ac:	4b06      	ldr	r3, [pc, #24]	; (80038c8 <HAL_RCC_NMI_IRQHandler+0x20>)
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b4:	2b80      	cmp	r3, #128	; 0x80
 80038b6:	d104      	bne.n	80038c2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80038b8:	f000 f80a 	bl	80038d0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80038bc:	4b03      	ldr	r3, [pc, #12]	; (80038cc <HAL_RCC_NMI_IRQHandler+0x24>)
 80038be:	2280      	movs	r2, #128	; 0x80
 80038c0:	701a      	strb	r2, [r3, #0]
  }
}
 80038c2:	bf00      	nop
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40023800 	.word	0x40023800
 80038cc:	4002380e 	.word	0x4002380e

080038d0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80038d4:	bf00      	nop
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
	...

080038e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08c      	sub	sp, #48	; 0x30
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038e8:	2300      	movs	r3, #0
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80038f4:	2300      	movs	r3, #0
 80038f6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80038f8:	2300      	movs	r3, #0
 80038fa:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80038fc:	2300      	movs	r3, #0
 80038fe:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003900:	2300      	movs	r3, #0
 8003902:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003904:	2300      	movs	r3, #0
 8003906:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b00      	cmp	r3, #0
 8003916:	d010      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003918:	4b6f      	ldr	r3, [pc, #444]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800391a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800391e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003926:	496c      	ldr	r1, [pc, #432]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003928:	4313      	orrs	r3, r2
 800392a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003936:	2301      	movs	r3, #1
 8003938:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d010      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003946:	4b64      	ldr	r3, [pc, #400]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003948:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800394c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003954:	4960      	ldr	r1, [pc, #384]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003956:	4313      	orrs	r3, r2
 8003958:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003964:	2301      	movs	r3, #1
 8003966:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0304 	and.w	r3, r3, #4
 8003970:	2b00      	cmp	r3, #0
 8003972:	d017      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003974:	4b58      	ldr	r3, [pc, #352]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003976:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800397a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	4955      	ldr	r1, [pc, #340]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003984:	4313      	orrs	r3, r2
 8003986:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003992:	d101      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003994:	2301      	movs	r3, #1
 8003996:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80039a0:	2301      	movs	r3, #1
 80039a2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0308 	and.w	r3, r3, #8
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d017      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039b0:	4b49      	ldr	r3, [pc, #292]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039be:	4946      	ldr	r1, [pc, #280]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039ce:	d101      	bne.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80039d0:	2301      	movs	r3, #1
 80039d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80039dc:	2301      	movs	r3, #1
 80039de:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0320 	and.w	r3, r3, #32
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 808a 	beq.w	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80039ee:	2300      	movs	r3, #0
 80039f0:	60bb      	str	r3, [r7, #8]
 80039f2:	4b39      	ldr	r3, [pc, #228]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	4a38      	ldr	r2, [pc, #224]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039fc:	6413      	str	r3, [r2, #64]	; 0x40
 80039fe:	4b36      	ldr	r3, [pc, #216]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a06:	60bb      	str	r3, [r7, #8]
 8003a08:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003a0a:	4b34      	ldr	r3, [pc, #208]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a33      	ldr	r2, [pc, #204]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a14:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a16:	f7fd f9d7 	bl	8000dc8 <HAL_GetTick>
 8003a1a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003a1c:	e008      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003a1e:	f7fd f9d3 	bl	8000dc8 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e278      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003a30:	4b2a      	ldr	r3, [pc, #168]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0f0      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a3c:	4b26      	ldr	r3, [pc, #152]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a44:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d02f      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a54:	6a3a      	ldr	r2, [r7, #32]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d028      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a5a:	4b1f      	ldr	r3, [pc, #124]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a62:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a64:	4b1e      	ldr	r3, [pc, #120]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003a66:	2201      	movs	r2, #1
 8003a68:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003a70:	4a19      	ldr	r2, [pc, #100]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a72:	6a3b      	ldr	r3, [r7, #32]
 8003a74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a76:	4b18      	ldr	r3, [pc, #96]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d114      	bne.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003a82:	f7fd f9a1 	bl	8000dc8 <HAL_GetTick>
 8003a86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a88:	e00a      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a8a:	f7fd f99d 	bl	8000dc8 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e240      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa0:	4b0d      	ldr	r3, [pc, #52]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0ee      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ab4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ab8:	d114      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003aba:	4b07      	ldr	r3, [pc, #28]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003aca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ace:	4902      	ldr	r1, [pc, #8]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	608b      	str	r3, [r1, #8]
 8003ad4:	e00c      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003ad6:	bf00      	nop
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	40007000 	.word	0x40007000
 8003ae0:	42470e40 	.word	0x42470e40
 8003ae4:	4b4a      	ldr	r3, [pc, #296]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	4a49      	ldr	r2, [pc, #292]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003aea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003aee:	6093      	str	r3, [r2, #8]
 8003af0:	4b47      	ldr	r3, [pc, #284]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003af2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003afc:	4944      	ldr	r1, [pc, #272]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0310 	and.w	r3, r3, #16
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d004      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003b14:	4b3f      	ldr	r3, [pc, #252]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003b16:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00a      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003b24:	4b3a      	ldr	r3, [pc, #232]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b32:	4937      	ldr	r1, [pc, #220]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00a      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b46:	4b32      	ldr	r3, [pc, #200]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b4c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b54:	492e      	ldr	r1, [pc, #184]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d011      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003b68:	4b29      	ldr	r3, [pc, #164]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b6e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b76:	4926      	ldr	r1, [pc, #152]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b86:	d101      	bne.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00a      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003b98:	4b1d      	ldr	r3, [pc, #116]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b9e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba6:	491a      	ldr	r1, [pc, #104]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d011      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003bba:	4b15      	ldr	r3, [pc, #84]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bc0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bc8:	4911      	ldr	r1, [pc, #68]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bd8:	d101      	bne.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d005      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bec:	f040 80ff 	bne.w	8003dee <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003bf0:	4b09      	ldr	r3, [pc, #36]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003bf6:	f7fd f8e7 	bl	8000dc8 <HAL_GetTick>
 8003bfa:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003bfc:	e00e      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003bfe:	f7fd f8e3 	bl	8000dc8 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d907      	bls.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e188      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003c10:	40023800 	.word	0x40023800
 8003c14:	424711e0 	.word	0x424711e0
 8003c18:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c1c:	4b7e      	ldr	r3, [pc, #504]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1ea      	bne.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d009      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d028      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d124      	bne.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003c50:	4b71      	ldr	r3, [pc, #452]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c56:	0c1b      	lsrs	r3, r3, #16
 8003c58:	f003 0303 	and.w	r3, r3, #3
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c62:	4b6d      	ldr	r3, [pc, #436]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c68:	0e1b      	lsrs	r3, r3, #24
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	019b      	lsls	r3, r3, #6
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	085b      	lsrs	r3, r3, #1
 8003c80:	3b01      	subs	r3, #1
 8003c82:	041b      	lsls	r3, r3, #16
 8003c84:	431a      	orrs	r2, r3
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	061b      	lsls	r3, r3, #24
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	071b      	lsls	r3, r3, #28
 8003c92:	4961      	ldr	r1, [pc, #388]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0304 	and.w	r3, r3, #4
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d004      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003caa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cae:	d00a      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d035      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cc4:	d130      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003cc6:	4b54      	ldr	r3, [pc, #336]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ccc:	0c1b      	lsrs	r3, r3, #16
 8003cce:	f003 0303 	and.w	r3, r3, #3
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003cd8:	4b4f      	ldr	r3, [pc, #316]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cde:	0f1b      	lsrs	r3, r3, #28
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	019b      	lsls	r3, r3, #6
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	085b      	lsrs	r3, r3, #1
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	041b      	lsls	r3, r3, #16
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	061b      	lsls	r3, r3, #24
 8003d02:	431a      	orrs	r2, r3
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	071b      	lsls	r3, r3, #28
 8003d08:	4943      	ldr	r1, [pc, #268]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003d10:	4b41      	ldr	r3, [pc, #260]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d16:	f023 021f 	bic.w	r2, r3, #31
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	493d      	ldr	r1, [pc, #244]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d029      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d3c:	d124      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003d3e:	4b36      	ldr	r3, [pc, #216]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d44:	0c1b      	lsrs	r3, r3, #16
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d50:	4b31      	ldr	r3, [pc, #196]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d56:	0f1b      	lsrs	r3, r3, #28
 8003d58:	f003 0307 	and.w	r3, r3, #7
 8003d5c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685a      	ldr	r2, [r3, #4]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	019b      	lsls	r3, r3, #6
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	085b      	lsrs	r3, r3, #1
 8003d70:	3b01      	subs	r3, #1
 8003d72:	041b      	lsls	r3, r3, #16
 8003d74:	431a      	orrs	r2, r3
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	061b      	lsls	r3, r3, #24
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	071b      	lsls	r3, r3, #28
 8003d80:	4925      	ldr	r1, [pc, #148]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d016      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	019b      	lsls	r3, r3, #6
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	085b      	lsrs	r3, r3, #1
 8003da6:	3b01      	subs	r3, #1
 8003da8:	041b      	lsls	r3, r3, #16
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	061b      	lsls	r3, r3, #24
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	071b      	lsls	r3, r3, #28
 8003dba:	4917      	ldr	r1, [pc, #92]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003dc2:	4b16      	ldr	r3, [pc, #88]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003dc8:	f7fc fffe 	bl	8000dc8 <HAL_GetTick>
 8003dcc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003dd0:	f7fc fffa 	bl	8000dc8 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e09f      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003de2:	4b0d      	ldr	r3, [pc, #52]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0f0      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	f040 8095 	bne.w	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003df6:	4b0a      	ldr	r3, [pc, #40]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003dfc:	f7fc ffe4 	bl	8000dc8 <HAL_GetTick>
 8003e00:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e02:	e00f      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003e04:	f7fc ffe0 	bl	8000dc8 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d908      	bls.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e085      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003e16:	bf00      	nop
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	42470068 	.word	0x42470068
 8003e20:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e24:	4b41      	ldr	r3, [pc, #260]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e30:	d0e8      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0304 	and.w	r3, r3, #4
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d009      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d02b      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d127      	bne.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003e5a:	4b34      	ldr	r3, [pc, #208]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e60:	0c1b      	lsrs	r3, r3, #16
 8003e62:	f003 0303 	and.w	r3, r3, #3
 8003e66:	3301      	adds	r3, #1
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	699a      	ldr	r2, [r3, #24]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	69db      	ldr	r3, [r3, #28]
 8003e74:	019b      	lsls	r3, r3, #6
 8003e76:	431a      	orrs	r2, r3
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	085b      	lsrs	r3, r3, #1
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	041b      	lsls	r3, r3, #16
 8003e80:	431a      	orrs	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	061b      	lsls	r3, r3, #24
 8003e88:	4928      	ldr	r1, [pc, #160]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003e90:	4b26      	ldr	r3, [pc, #152]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e96:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	021b      	lsls	r3, r3, #8
 8003ea2:	4922      	ldr	r1, [pc, #136]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d01d      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ebe:	d118      	bne.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ec0:	4b1a      	ldr	r3, [pc, #104]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec6:	0e1b      	lsrs	r3, r3, #24
 8003ec8:	f003 030f 	and.w	r3, r3, #15
 8003ecc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699a      	ldr	r2, [r3, #24]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	019b      	lsls	r3, r3, #6
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	085b      	lsrs	r3, r3, #1
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	041b      	lsls	r3, r3, #16
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	061b      	lsls	r3, r3, #24
 8003eea:	4910      	ldr	r1, [pc, #64]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ef2:	4b0f      	ldr	r3, [pc, #60]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ef8:	f7fc ff66 	bl	8000dc8 <HAL_GetTick>
 8003efc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003efe:	e008      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003f00:	f7fc ff62 	bl	8000dc8 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e007      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f12:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f1e:	d1ef      	bne.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3730      	adds	r7, #48	; 0x30
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	42470070 	.word	0x42470070

08003f34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f36:	b087      	sub	sp, #28
 8003f38:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8003f42:	2300      	movs	r3, #0
 8003f44:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8003f46:	2300      	movs	r3, #0
 8003f48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f4e:	4bc6      	ldr	r3, [pc, #792]	; (8004268 <HAL_RCC_GetSysClockFreq+0x334>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 030c 	and.w	r3, r3, #12
 8003f56:	2b0c      	cmp	r3, #12
 8003f58:	f200 817e 	bhi.w	8004258 <HAL_RCC_GetSysClockFreq+0x324>
 8003f5c:	a201      	add	r2, pc, #4	; (adr r2, 8003f64 <HAL_RCC_GetSysClockFreq+0x30>)
 8003f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f62:	bf00      	nop
 8003f64:	08003f99 	.word	0x08003f99
 8003f68:	08004259 	.word	0x08004259
 8003f6c:	08004259 	.word	0x08004259
 8003f70:	08004259 	.word	0x08004259
 8003f74:	08003f9f 	.word	0x08003f9f
 8003f78:	08004259 	.word	0x08004259
 8003f7c:	08004259 	.word	0x08004259
 8003f80:	08004259 	.word	0x08004259
 8003f84:	08003fa5 	.word	0x08003fa5
 8003f88:	08004259 	.word	0x08004259
 8003f8c:	08004259 	.word	0x08004259
 8003f90:	08004259 	.word	0x08004259
 8003f94:	08004101 	.word	0x08004101
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f98:	4bb4      	ldr	r3, [pc, #720]	; (800426c <HAL_RCC_GetSysClockFreq+0x338>)
 8003f9a:	613b      	str	r3, [r7, #16]
       break;
 8003f9c:	e15f      	b.n	800425e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f9e:	4bb3      	ldr	r3, [pc, #716]	; (800426c <HAL_RCC_GetSysClockFreq+0x338>)
 8003fa0:	613b      	str	r3, [r7, #16]
      break;
 8003fa2:	e15c      	b.n	800425e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fa4:	4bb0      	ldr	r3, [pc, #704]	; (8004268 <HAL_RCC_GetSysClockFreq+0x334>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fac:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fae:	4bae      	ldr	r3, [pc, #696]	; (8004268 <HAL_RCC_GetSysClockFreq+0x334>)
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d04a      	beq.n	8004050 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fba:	4bab      	ldr	r3, [pc, #684]	; (8004268 <HAL_RCC_GetSysClockFreq+0x334>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	099b      	lsrs	r3, r3, #6
 8003fc0:	f04f 0400 	mov.w	r4, #0
 8003fc4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003fc8:	f04f 0200 	mov.w	r2, #0
 8003fcc:	ea03 0501 	and.w	r5, r3, r1
 8003fd0:	ea04 0602 	and.w	r6, r4, r2
 8003fd4:	4629      	mov	r1, r5
 8003fd6:	4632      	mov	r2, r6
 8003fd8:	f04f 0300 	mov.w	r3, #0
 8003fdc:	f04f 0400 	mov.w	r4, #0
 8003fe0:	0154      	lsls	r4, r2, #5
 8003fe2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003fe6:	014b      	lsls	r3, r1, #5
 8003fe8:	4619      	mov	r1, r3
 8003fea:	4622      	mov	r2, r4
 8003fec:	1b49      	subs	r1, r1, r5
 8003fee:	eb62 0206 	sbc.w	r2, r2, r6
 8003ff2:	f04f 0300 	mov.w	r3, #0
 8003ff6:	f04f 0400 	mov.w	r4, #0
 8003ffa:	0194      	lsls	r4, r2, #6
 8003ffc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004000:	018b      	lsls	r3, r1, #6
 8004002:	1a5b      	subs	r3, r3, r1
 8004004:	eb64 0402 	sbc.w	r4, r4, r2
 8004008:	f04f 0100 	mov.w	r1, #0
 800400c:	f04f 0200 	mov.w	r2, #0
 8004010:	00e2      	lsls	r2, r4, #3
 8004012:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004016:	00d9      	lsls	r1, r3, #3
 8004018:	460b      	mov	r3, r1
 800401a:	4614      	mov	r4, r2
 800401c:	195b      	adds	r3, r3, r5
 800401e:	eb44 0406 	adc.w	r4, r4, r6
 8004022:	f04f 0100 	mov.w	r1, #0
 8004026:	f04f 0200 	mov.w	r2, #0
 800402a:	02a2      	lsls	r2, r4, #10
 800402c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004030:	0299      	lsls	r1, r3, #10
 8004032:	460b      	mov	r3, r1
 8004034:	4614      	mov	r4, r2
 8004036:	4618      	mov	r0, r3
 8004038:	4621      	mov	r1, r4
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f04f 0400 	mov.w	r4, #0
 8004040:	461a      	mov	r2, r3
 8004042:	4623      	mov	r3, r4
 8004044:	f7fc f93c 	bl	80002c0 <__aeabi_uldivmod>
 8004048:	4603      	mov	r3, r0
 800404a:	460c      	mov	r4, r1
 800404c:	617b      	str	r3, [r7, #20]
 800404e:	e049      	b.n	80040e4 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004050:	4b85      	ldr	r3, [pc, #532]	; (8004268 <HAL_RCC_GetSysClockFreq+0x334>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	099b      	lsrs	r3, r3, #6
 8004056:	f04f 0400 	mov.w	r4, #0
 800405a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800405e:	f04f 0200 	mov.w	r2, #0
 8004062:	ea03 0501 	and.w	r5, r3, r1
 8004066:	ea04 0602 	and.w	r6, r4, r2
 800406a:	4629      	mov	r1, r5
 800406c:	4632      	mov	r2, r6
 800406e:	f04f 0300 	mov.w	r3, #0
 8004072:	f04f 0400 	mov.w	r4, #0
 8004076:	0154      	lsls	r4, r2, #5
 8004078:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800407c:	014b      	lsls	r3, r1, #5
 800407e:	4619      	mov	r1, r3
 8004080:	4622      	mov	r2, r4
 8004082:	1b49      	subs	r1, r1, r5
 8004084:	eb62 0206 	sbc.w	r2, r2, r6
 8004088:	f04f 0300 	mov.w	r3, #0
 800408c:	f04f 0400 	mov.w	r4, #0
 8004090:	0194      	lsls	r4, r2, #6
 8004092:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004096:	018b      	lsls	r3, r1, #6
 8004098:	1a5b      	subs	r3, r3, r1
 800409a:	eb64 0402 	sbc.w	r4, r4, r2
 800409e:	f04f 0100 	mov.w	r1, #0
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	00e2      	lsls	r2, r4, #3
 80040a8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80040ac:	00d9      	lsls	r1, r3, #3
 80040ae:	460b      	mov	r3, r1
 80040b0:	4614      	mov	r4, r2
 80040b2:	195b      	adds	r3, r3, r5
 80040b4:	eb44 0406 	adc.w	r4, r4, r6
 80040b8:	f04f 0100 	mov.w	r1, #0
 80040bc:	f04f 0200 	mov.w	r2, #0
 80040c0:	02a2      	lsls	r2, r4, #10
 80040c2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80040c6:	0299      	lsls	r1, r3, #10
 80040c8:	460b      	mov	r3, r1
 80040ca:	4614      	mov	r4, r2
 80040cc:	4618      	mov	r0, r3
 80040ce:	4621      	mov	r1, r4
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f04f 0400 	mov.w	r4, #0
 80040d6:	461a      	mov	r2, r3
 80040d8:	4623      	mov	r3, r4
 80040da:	f7fc f8f1 	bl	80002c0 <__aeabi_uldivmod>
 80040de:	4603      	mov	r3, r0
 80040e0:	460c      	mov	r4, r1
 80040e2:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040e4:	4b60      	ldr	r3, [pc, #384]	; (8004268 <HAL_RCC_GetSysClockFreq+0x334>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	0c1b      	lsrs	r3, r3, #16
 80040ea:	f003 0303 	and.w	r3, r3, #3
 80040ee:	3301      	adds	r3, #1
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fc:	613b      	str	r3, [r7, #16]
      break;
 80040fe:	e0ae      	b.n	800425e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004100:	4b59      	ldr	r3, [pc, #356]	; (8004268 <HAL_RCC_GetSysClockFreq+0x334>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004108:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800410a:	4b57      	ldr	r3, [pc, #348]	; (8004268 <HAL_RCC_GetSysClockFreq+0x334>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d04a      	beq.n	80041ac <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004116:	4b54      	ldr	r3, [pc, #336]	; (8004268 <HAL_RCC_GetSysClockFreq+0x334>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	099b      	lsrs	r3, r3, #6
 800411c:	f04f 0400 	mov.w	r4, #0
 8004120:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004124:	f04f 0200 	mov.w	r2, #0
 8004128:	ea03 0501 	and.w	r5, r3, r1
 800412c:	ea04 0602 	and.w	r6, r4, r2
 8004130:	4629      	mov	r1, r5
 8004132:	4632      	mov	r2, r6
 8004134:	f04f 0300 	mov.w	r3, #0
 8004138:	f04f 0400 	mov.w	r4, #0
 800413c:	0154      	lsls	r4, r2, #5
 800413e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004142:	014b      	lsls	r3, r1, #5
 8004144:	4619      	mov	r1, r3
 8004146:	4622      	mov	r2, r4
 8004148:	1b49      	subs	r1, r1, r5
 800414a:	eb62 0206 	sbc.w	r2, r2, r6
 800414e:	f04f 0300 	mov.w	r3, #0
 8004152:	f04f 0400 	mov.w	r4, #0
 8004156:	0194      	lsls	r4, r2, #6
 8004158:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800415c:	018b      	lsls	r3, r1, #6
 800415e:	1a5b      	subs	r3, r3, r1
 8004160:	eb64 0402 	sbc.w	r4, r4, r2
 8004164:	f04f 0100 	mov.w	r1, #0
 8004168:	f04f 0200 	mov.w	r2, #0
 800416c:	00e2      	lsls	r2, r4, #3
 800416e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004172:	00d9      	lsls	r1, r3, #3
 8004174:	460b      	mov	r3, r1
 8004176:	4614      	mov	r4, r2
 8004178:	195b      	adds	r3, r3, r5
 800417a:	eb44 0406 	adc.w	r4, r4, r6
 800417e:	f04f 0100 	mov.w	r1, #0
 8004182:	f04f 0200 	mov.w	r2, #0
 8004186:	02a2      	lsls	r2, r4, #10
 8004188:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800418c:	0299      	lsls	r1, r3, #10
 800418e:	460b      	mov	r3, r1
 8004190:	4614      	mov	r4, r2
 8004192:	4618      	mov	r0, r3
 8004194:	4621      	mov	r1, r4
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f04f 0400 	mov.w	r4, #0
 800419c:	461a      	mov	r2, r3
 800419e:	4623      	mov	r3, r4
 80041a0:	f7fc f88e 	bl	80002c0 <__aeabi_uldivmod>
 80041a4:	4603      	mov	r3, r0
 80041a6:	460c      	mov	r4, r1
 80041a8:	617b      	str	r3, [r7, #20]
 80041aa:	e049      	b.n	8004240 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041ac:	4b2e      	ldr	r3, [pc, #184]	; (8004268 <HAL_RCC_GetSysClockFreq+0x334>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	099b      	lsrs	r3, r3, #6
 80041b2:	f04f 0400 	mov.w	r4, #0
 80041b6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80041ba:	f04f 0200 	mov.w	r2, #0
 80041be:	ea03 0501 	and.w	r5, r3, r1
 80041c2:	ea04 0602 	and.w	r6, r4, r2
 80041c6:	4629      	mov	r1, r5
 80041c8:	4632      	mov	r2, r6
 80041ca:	f04f 0300 	mov.w	r3, #0
 80041ce:	f04f 0400 	mov.w	r4, #0
 80041d2:	0154      	lsls	r4, r2, #5
 80041d4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80041d8:	014b      	lsls	r3, r1, #5
 80041da:	4619      	mov	r1, r3
 80041dc:	4622      	mov	r2, r4
 80041de:	1b49      	subs	r1, r1, r5
 80041e0:	eb62 0206 	sbc.w	r2, r2, r6
 80041e4:	f04f 0300 	mov.w	r3, #0
 80041e8:	f04f 0400 	mov.w	r4, #0
 80041ec:	0194      	lsls	r4, r2, #6
 80041ee:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80041f2:	018b      	lsls	r3, r1, #6
 80041f4:	1a5b      	subs	r3, r3, r1
 80041f6:	eb64 0402 	sbc.w	r4, r4, r2
 80041fa:	f04f 0100 	mov.w	r1, #0
 80041fe:	f04f 0200 	mov.w	r2, #0
 8004202:	00e2      	lsls	r2, r4, #3
 8004204:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004208:	00d9      	lsls	r1, r3, #3
 800420a:	460b      	mov	r3, r1
 800420c:	4614      	mov	r4, r2
 800420e:	195b      	adds	r3, r3, r5
 8004210:	eb44 0406 	adc.w	r4, r4, r6
 8004214:	f04f 0100 	mov.w	r1, #0
 8004218:	f04f 0200 	mov.w	r2, #0
 800421c:	02a2      	lsls	r2, r4, #10
 800421e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004222:	0299      	lsls	r1, r3, #10
 8004224:	460b      	mov	r3, r1
 8004226:	4614      	mov	r4, r2
 8004228:	4618      	mov	r0, r3
 800422a:	4621      	mov	r1, r4
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f04f 0400 	mov.w	r4, #0
 8004232:	461a      	mov	r2, r3
 8004234:	4623      	mov	r3, r4
 8004236:	f7fc f843 	bl	80002c0 <__aeabi_uldivmod>
 800423a:	4603      	mov	r3, r0
 800423c:	460c      	mov	r4, r1
 800423e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004240:	4b09      	ldr	r3, [pc, #36]	; (8004268 <HAL_RCC_GetSysClockFreq+0x334>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	0f1b      	lsrs	r3, r3, #28
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	fbb2 f3f3 	udiv	r3, r2, r3
 8004254:	613b      	str	r3, [r7, #16]
      break;
 8004256:	e002      	b.n	800425e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004258:	4b04      	ldr	r3, [pc, #16]	; (800426c <HAL_RCC_GetSysClockFreq+0x338>)
 800425a:	613b      	str	r3, [r7, #16]
      break;
 800425c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800425e:	693b      	ldr	r3, [r7, #16]
}
 8004260:	4618      	mov	r0, r3
 8004262:	371c      	adds	r7, #28
 8004264:	46bd      	mov	sp, r7
 8004266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004268:	40023800 	.word	0x40023800
 800426c:	00f42400 	.word	0x00f42400

08004270 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004278:	2300      	movs	r3, #0
 800427a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 8083 	beq.w	8004390 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800428a:	4b95      	ldr	r3, [pc, #596]	; (80044e0 <HAL_RCC_OscConfig+0x270>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 030c 	and.w	r3, r3, #12
 8004292:	2b04      	cmp	r3, #4
 8004294:	d019      	beq.n	80042ca <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004296:	4b92      	ldr	r3, [pc, #584]	; (80044e0 <HAL_RCC_OscConfig+0x270>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800429e:	2b08      	cmp	r3, #8
 80042a0:	d106      	bne.n	80042b0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80042a2:	4b8f      	ldr	r3, [pc, #572]	; (80044e0 <HAL_RCC_OscConfig+0x270>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042ae:	d00c      	beq.n	80042ca <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042b0:	4b8b      	ldr	r3, [pc, #556]	; (80044e0 <HAL_RCC_OscConfig+0x270>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80042b8:	2b0c      	cmp	r3, #12
 80042ba:	d112      	bne.n	80042e2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042bc:	4b88      	ldr	r3, [pc, #544]	; (80044e0 <HAL_RCC_OscConfig+0x270>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042c8:	d10b      	bne.n	80042e2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042ca:	4b85      	ldr	r3, [pc, #532]	; (80044e0 <HAL_RCC_OscConfig+0x270>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d05b      	beq.n	800438e <HAL_RCC_OscConfig+0x11e>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d157      	bne.n	800438e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e216      	b.n	8004710 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ea:	d106      	bne.n	80042fa <HAL_RCC_OscConfig+0x8a>
 80042ec:	4b7c      	ldr	r3, [pc, #496]	; (80044e0 <HAL_RCC_OscConfig+0x270>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a7b      	ldr	r2, [pc, #492]	; (80044e0 <HAL_RCC_OscConfig+0x270>)
 80042f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f6:	6013      	str	r3, [r2, #0]
 80042f8:	e01d      	b.n	8004336 <HAL_RCC_OscConfig+0xc6>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004302:	d10c      	bne.n	800431e <HAL_RCC_OscConfig+0xae>
 8004304:	4b76      	ldr	r3, [pc, #472]	; (80044e0 <HAL_RCC_OscConfig+0x270>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a75      	ldr	r2, [pc, #468]	; (80044e0 <HAL_RCC_OscConfig+0x270>)
 800430a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800430e:	6013      	str	r3, [r2, #0]
 8004310:	4b73      	ldr	r3, [pc, #460]	; (80044e0 <HAL_RCC_OscConfig+0x270>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a72      	ldr	r2, [pc, #456]	; (80044e0 <HAL_RCC_OscConfig+0x270>)
 8004316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800431a:	6013      	str	r3, [r2, #0]
 800431c:	e00b      	b.n	8004336 <HAL_RCC_OscConfig+0xc6>
 800431e:	4b70      	ldr	r3, [pc, #448]	; (80044e0 <HAL_RCC_OscConfig+0x270>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a6f      	ldr	r2, [pc, #444]	; (80044e0 <HAL_RCC_OscConfig+0x270>)
 8004324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004328:	6013      	str	r3, [r2, #0]
 800432a:	4b6d      	ldr	r3, [pc, #436]	; (80044e0 <HAL_RCC_OscConfig+0x270>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a6c      	ldr	r2, [pc, #432]	; (80044e0 <HAL_RCC_OscConfig+0x270>)
 8004330:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004334:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d013      	beq.n	8004366 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433e:	f7fc fd43 	bl	8000dc8 <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004344:	e008      	b.n	8004358 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004346:	f7fc fd3f 	bl	8000dc8 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b64      	cmp	r3, #100	; 0x64
 8004352:	d901      	bls.n	8004358 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e1db      	b.n	8004710 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004358:	4b61      	ldr	r3, [pc, #388]	; (80044e0 <HAL_RCC_OscConfig+0x270>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d0f0      	beq.n	8004346 <HAL_RCC_OscConfig+0xd6>
 8004364:	e014      	b.n	8004390 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004366:	f7fc fd2f 	bl	8000dc8 <HAL_GetTick>
 800436a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800436c:	e008      	b.n	8004380 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800436e:	f7fc fd2b 	bl	8000dc8 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b64      	cmp	r3, #100	; 0x64
 800437a:	d901      	bls.n	8004380 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e1c7      	b.n	8004710 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004380:	4b57      	ldr	r3, [pc, #348]	; (80044e0 <HAL_RCC_OscConfig+0x270>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1f0      	bne.n	800436e <HAL_RCC_OscConfig+0xfe>
 800438c:	e000      	b.n	8004390 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800438e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d06f      	beq.n	800447c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800439c:	4b50      	ldr	r3, [pc, #320]	; (80044e0 <HAL_RCC_OscConfig+0x270>)
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f003 030c 	and.w	r3, r3, #12
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d017      	beq.n	80043d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80043a8:	4b4d      	ldr	r3, [pc, #308]	; (80044e0 <HAL_RCC_OscConfig+0x270>)
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d105      	bne.n	80043c0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80043b4:	4b4a      	ldr	r3, [pc, #296]	; (80044e0 <HAL_RCC_OscConfig+0x270>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00b      	beq.n	80043d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043c0:	4b47      	ldr	r3, [pc, #284]	; (80044e0 <HAL_RCC_OscConfig+0x270>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80043c8:	2b0c      	cmp	r3, #12
 80043ca:	d11c      	bne.n	8004406 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043cc:	4b44      	ldr	r3, [pc, #272]	; (80044e0 <HAL_RCC_OscConfig+0x270>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d116      	bne.n	8004406 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043d8:	4b41      	ldr	r3, [pc, #260]	; (80044e0 <HAL_RCC_OscConfig+0x270>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d005      	beq.n	80043f0 <HAL_RCC_OscConfig+0x180>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d001      	beq.n	80043f0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e18f      	b.n	8004710 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043f0:	4b3b      	ldr	r3, [pc, #236]	; (80044e0 <HAL_RCC_OscConfig+0x270>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	00db      	lsls	r3, r3, #3
 80043fe:	4938      	ldr	r1, [pc, #224]	; (80044e0 <HAL_RCC_OscConfig+0x270>)
 8004400:	4313      	orrs	r3, r2
 8004402:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004404:	e03a      	b.n	800447c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d020      	beq.n	8004450 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800440e:	4b35      	ldr	r3, [pc, #212]	; (80044e4 <HAL_RCC_OscConfig+0x274>)
 8004410:	2201      	movs	r2, #1
 8004412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004414:	f7fc fcd8 	bl	8000dc8 <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800441c:	f7fc fcd4 	bl	8000dc8 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e170      	b.n	8004710 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800442e:	4b2c      	ldr	r3, [pc, #176]	; (80044e0 <HAL_RCC_OscConfig+0x270>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d0f0      	beq.n	800441c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800443a:	4b29      	ldr	r3, [pc, #164]	; (80044e0 <HAL_RCC_OscConfig+0x270>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	4925      	ldr	r1, [pc, #148]	; (80044e0 <HAL_RCC_OscConfig+0x270>)
 800444a:	4313      	orrs	r3, r2
 800444c:	600b      	str	r3, [r1, #0]
 800444e:	e015      	b.n	800447c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004450:	4b24      	ldr	r3, [pc, #144]	; (80044e4 <HAL_RCC_OscConfig+0x274>)
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004456:	f7fc fcb7 	bl	8000dc8 <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800445c:	e008      	b.n	8004470 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800445e:	f7fc fcb3 	bl	8000dc8 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e14f      	b.n	8004710 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004470:	4b1b      	ldr	r3, [pc, #108]	; (80044e0 <HAL_RCC_OscConfig+0x270>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1f0      	bne.n	800445e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0308 	and.w	r3, r3, #8
 8004484:	2b00      	cmp	r3, #0
 8004486:	d037      	beq.n	80044f8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d016      	beq.n	80044be <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004490:	4b15      	ldr	r3, [pc, #84]	; (80044e8 <HAL_RCC_OscConfig+0x278>)
 8004492:	2201      	movs	r2, #1
 8004494:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004496:	f7fc fc97 	bl	8000dc8 <HAL_GetTick>
 800449a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800449c:	e008      	b.n	80044b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800449e:	f7fc fc93 	bl	8000dc8 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e12f      	b.n	8004710 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044b0:	4b0b      	ldr	r3, [pc, #44]	; (80044e0 <HAL_RCC_OscConfig+0x270>)
 80044b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0f0      	beq.n	800449e <HAL_RCC_OscConfig+0x22e>
 80044bc:	e01c      	b.n	80044f8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044be:	4b0a      	ldr	r3, [pc, #40]	; (80044e8 <HAL_RCC_OscConfig+0x278>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c4:	f7fc fc80 	bl	8000dc8 <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044ca:	e00f      	b.n	80044ec <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044cc:	f7fc fc7c 	bl	8000dc8 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d908      	bls.n	80044ec <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e118      	b.n	8004710 <HAL_RCC_OscConfig+0x4a0>
 80044de:	bf00      	nop
 80044e0:	40023800 	.word	0x40023800
 80044e4:	42470000 	.word	0x42470000
 80044e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044ec:	4b8a      	ldr	r3, [pc, #552]	; (8004718 <HAL_RCC_OscConfig+0x4a8>)
 80044ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1e9      	bne.n	80044cc <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 8097 	beq.w	8004634 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004506:	2300      	movs	r3, #0
 8004508:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800450a:	4b83      	ldr	r3, [pc, #524]	; (8004718 <HAL_RCC_OscConfig+0x4a8>)
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10f      	bne.n	8004536 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004516:	2300      	movs	r3, #0
 8004518:	60fb      	str	r3, [r7, #12]
 800451a:	4b7f      	ldr	r3, [pc, #508]	; (8004718 <HAL_RCC_OscConfig+0x4a8>)
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	4a7e      	ldr	r2, [pc, #504]	; (8004718 <HAL_RCC_OscConfig+0x4a8>)
 8004520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004524:	6413      	str	r3, [r2, #64]	; 0x40
 8004526:	4b7c      	ldr	r3, [pc, #496]	; (8004718 <HAL_RCC_OscConfig+0x4a8>)
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800452e:	60fb      	str	r3, [r7, #12]
 8004530:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004532:	2301      	movs	r3, #1
 8004534:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004536:	4b79      	ldr	r3, [pc, #484]	; (800471c <HAL_RCC_OscConfig+0x4ac>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453e:	2b00      	cmp	r3, #0
 8004540:	d118      	bne.n	8004574 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004542:	4b76      	ldr	r3, [pc, #472]	; (800471c <HAL_RCC_OscConfig+0x4ac>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a75      	ldr	r2, [pc, #468]	; (800471c <HAL_RCC_OscConfig+0x4ac>)
 8004548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800454c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800454e:	f7fc fc3b 	bl	8000dc8 <HAL_GetTick>
 8004552:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004554:	e008      	b.n	8004568 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004556:	f7fc fc37 	bl	8000dc8 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d901      	bls.n	8004568 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e0d3      	b.n	8004710 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004568:	4b6c      	ldr	r3, [pc, #432]	; (800471c <HAL_RCC_OscConfig+0x4ac>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0f0      	beq.n	8004556 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d106      	bne.n	800458a <HAL_RCC_OscConfig+0x31a>
 800457c:	4b66      	ldr	r3, [pc, #408]	; (8004718 <HAL_RCC_OscConfig+0x4a8>)
 800457e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004580:	4a65      	ldr	r2, [pc, #404]	; (8004718 <HAL_RCC_OscConfig+0x4a8>)
 8004582:	f043 0301 	orr.w	r3, r3, #1
 8004586:	6713      	str	r3, [r2, #112]	; 0x70
 8004588:	e01c      	b.n	80045c4 <HAL_RCC_OscConfig+0x354>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	2b05      	cmp	r3, #5
 8004590:	d10c      	bne.n	80045ac <HAL_RCC_OscConfig+0x33c>
 8004592:	4b61      	ldr	r3, [pc, #388]	; (8004718 <HAL_RCC_OscConfig+0x4a8>)
 8004594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004596:	4a60      	ldr	r2, [pc, #384]	; (8004718 <HAL_RCC_OscConfig+0x4a8>)
 8004598:	f043 0304 	orr.w	r3, r3, #4
 800459c:	6713      	str	r3, [r2, #112]	; 0x70
 800459e:	4b5e      	ldr	r3, [pc, #376]	; (8004718 <HAL_RCC_OscConfig+0x4a8>)
 80045a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a2:	4a5d      	ldr	r2, [pc, #372]	; (8004718 <HAL_RCC_OscConfig+0x4a8>)
 80045a4:	f043 0301 	orr.w	r3, r3, #1
 80045a8:	6713      	str	r3, [r2, #112]	; 0x70
 80045aa:	e00b      	b.n	80045c4 <HAL_RCC_OscConfig+0x354>
 80045ac:	4b5a      	ldr	r3, [pc, #360]	; (8004718 <HAL_RCC_OscConfig+0x4a8>)
 80045ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b0:	4a59      	ldr	r2, [pc, #356]	; (8004718 <HAL_RCC_OscConfig+0x4a8>)
 80045b2:	f023 0301 	bic.w	r3, r3, #1
 80045b6:	6713      	str	r3, [r2, #112]	; 0x70
 80045b8:	4b57      	ldr	r3, [pc, #348]	; (8004718 <HAL_RCC_OscConfig+0x4a8>)
 80045ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045bc:	4a56      	ldr	r2, [pc, #344]	; (8004718 <HAL_RCC_OscConfig+0x4a8>)
 80045be:	f023 0304 	bic.w	r3, r3, #4
 80045c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d015      	beq.n	80045f8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045cc:	f7fc fbfc 	bl	8000dc8 <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d2:	e00a      	b.n	80045ea <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045d4:	f7fc fbf8 	bl	8000dc8 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e092      	b.n	8004710 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ea:	4b4b      	ldr	r3, [pc, #300]	; (8004718 <HAL_RCC_OscConfig+0x4a8>)
 80045ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d0ee      	beq.n	80045d4 <HAL_RCC_OscConfig+0x364>
 80045f6:	e014      	b.n	8004622 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f8:	f7fc fbe6 	bl	8000dc8 <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045fe:	e00a      	b.n	8004616 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004600:	f7fc fbe2 	bl	8000dc8 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	f241 3288 	movw	r2, #5000	; 0x1388
 800460e:	4293      	cmp	r3, r2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e07c      	b.n	8004710 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004616:	4b40      	ldr	r3, [pc, #256]	; (8004718 <HAL_RCC_OscConfig+0x4a8>)
 8004618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1ee      	bne.n	8004600 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004622:	7dfb      	ldrb	r3, [r7, #23]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d105      	bne.n	8004634 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004628:	4b3b      	ldr	r3, [pc, #236]	; (8004718 <HAL_RCC_OscConfig+0x4a8>)
 800462a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462c:	4a3a      	ldr	r2, [pc, #232]	; (8004718 <HAL_RCC_OscConfig+0x4a8>)
 800462e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004632:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d068      	beq.n	800470e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800463c:	4b36      	ldr	r3, [pc, #216]	; (8004718 <HAL_RCC_OscConfig+0x4a8>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f003 030c 	and.w	r3, r3, #12
 8004644:	2b08      	cmp	r3, #8
 8004646:	d060      	beq.n	800470a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	2b02      	cmp	r3, #2
 800464e:	d145      	bne.n	80046dc <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004650:	4b33      	ldr	r3, [pc, #204]	; (8004720 <HAL_RCC_OscConfig+0x4b0>)
 8004652:	2200      	movs	r2, #0
 8004654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004656:	f7fc fbb7 	bl	8000dc8 <HAL_GetTick>
 800465a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800465c:	e008      	b.n	8004670 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800465e:	f7fc fbb3 	bl	8000dc8 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e04f      	b.n	8004710 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004670:	4b29      	ldr	r3, [pc, #164]	; (8004718 <HAL_RCC_OscConfig+0x4a8>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1f0      	bne.n	800465e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	69da      	ldr	r2, [r3, #28]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	431a      	orrs	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	019b      	lsls	r3, r3, #6
 800468c:	431a      	orrs	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004692:	085b      	lsrs	r3, r3, #1
 8004694:	3b01      	subs	r3, #1
 8004696:	041b      	lsls	r3, r3, #16
 8004698:	431a      	orrs	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469e:	061b      	lsls	r3, r3, #24
 80046a0:	431a      	orrs	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a6:	071b      	lsls	r3, r3, #28
 80046a8:	491b      	ldr	r1, [pc, #108]	; (8004718 <HAL_RCC_OscConfig+0x4a8>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046ae:	4b1c      	ldr	r3, [pc, #112]	; (8004720 <HAL_RCC_OscConfig+0x4b0>)
 80046b0:	2201      	movs	r2, #1
 80046b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b4:	f7fc fb88 	bl	8000dc8 <HAL_GetTick>
 80046b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ba:	e008      	b.n	80046ce <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046bc:	f7fc fb84 	bl	8000dc8 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e020      	b.n	8004710 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ce:	4b12      	ldr	r3, [pc, #72]	; (8004718 <HAL_RCC_OscConfig+0x4a8>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d0f0      	beq.n	80046bc <HAL_RCC_OscConfig+0x44c>
 80046da:	e018      	b.n	800470e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046dc:	4b10      	ldr	r3, [pc, #64]	; (8004720 <HAL_RCC_OscConfig+0x4b0>)
 80046de:	2200      	movs	r2, #0
 80046e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e2:	f7fc fb71 	bl	8000dc8 <HAL_GetTick>
 80046e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046e8:	e008      	b.n	80046fc <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ea:	f7fc fb6d 	bl	8000dc8 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d901      	bls.n	80046fc <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e009      	b.n	8004710 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fc:	4b06      	ldr	r3, [pc, #24]	; (8004718 <HAL_RCC_OscConfig+0x4a8>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1f0      	bne.n	80046ea <HAL_RCC_OscConfig+0x47a>
 8004708:	e001      	b.n	800470e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e000      	b.n	8004710 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3718      	adds	r7, #24
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	40023800 	.word	0x40023800
 800471c:	40007000 	.word	0x40007000
 8004720:	42470060 	.word	0x42470060

08004724 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004724:	b084      	sub	sp, #16
 8004726:	b580      	push	{r7, lr}
 8004728:	b084      	sub	sp, #16
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
 800472e:	f107 001c 	add.w	r0, r7, #28
 8004732:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004738:	2b01      	cmp	r3, #1
 800473a:	d122      	bne.n	8004782 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004740:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004750:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004766:	2b01      	cmp	r3, #1
 8004768:	d105      	bne.n	8004776 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f001 fac0 	bl	8005cfc <USB_CoreReset>
 800477c:	4603      	mov	r3, r0
 800477e:	73fb      	strb	r3, [r7, #15]
 8004780:	e01a      	b.n	80047b8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f001 fab4 	bl	8005cfc <USB_CoreReset>
 8004794:	4603      	mov	r3, r0
 8004796:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800479a:	2b00      	cmp	r3, #0
 800479c:	d106      	bne.n	80047ac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	639a      	str	r2, [r3, #56]	; 0x38
 80047aa:	e005      	b.n	80047b8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80047b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d10b      	bne.n	80047d6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f043 0206 	orr.w	r2, r3, #6
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f043 0220 	orr.w	r2, r3, #32
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80047d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047e2:	b004      	add	sp, #16
 80047e4:	4770      	bx	lr
	...

080047e8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	4613      	mov	r3, r2
 80047f4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80047f6:	79fb      	ldrb	r3, [r7, #7]
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d165      	bne.n	80048c8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	4a41      	ldr	r2, [pc, #260]	; (8004904 <USB_SetTurnaroundTime+0x11c>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d906      	bls.n	8004812 <USB_SetTurnaroundTime+0x2a>
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	4a40      	ldr	r2, [pc, #256]	; (8004908 <USB_SetTurnaroundTime+0x120>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d802      	bhi.n	8004812 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800480c:	230f      	movs	r3, #15
 800480e:	617b      	str	r3, [r7, #20]
 8004810:	e062      	b.n	80048d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	4a3c      	ldr	r2, [pc, #240]	; (8004908 <USB_SetTurnaroundTime+0x120>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d906      	bls.n	8004828 <USB_SetTurnaroundTime+0x40>
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	4a3b      	ldr	r2, [pc, #236]	; (800490c <USB_SetTurnaroundTime+0x124>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d802      	bhi.n	8004828 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004822:	230e      	movs	r3, #14
 8004824:	617b      	str	r3, [r7, #20]
 8004826:	e057      	b.n	80048d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	4a38      	ldr	r2, [pc, #224]	; (800490c <USB_SetTurnaroundTime+0x124>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d906      	bls.n	800483e <USB_SetTurnaroundTime+0x56>
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	4a37      	ldr	r2, [pc, #220]	; (8004910 <USB_SetTurnaroundTime+0x128>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d802      	bhi.n	800483e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004838:	230d      	movs	r3, #13
 800483a:	617b      	str	r3, [r7, #20]
 800483c:	e04c      	b.n	80048d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	4a33      	ldr	r2, [pc, #204]	; (8004910 <USB_SetTurnaroundTime+0x128>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d906      	bls.n	8004854 <USB_SetTurnaroundTime+0x6c>
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	4a32      	ldr	r2, [pc, #200]	; (8004914 <USB_SetTurnaroundTime+0x12c>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d802      	bhi.n	8004854 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800484e:	230c      	movs	r3, #12
 8004850:	617b      	str	r3, [r7, #20]
 8004852:	e041      	b.n	80048d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	4a2f      	ldr	r2, [pc, #188]	; (8004914 <USB_SetTurnaroundTime+0x12c>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d906      	bls.n	800486a <USB_SetTurnaroundTime+0x82>
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	4a2e      	ldr	r2, [pc, #184]	; (8004918 <USB_SetTurnaroundTime+0x130>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d802      	bhi.n	800486a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004864:	230b      	movs	r3, #11
 8004866:	617b      	str	r3, [r7, #20]
 8004868:	e036      	b.n	80048d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	4a2a      	ldr	r2, [pc, #168]	; (8004918 <USB_SetTurnaroundTime+0x130>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d906      	bls.n	8004880 <USB_SetTurnaroundTime+0x98>
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	4a29      	ldr	r2, [pc, #164]	; (800491c <USB_SetTurnaroundTime+0x134>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d802      	bhi.n	8004880 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800487a:	230a      	movs	r3, #10
 800487c:	617b      	str	r3, [r7, #20]
 800487e:	e02b      	b.n	80048d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	4a26      	ldr	r2, [pc, #152]	; (800491c <USB_SetTurnaroundTime+0x134>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d906      	bls.n	8004896 <USB_SetTurnaroundTime+0xae>
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	4a25      	ldr	r2, [pc, #148]	; (8004920 <USB_SetTurnaroundTime+0x138>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d802      	bhi.n	8004896 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004890:	2309      	movs	r3, #9
 8004892:	617b      	str	r3, [r7, #20]
 8004894:	e020      	b.n	80048d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	4a21      	ldr	r2, [pc, #132]	; (8004920 <USB_SetTurnaroundTime+0x138>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d906      	bls.n	80048ac <USB_SetTurnaroundTime+0xc4>
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	4a20      	ldr	r2, [pc, #128]	; (8004924 <USB_SetTurnaroundTime+0x13c>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d802      	bhi.n	80048ac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80048a6:	2308      	movs	r3, #8
 80048a8:	617b      	str	r3, [r7, #20]
 80048aa:	e015      	b.n	80048d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	4a1d      	ldr	r2, [pc, #116]	; (8004924 <USB_SetTurnaroundTime+0x13c>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d906      	bls.n	80048c2 <USB_SetTurnaroundTime+0xda>
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	4a1c      	ldr	r2, [pc, #112]	; (8004928 <USB_SetTurnaroundTime+0x140>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d802      	bhi.n	80048c2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80048bc:	2307      	movs	r3, #7
 80048be:	617b      	str	r3, [r7, #20]
 80048c0:	e00a      	b.n	80048d8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80048c2:	2306      	movs	r3, #6
 80048c4:	617b      	str	r3, [r7, #20]
 80048c6:	e007      	b.n	80048d8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80048c8:	79fb      	ldrb	r3, [r7, #7]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d102      	bne.n	80048d4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80048ce:	2309      	movs	r3, #9
 80048d0:	617b      	str	r3, [r7, #20]
 80048d2:	e001      	b.n	80048d8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80048d4:	2309      	movs	r3, #9
 80048d6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	68da      	ldr	r2, [r3, #12]
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	029b      	lsls	r3, r3, #10
 80048ec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80048f0:	431a      	orrs	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	371c      	adds	r7, #28
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr
 8004904:	00d8acbf 	.word	0x00d8acbf
 8004908:	00e4e1bf 	.word	0x00e4e1bf
 800490c:	00f423ff 	.word	0x00f423ff
 8004910:	0106737f 	.word	0x0106737f
 8004914:	011a499f 	.word	0x011a499f
 8004918:	01312cff 	.word	0x01312cff
 800491c:	014ca43f 	.word	0x014ca43f
 8004920:	016e35ff 	.word	0x016e35ff
 8004924:	01a6ab1f 	.word	0x01a6ab1f
 8004928:	01e847ff 	.word	0x01e847ff

0800492c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f043 0201 	orr.w	r2, r3, #1
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800494e:	b480      	push	{r7}
 8004950:	b083      	sub	sp, #12
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f023 0201 	bic.w	r2, r3, #1
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	460b      	mov	r3, r1
 800497a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004988:	78fb      	ldrb	r3, [r7, #3]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d106      	bne.n	800499c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	60da      	str	r2, [r3, #12]
 800499a:	e00b      	b.n	80049b4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800499c:	78fb      	ldrb	r3, [r7, #3]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d106      	bne.n	80049b0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	60da      	str	r2, [r3, #12]
 80049ae:	e001      	b.n	80049b4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e003      	b.n	80049bc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80049b4:	2032      	movs	r0, #50	; 0x32
 80049b6:	f7fc fa13 	bl	8000de0 <HAL_Delay>

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049c4:	b084      	sub	sp, #16
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b086      	sub	sp, #24
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
 80049ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80049d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80049d6:	2300      	movs	r3, #0
 80049d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80049de:	2300      	movs	r3, #0
 80049e0:	613b      	str	r3, [r7, #16]
 80049e2:	e009      	b.n	80049f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	3340      	adds	r3, #64	; 0x40
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	4413      	add	r3, r2
 80049ee:	2200      	movs	r2, #0
 80049f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	3301      	adds	r3, #1
 80049f6:	613b      	str	r3, [r7, #16]
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	2b0e      	cmp	r3, #14
 80049fc:	d9f2      	bls.n	80049e4 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80049fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d11c      	bne.n	8004a3e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a12:	f043 0302 	orr.w	r3, r3, #2
 8004a16:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	e005      	b.n	8004a4a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a42:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a50:	461a      	mov	r2, r3
 8004a52:	2300      	movs	r3, #0
 8004a54:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a64:	461a      	mov	r2, r3
 8004a66:	680b      	ldr	r3, [r1, #0]
 8004a68:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d10c      	bne.n	8004a8a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d104      	bne.n	8004a80 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a76:	2100      	movs	r1, #0
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f949 	bl	8004d10 <USB_SetDevSpeed>
 8004a7e:	e008      	b.n	8004a92 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a80:	2101      	movs	r1, #1
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f944 	bl	8004d10 <USB_SetDevSpeed>
 8004a88:	e003      	b.n	8004a92 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a8a:	2103      	movs	r1, #3
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 f93f 	bl	8004d10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a92:	2110      	movs	r1, #16
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f8f3 	bl	8004c80 <USB_FlushTxFifo>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d001      	beq.n	8004aa4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 f911 	bl	8004ccc <USB_FlushRxFifo>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aba:	461a      	mov	r2, r3
 8004abc:	2300      	movs	r3, #0
 8004abe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	2300      	movs	r3, #0
 8004aca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ad8:	2300      	movs	r3, #0
 8004ada:	613b      	str	r3, [r7, #16]
 8004adc:	e043      	b.n	8004b66 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	015a      	lsls	r2, r3, #5
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004af0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004af4:	d118      	bne.n	8004b28 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10a      	bne.n	8004b12 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b08:	461a      	mov	r2, r3
 8004b0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b0e:	6013      	str	r3, [r2, #0]
 8004b10:	e013      	b.n	8004b3a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	015a      	lsls	r2, r3, #5
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	4413      	add	r3, r2
 8004b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b1e:	461a      	mov	r2, r3
 8004b20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b24:	6013      	str	r3, [r2, #0]
 8004b26:	e008      	b.n	8004b3a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	015a      	lsls	r2, r3, #5
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	4413      	add	r3, r2
 8004b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b34:	461a      	mov	r2, r3
 8004b36:	2300      	movs	r3, #0
 8004b38:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	015a      	lsls	r2, r3, #5
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	4413      	add	r3, r2
 8004b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b46:	461a      	mov	r2, r3
 8004b48:	2300      	movs	r3, #0
 8004b4a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	015a      	lsls	r2, r3, #5
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	4413      	add	r3, r2
 8004b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b58:	461a      	mov	r2, r3
 8004b5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	3301      	adds	r3, #1
 8004b64:	613b      	str	r3, [r7, #16]
 8004b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d3b7      	bcc.n	8004ade <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b6e:	2300      	movs	r3, #0
 8004b70:	613b      	str	r3, [r7, #16]
 8004b72:	e043      	b.n	8004bfc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b8a:	d118      	bne.n	8004bbe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10a      	bne.n	8004ba8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	015a      	lsls	r2, r3, #5
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	4413      	add	r3, r2
 8004b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ba4:	6013      	str	r3, [r2, #0]
 8004ba6:	e013      	b.n	8004bd0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	015a      	lsls	r2, r3, #5
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	4413      	add	r3, r2
 8004bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004bba:	6013      	str	r3, [r2, #0]
 8004bbc:	e008      	b.n	8004bd0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	015a      	lsls	r2, r3, #5
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bca:	461a      	mov	r2, r3
 8004bcc:	2300      	movs	r3, #0
 8004bce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bdc:	461a      	mov	r2, r3
 8004bde:	2300      	movs	r3, #0
 8004be0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	015a      	lsls	r2, r3, #5
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	4413      	add	r3, r2
 8004bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bee:	461a      	mov	r2, r3
 8004bf0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bf4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	613b      	str	r3, [r7, #16]
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d3b7      	bcc.n	8004b74 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c16:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004c24:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d105      	bne.n	8004c38 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	f043 0210 	orr.w	r2, r3, #16
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	699a      	ldr	r2, [r3, #24]
 8004c3c:	4b0f      	ldr	r3, [pc, #60]	; (8004c7c <USB_DevInit+0x2b8>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d005      	beq.n	8004c56 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	f043 0208 	orr.w	r2, r3, #8
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d107      	bne.n	8004c6c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c64:	f043 0304 	orr.w	r3, r3, #4
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3718      	adds	r7, #24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c78:	b004      	add	sp, #16
 8004c7a:	4770      	bx	lr
 8004c7c:	803c3800 	.word	0x803c3800

08004c80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	019b      	lsls	r3, r3, #6
 8004c92:	f043 0220 	orr.w	r2, r3, #32
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	60fb      	str	r3, [r7, #12]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	4a09      	ldr	r2, [pc, #36]	; (8004cc8 <USB_FlushTxFifo+0x48>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d901      	bls.n	8004cac <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e006      	b.n	8004cba <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	f003 0320 	and.w	r3, r3, #32
 8004cb4:	2b20      	cmp	r3, #32
 8004cb6:	d0f0      	beq.n	8004c9a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	00030d40 	.word	0x00030d40

08004ccc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2210      	movs	r2, #16
 8004cdc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	60fb      	str	r3, [r7, #12]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	4a09      	ldr	r2, [pc, #36]	; (8004d0c <USB_FlushRxFifo+0x40>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d901      	bls.n	8004cf0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e006      	b.n	8004cfe <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	f003 0310 	and.w	r3, r3, #16
 8004cf8:	2b10      	cmp	r3, #16
 8004cfa:	d0f0      	beq.n	8004cde <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	00030d40 	.word	0x00030d40

08004d10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	460b      	mov	r3, r1
 8004d1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	78fb      	ldrb	r3, [r7, #3]
 8004d2a:	68f9      	ldr	r1, [r7, #12]
 8004d2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d30:	4313      	orrs	r3, r2
 8004d32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b087      	sub	sp, #28
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 0306 	and.w	r3, r3, #6
 8004d5a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d102      	bne.n	8004d68 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004d62:	2300      	movs	r3, #0
 8004d64:	75fb      	strb	r3, [r7, #23]
 8004d66:	e00a      	b.n	8004d7e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d002      	beq.n	8004d74 <USB_GetDevSpeed+0x32>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2b06      	cmp	r3, #6
 8004d72:	d102      	bne.n	8004d7a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004d74:	2302      	movs	r3, #2
 8004d76:	75fb      	strb	r3, [r7, #23]
 8004d78:	e001      	b.n	8004d7e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004d7a:	230f      	movs	r3, #15
 8004d7c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	371c      	adds	r7, #28
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	785b      	ldrb	r3, [r3, #1]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d13a      	bne.n	8004e1e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dae:	69da      	ldr	r2, [r3, #28]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	f003 030f 	and.w	r3, r3, #15
 8004db8:	2101      	movs	r1, #1
 8004dba:	fa01 f303 	lsl.w	r3, r1, r3
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	68f9      	ldr	r1, [r7, #12]
 8004dc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d155      	bne.n	8004e8c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	78db      	ldrb	r3, [r3, #3]
 8004dfa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004dfc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	059b      	lsls	r3, r3, #22
 8004e02:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e04:	4313      	orrs	r3, r2
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	0151      	lsls	r1, r2, #5
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	440a      	add	r2, r1
 8004e0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e1a:	6013      	str	r3, [r2, #0]
 8004e1c:	e036      	b.n	8004e8c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e24:	69da      	ldr	r2, [r3, #28]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	f003 030f 	and.w	r3, r3, #15
 8004e2e:	2101      	movs	r1, #1
 8004e30:	fa01 f303 	lsl.w	r3, r1, r3
 8004e34:	041b      	lsls	r3, r3, #16
 8004e36:	68f9      	ldr	r1, [r7, #12]
 8004e38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d11a      	bne.n	8004e8c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	78db      	ldrb	r3, [r3, #3]
 8004e70:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004e72:	430b      	orrs	r3, r1
 8004e74:	4313      	orrs	r3, r2
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	0151      	lsls	r1, r2, #5
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	440a      	add	r2, r1
 8004e7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e8a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
	...

08004e9c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	785b      	ldrb	r3, [r3, #1]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d161      	bne.n	8004f7c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	015a      	lsls	r2, r3, #5
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004eca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ece:	d11f      	bne.n	8004f10 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	0151      	lsls	r1, r2, #5
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	440a      	add	r2, r1
 8004ee6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004eee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	0151      	lsls	r1, r2, #5
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	440a      	add	r2, r1
 8004f06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	f003 030f 	and.w	r3, r3, #15
 8004f20:	2101      	movs	r1, #1
 8004f22:	fa01 f303 	lsl.w	r3, r1, r3
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	43db      	mvns	r3, r3
 8004f2a:	68f9      	ldr	r1, [r7, #12]
 8004f2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f30:	4013      	ands	r3, r2
 8004f32:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f3a:	69da      	ldr	r2, [r3, #28]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	f003 030f 	and.w	r3, r3, #15
 8004f44:	2101      	movs	r1, #1
 8004f46:	fa01 f303 	lsl.w	r3, r1, r3
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	43db      	mvns	r3, r3
 8004f4e:	68f9      	ldr	r1, [r7, #12]
 8004f50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f54:	4013      	ands	r3, r2
 8004f56:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	015a      	lsls	r2, r3, #5
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	0159      	lsls	r1, r3, #5
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	440b      	add	r3, r1
 8004f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f72:	4619      	mov	r1, r3
 8004f74:	4b35      	ldr	r3, [pc, #212]	; (800504c <USB_DeactivateEndpoint+0x1b0>)
 8004f76:	4013      	ands	r3, r2
 8004f78:	600b      	str	r3, [r1, #0]
 8004f7a:	e060      	b.n	800503e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f92:	d11f      	bne.n	8004fd4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	015a      	lsls	r2, r3, #5
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	0151      	lsls	r1, r2, #5
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	440a      	add	r2, r1
 8004faa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004fb2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	015a      	lsls	r2, r3, #5
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	0151      	lsls	r1, r2, #5
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	440a      	add	r2, r1
 8004fca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fd2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	f003 030f 	and.w	r3, r3, #15
 8004fe4:	2101      	movs	r1, #1
 8004fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fea:	041b      	lsls	r3, r3, #16
 8004fec:	43db      	mvns	r3, r3
 8004fee:	68f9      	ldr	r1, [r7, #12]
 8004ff0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ffe:	69da      	ldr	r2, [r3, #28]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	f003 030f 	and.w	r3, r3, #15
 8005008:	2101      	movs	r1, #1
 800500a:	fa01 f303 	lsl.w	r3, r1, r3
 800500e:	041b      	lsls	r3, r3, #16
 8005010:	43db      	mvns	r3, r3
 8005012:	68f9      	ldr	r1, [r7, #12]
 8005014:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005018:	4013      	ands	r3, r2
 800501a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	015a      	lsls	r2, r3, #5
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4413      	add	r3, r2
 8005024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	0159      	lsls	r1, r3, #5
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	440b      	add	r3, r1
 8005032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005036:	4619      	mov	r1, r3
 8005038:	4b05      	ldr	r3, [pc, #20]	; (8005050 <USB_DeactivateEndpoint+0x1b4>)
 800503a:	4013      	ands	r3, r2
 800503c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	ec337800 	.word	0xec337800
 8005050:	eff37800 	.word	0xeff37800

08005054 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b08a      	sub	sp, #40	; 0x28
 8005058:	af02      	add	r7, sp, #8
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	4613      	mov	r3, r2
 8005060:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	785b      	ldrb	r3, [r3, #1]
 8005070:	2b01      	cmp	r3, #1
 8005072:	f040 815c 	bne.w	800532e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d132      	bne.n	80050e4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	015a      	lsls	r2, r3, #5
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	4413      	add	r3, r2
 8005086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	69ba      	ldr	r2, [r7, #24]
 800508e:	0151      	lsls	r1, r2, #5
 8005090:	69fa      	ldr	r2, [r7, #28]
 8005092:	440a      	add	r2, r1
 8005094:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005098:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800509c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	015a      	lsls	r2, r3, #5
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	4413      	add	r3, r2
 80050aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	0151      	lsls	r1, r2, #5
 80050b4:	69fa      	ldr	r2, [r7, #28]
 80050b6:	440a      	add	r2, r1
 80050b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	015a      	lsls	r2, r3, #5
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	4413      	add	r3, r2
 80050ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	0151      	lsls	r1, r2, #5
 80050d4:	69fa      	ldr	r2, [r7, #28]
 80050d6:	440a      	add	r2, r1
 80050d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050dc:	0cdb      	lsrs	r3, r3, #19
 80050de:	04db      	lsls	r3, r3, #19
 80050e0:	6113      	str	r3, [r2, #16]
 80050e2:	e074      	b.n	80051ce <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	0151      	lsls	r1, r2, #5
 80050f6:	69fa      	ldr	r2, [r7, #28]
 80050f8:	440a      	add	r2, r1
 80050fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050fe:	0cdb      	lsrs	r3, r3, #19
 8005100:	04db      	lsls	r3, r3, #19
 8005102:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	4413      	add	r3, r2
 800510c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	0151      	lsls	r1, r2, #5
 8005116:	69fa      	ldr	r2, [r7, #28]
 8005118:	440a      	add	r2, r1
 800511a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800511e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005122:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005126:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	015a      	lsls	r2, r3, #5
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	4413      	add	r3, r2
 8005130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005134:	691a      	ldr	r2, [r3, #16]
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	6959      	ldr	r1, [r3, #20]
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	440b      	add	r3, r1
 8005140:	1e59      	subs	r1, r3, #1
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	fbb1 f3f3 	udiv	r3, r1, r3
 800514a:	04d9      	lsls	r1, r3, #19
 800514c:	4b9d      	ldr	r3, [pc, #628]	; (80053c4 <USB_EPStartXfer+0x370>)
 800514e:	400b      	ands	r3, r1
 8005150:	69b9      	ldr	r1, [r7, #24]
 8005152:	0148      	lsls	r0, r1, #5
 8005154:	69f9      	ldr	r1, [r7, #28]
 8005156:	4401      	add	r1, r0
 8005158:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800515c:	4313      	orrs	r3, r2
 800515e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	015a      	lsls	r2, r3, #5
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	4413      	add	r3, r2
 8005168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800516c:	691a      	ldr	r2, [r3, #16]
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005176:	69b9      	ldr	r1, [r7, #24]
 8005178:	0148      	lsls	r0, r1, #5
 800517a:	69f9      	ldr	r1, [r7, #28]
 800517c:	4401      	add	r1, r0
 800517e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005182:	4313      	orrs	r3, r2
 8005184:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	78db      	ldrb	r3, [r3, #3]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d11f      	bne.n	80051ce <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	4413      	add	r3, r2
 8005196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	0151      	lsls	r1, r2, #5
 80051a0:	69fa      	ldr	r2, [r7, #28]
 80051a2:	440a      	add	r2, r1
 80051a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051a8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80051ac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	015a      	lsls	r2, r3, #5
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	4413      	add	r3, r2
 80051b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	0151      	lsls	r1, r2, #5
 80051c0:	69fa      	ldr	r2, [r7, #28]
 80051c2:	440a      	add	r2, r1
 80051c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051cc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80051ce:	79fb      	ldrb	r3, [r7, #7]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d14b      	bne.n	800526c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d009      	beq.n	80051f0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e8:	461a      	mov	r2, r3
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	78db      	ldrb	r3, [r3, #3]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d128      	bne.n	800524a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005204:	2b00      	cmp	r3, #0
 8005206:	d110      	bne.n	800522a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	0151      	lsls	r1, r2, #5
 800521a:	69fa      	ldr	r2, [r7, #28]
 800521c:	440a      	add	r2, r1
 800521e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005222:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005226:	6013      	str	r3, [r2, #0]
 8005228:	e00f      	b.n	800524a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	015a      	lsls	r2, r3, #5
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	4413      	add	r3, r2
 8005232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	0151      	lsls	r1, r2, #5
 800523c:	69fa      	ldr	r2, [r7, #28]
 800523e:	440a      	add	r2, r1
 8005240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005248:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	015a      	lsls	r2, r3, #5
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	4413      	add	r3, r2
 8005252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	0151      	lsls	r1, r2, #5
 800525c:	69fa      	ldr	r2, [r7, #28]
 800525e:	440a      	add	r2, r1
 8005260:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005264:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005268:	6013      	str	r3, [r2, #0]
 800526a:	e12f      	b.n	80054cc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	015a      	lsls	r2, r3, #5
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	4413      	add	r3, r2
 8005274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	0151      	lsls	r1, r2, #5
 800527e:	69fa      	ldr	r2, [r7, #28]
 8005280:	440a      	add	r2, r1
 8005282:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005286:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800528a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	78db      	ldrb	r3, [r3, #3]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d015      	beq.n	80052c0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	2b00      	cmp	r3, #0
 800529a:	f000 8117 	beq.w	80054cc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	f003 030f 	and.w	r3, r3, #15
 80052ae:	2101      	movs	r1, #1
 80052b0:	fa01 f303 	lsl.w	r3, r1, r3
 80052b4:	69f9      	ldr	r1, [r7, #28]
 80052b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052ba:	4313      	orrs	r3, r2
 80052bc:	634b      	str	r3, [r1, #52]	; 0x34
 80052be:	e105      	b.n	80054cc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d110      	bne.n	80052f2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69ba      	ldr	r2, [r7, #24]
 80052e0:	0151      	lsls	r1, r2, #5
 80052e2:	69fa      	ldr	r2, [r7, #28]
 80052e4:	440a      	add	r2, r1
 80052e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052ee:	6013      	str	r3, [r2, #0]
 80052f0:	e00f      	b.n	8005312 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	69ba      	ldr	r2, [r7, #24]
 8005302:	0151      	lsls	r1, r2, #5
 8005304:	69fa      	ldr	r2, [r7, #28]
 8005306:	440a      	add	r2, r1
 8005308:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800530c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005310:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	68d9      	ldr	r1, [r3, #12]
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	781a      	ldrb	r2, [r3, #0]
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	b298      	uxth	r0, r3
 8005320:	79fb      	ldrb	r3, [r7, #7]
 8005322:	9300      	str	r3, [sp, #0]
 8005324:	4603      	mov	r3, r0
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f000 fa2b 	bl	8005782 <USB_WritePacket>
 800532c:	e0ce      	b.n	80054cc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	015a      	lsls	r2, r3, #5
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	4413      	add	r3, r2
 8005336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	0151      	lsls	r1, r2, #5
 8005340:	69fa      	ldr	r2, [r7, #28]
 8005342:	440a      	add	r2, r1
 8005344:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005348:	0cdb      	lsrs	r3, r3, #19
 800534a:	04db      	lsls	r3, r3, #19
 800534c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	4413      	add	r3, r2
 8005356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	69ba      	ldr	r2, [r7, #24]
 800535e:	0151      	lsls	r1, r2, #5
 8005360:	69fa      	ldr	r2, [r7, #28]
 8005362:	440a      	add	r2, r1
 8005364:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005368:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800536c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005370:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d126      	bne.n	80053c8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	4413      	add	r3, r2
 8005382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005386:	691a      	ldr	r2, [r3, #16]
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005390:	69b9      	ldr	r1, [r7, #24]
 8005392:	0148      	lsls	r0, r1, #5
 8005394:	69f9      	ldr	r1, [r7, #28]
 8005396:	4401      	add	r1, r0
 8005398:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800539c:	4313      	orrs	r3, r2
 800539e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	69ba      	ldr	r2, [r7, #24]
 80053b0:	0151      	lsls	r1, r2, #5
 80053b2:	69fa      	ldr	r2, [r7, #28]
 80053b4:	440a      	add	r2, r1
 80053b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053be:	6113      	str	r3, [r2, #16]
 80053c0:	e036      	b.n	8005430 <USB_EPStartXfer+0x3dc>
 80053c2:	bf00      	nop
 80053c4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	695a      	ldr	r2, [r3, #20]
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	4413      	add	r3, r2
 80053d2:	1e5a      	subs	r2, r3, #1
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053dc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ea:	691a      	ldr	r2, [r3, #16]
 80053ec:	8afb      	ldrh	r3, [r7, #22]
 80053ee:	04d9      	lsls	r1, r3, #19
 80053f0:	4b39      	ldr	r3, [pc, #228]	; (80054d8 <USB_EPStartXfer+0x484>)
 80053f2:	400b      	ands	r3, r1
 80053f4:	69b9      	ldr	r1, [r7, #24]
 80053f6:	0148      	lsls	r0, r1, #5
 80053f8:	69f9      	ldr	r1, [r7, #28]
 80053fa:	4401      	add	r1, r0
 80053fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005400:	4313      	orrs	r3, r2
 8005402:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	015a      	lsls	r2, r3, #5
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	4413      	add	r3, r2
 800540c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005410:	691a      	ldr	r2, [r3, #16]
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	8af9      	ldrh	r1, [r7, #22]
 8005418:	fb01 f303 	mul.w	r3, r1, r3
 800541c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005420:	69b9      	ldr	r1, [r7, #24]
 8005422:	0148      	lsls	r0, r1, #5
 8005424:	69f9      	ldr	r1, [r7, #28]
 8005426:	4401      	add	r1, r0
 8005428:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800542c:	4313      	orrs	r3, r2
 800542e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005430:	79fb      	ldrb	r3, [r7, #7]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d10d      	bne.n	8005452 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d009      	beq.n	8005452 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	68d9      	ldr	r1, [r3, #12]
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	015a      	lsls	r2, r3, #5
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	4413      	add	r3, r2
 800544a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800544e:	460a      	mov	r2, r1
 8005450:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	78db      	ldrb	r3, [r3, #3]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d128      	bne.n	80054ac <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005466:	2b00      	cmp	r3, #0
 8005468:	d110      	bne.n	800548c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	015a      	lsls	r2, r3, #5
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	4413      	add	r3, r2
 8005472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	0151      	lsls	r1, r2, #5
 800547c:	69fa      	ldr	r2, [r7, #28]
 800547e:	440a      	add	r2, r1
 8005480:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005484:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005488:	6013      	str	r3, [r2, #0]
 800548a:	e00f      	b.n	80054ac <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	015a      	lsls	r2, r3, #5
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	4413      	add	r3, r2
 8005494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	69ba      	ldr	r2, [r7, #24]
 800549c:	0151      	lsls	r1, r2, #5
 800549e:	69fa      	ldr	r2, [r7, #28]
 80054a0:	440a      	add	r2, r1
 80054a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054aa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	015a      	lsls	r2, r3, #5
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	4413      	add	r3, r2
 80054b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	69ba      	ldr	r2, [r7, #24]
 80054bc:	0151      	lsls	r1, r2, #5
 80054be:	69fa      	ldr	r2, [r7, #28]
 80054c0:	440a      	add	r2, r1
 80054c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3720      	adds	r7, #32
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	1ff80000 	.word	0x1ff80000

080054dc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80054dc:	b480      	push	{r7}
 80054de:	b087      	sub	sp, #28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	4613      	mov	r3, r2
 80054e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	785b      	ldrb	r3, [r3, #1]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	f040 80cd 	bne.w	8005698 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d132      	bne.n	800556c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	015a      	lsls	r2, r3, #5
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	4413      	add	r3, r2
 800550e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	0151      	lsls	r1, r2, #5
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	440a      	add	r2, r1
 800551c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005520:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005524:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005528:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	4413      	add	r3, r2
 8005532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	0151      	lsls	r1, r2, #5
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	440a      	add	r2, r1
 8005540:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005544:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005548:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	015a      	lsls	r2, r3, #5
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	4413      	add	r3, r2
 8005552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	0151      	lsls	r1, r2, #5
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	440a      	add	r2, r1
 8005560:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005564:	0cdb      	lsrs	r3, r3, #19
 8005566:	04db      	lsls	r3, r3, #19
 8005568:	6113      	str	r3, [r2, #16]
 800556a:	e04e      	b.n	800560a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	015a      	lsls	r2, r3, #5
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	4413      	add	r3, r2
 8005574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	0151      	lsls	r1, r2, #5
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	440a      	add	r2, r1
 8005582:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005586:	0cdb      	lsrs	r3, r3, #19
 8005588:	04db      	lsls	r3, r3, #19
 800558a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	4413      	add	r3, r2
 8005594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	0151      	lsls	r1, r2, #5
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	440a      	add	r2, r1
 80055a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055ae:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	695a      	ldr	r2, [r3, #20]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d903      	bls.n	80055c4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	689a      	ldr	r2, [r3, #8]
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	0151      	lsls	r1, r2, #5
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	440a      	add	r2, r1
 80055da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f0:	691a      	ldr	r2, [r3, #16]
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055fa:	6939      	ldr	r1, [r7, #16]
 80055fc:	0148      	lsls	r0, r1, #5
 80055fe:	6979      	ldr	r1, [r7, #20]
 8005600:	4401      	add	r1, r0
 8005602:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005606:	4313      	orrs	r3, r2
 8005608:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800560a:	79fb      	ldrb	r3, [r7, #7]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d11e      	bne.n	800564e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d009      	beq.n	800562c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	4413      	add	r3, r2
 8005620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005624:	461a      	mov	r2, r3
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	015a      	lsls	r2, r3, #5
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	4413      	add	r3, r2
 8005634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	0151      	lsls	r1, r2, #5
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	440a      	add	r2, r1
 8005642:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005646:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800564a:	6013      	str	r3, [r2, #0]
 800564c:	e092      	b.n	8005774 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	015a      	lsls	r2, r3, #5
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	4413      	add	r3, r2
 8005656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	0151      	lsls	r1, r2, #5
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	440a      	add	r2, r1
 8005664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005668:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800566c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d07e      	beq.n	8005774 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800567c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	f003 030f 	and.w	r3, r3, #15
 8005686:	2101      	movs	r1, #1
 8005688:	fa01 f303 	lsl.w	r3, r1, r3
 800568c:	6979      	ldr	r1, [r7, #20]
 800568e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005692:	4313      	orrs	r3, r2
 8005694:	634b      	str	r3, [r1, #52]	; 0x34
 8005696:	e06d      	b.n	8005774 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	0151      	lsls	r1, r2, #5
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	440a      	add	r2, r1
 80056ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056b2:	0cdb      	lsrs	r3, r3, #19
 80056b4:	04db      	lsls	r3, r3, #19
 80056b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	015a      	lsls	r2, r3, #5
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	4413      	add	r3, r2
 80056c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	0151      	lsls	r1, r2, #5
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	440a      	add	r2, r1
 80056ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056da:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d003      	beq.n	80056ec <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	689a      	ldr	r2, [r3, #8]
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	0151      	lsls	r1, r2, #5
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	440a      	add	r2, r1
 8005702:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005706:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800570a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	4413      	add	r3, r2
 8005714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005718:	691a      	ldr	r2, [r3, #16]
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005722:	6939      	ldr	r1, [r7, #16]
 8005724:	0148      	lsls	r0, r1, #5
 8005726:	6979      	ldr	r1, [r7, #20]
 8005728:	4401      	add	r1, r0
 800572a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800572e:	4313      	orrs	r3, r2
 8005730:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005732:	79fb      	ldrb	r3, [r7, #7]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d10d      	bne.n	8005754 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d009      	beq.n	8005754 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	68d9      	ldr	r1, [r3, #12]
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	4413      	add	r3, r2
 800574c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005750:	460a      	mov	r2, r1
 8005752:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	015a      	lsls	r2, r3, #5
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	4413      	add	r3, r2
 800575c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	0151      	lsls	r1, r2, #5
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	440a      	add	r2, r1
 800576a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800576e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005772:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	371c      	adds	r7, #28
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005782:	b480      	push	{r7}
 8005784:	b089      	sub	sp, #36	; 0x24
 8005786:	af00      	add	r7, sp, #0
 8005788:	60f8      	str	r0, [r7, #12]
 800578a:	60b9      	str	r1, [r7, #8]
 800578c:	4611      	mov	r1, r2
 800578e:	461a      	mov	r2, r3
 8005790:	460b      	mov	r3, r1
 8005792:	71fb      	strb	r3, [r7, #7]
 8005794:	4613      	mov	r3, r2
 8005796:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80057a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d11a      	bne.n	80057de <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80057a8:	88bb      	ldrh	r3, [r7, #4]
 80057aa:	3303      	adds	r3, #3
 80057ac:	089b      	lsrs	r3, r3, #2
 80057ae:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80057b0:	2300      	movs	r3, #0
 80057b2:	61bb      	str	r3, [r7, #24]
 80057b4:	e00f      	b.n	80057d6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80057b6:	79fb      	ldrb	r3, [r7, #7]
 80057b8:	031a      	lsls	r2, r3, #12
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	4413      	add	r3, r2
 80057be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057c2:	461a      	mov	r2, r3
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6013      	str	r3, [r2, #0]
      pSrc++;
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	3304      	adds	r3, #4
 80057ce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	3301      	adds	r3, #1
 80057d4:	61bb      	str	r3, [r7, #24]
 80057d6:	69ba      	ldr	r2, [r7, #24]
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d3eb      	bcc.n	80057b6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3724      	adds	r7, #36	; 0x24
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b089      	sub	sp, #36	; 0x24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	4613      	mov	r3, r2
 80057f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005802:	88fb      	ldrh	r3, [r7, #6]
 8005804:	3303      	adds	r3, #3
 8005806:	089b      	lsrs	r3, r3, #2
 8005808:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800580a:	2300      	movs	r3, #0
 800580c:	61bb      	str	r3, [r7, #24]
 800580e:	e00b      	b.n	8005828 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	601a      	str	r2, [r3, #0]
    pDest++;
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	3304      	adds	r3, #4
 8005820:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	3301      	adds	r3, #1
 8005826:	61bb      	str	r3, [r7, #24]
 8005828:	69ba      	ldr	r2, [r7, #24]
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	429a      	cmp	r2, r3
 800582e:	d3ef      	bcc.n	8005810 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005830:	69fb      	ldr	r3, [r7, #28]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3724      	adds	r7, #36	; 0x24
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800583e:	b480      	push	{r7}
 8005840:	b085      	sub	sp, #20
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
 8005846:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	785b      	ldrb	r3, [r3, #1]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d12c      	bne.n	80058b4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	015a      	lsls	r2, r3, #5
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	4413      	add	r3, r2
 8005862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	db12      	blt.n	8005892 <USB_EPSetStall+0x54>
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00f      	beq.n	8005892 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	015a      	lsls	r2, r3, #5
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	4413      	add	r3, r2
 800587a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68ba      	ldr	r2, [r7, #8]
 8005882:	0151      	lsls	r1, r2, #5
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	440a      	add	r2, r1
 8005888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800588c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005890:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	015a      	lsls	r2, r3, #5
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	4413      	add	r3, r2
 800589a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	0151      	lsls	r1, r2, #5
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	440a      	add	r2, r1
 80058a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80058b0:	6013      	str	r3, [r2, #0]
 80058b2:	e02b      	b.n	800590c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	db12      	blt.n	80058ec <USB_EPSetStall+0xae>
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00f      	beq.n	80058ec <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	0151      	lsls	r1, r2, #5
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	440a      	add	r2, r1
 80058e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058ea:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	015a      	lsls	r2, r3, #5
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4413      	add	r3, r2
 80058f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	0151      	lsls	r1, r2, #5
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	440a      	add	r2, r1
 8005902:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005906:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800590a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3714      	adds	r7, #20
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800591a:	b480      	push	{r7}
 800591c:	b085      	sub	sp, #20
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
 8005922:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	785b      	ldrb	r3, [r3, #1]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d128      	bne.n	8005988 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	4413      	add	r3, r2
 800593e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	0151      	lsls	r1, r2, #5
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	440a      	add	r2, r1
 800594c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005950:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005954:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	78db      	ldrb	r3, [r3, #3]
 800595a:	2b03      	cmp	r3, #3
 800595c:	d003      	beq.n	8005966 <USB_EPClearStall+0x4c>
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	78db      	ldrb	r3, [r3, #3]
 8005962:	2b02      	cmp	r3, #2
 8005964:	d138      	bne.n	80059d8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	015a      	lsls	r2, r3, #5
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	4413      	add	r3, r2
 800596e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68ba      	ldr	r2, [r7, #8]
 8005976:	0151      	lsls	r1, r2, #5
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	440a      	add	r2, r1
 800597c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005984:	6013      	str	r3, [r2, #0]
 8005986:	e027      	b.n	80059d8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	4413      	add	r3, r2
 8005990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	0151      	lsls	r1, r2, #5
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	440a      	add	r2, r1
 800599e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059a6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	78db      	ldrb	r3, [r3, #3]
 80059ac:	2b03      	cmp	r3, #3
 80059ae:	d003      	beq.n	80059b8 <USB_EPClearStall+0x9e>
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	78db      	ldrb	r3, [r3, #3]
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d10f      	bne.n	80059d8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	015a      	lsls	r2, r3, #5
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	4413      	add	r3, r2
 80059c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	0151      	lsls	r1, r2, #5
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	440a      	add	r2, r1
 80059ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059d6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3714      	adds	r7, #20
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b085      	sub	sp, #20
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
 80059ee:	460b      	mov	r3, r1
 80059f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a04:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005a08:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	78fb      	ldrb	r3, [r7, #3]
 8005a14:	011b      	lsls	r3, r3, #4
 8005a16:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005a1a:	68f9      	ldr	r1, [r7, #12]
 8005a1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a20:	4313      	orrs	r3, r2
 8005a22:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3714      	adds	r7, #20
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a32:	b480      	push	{r7}
 8005a34:	b085      	sub	sp, #20
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005a4c:	f023 0303 	bic.w	r3, r3, #3
 8005a50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a60:	f023 0302 	bic.w	r3, r3, #2
 8005a64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3714      	adds	r7, #20
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005a8e:	f023 0303 	bic.w	r3, r3, #3
 8005a92:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005aa2:	f043 0302 	orr.w	r3, r3, #2
 8005aa6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b085      	sub	sp, #20
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	4013      	ands	r3, r2
 8005acc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005ace:	68fb      	ldr	r3, [r7, #12]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	4013      	ands	r3, r2
 8005afe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	0c1b      	lsrs	r3, r3, #16
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3714      	adds	r7, #20
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	4013      	ands	r3, r2
 8005b32:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	b29b      	uxth	r3, r3
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005b54:	78fb      	ldrb	r3, [r7, #3]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b72:	68bb      	ldr	r3, [r7, #8]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3714      	adds	r7, #20
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b087      	sub	sp, #28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	460b      	mov	r3, r1
 8005b8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005ba4:	78fb      	ldrb	r3, [r7, #3]
 8005ba6:	f003 030f 	and.w	r3, r3, #15
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	fa22 f303 	lsr.w	r3, r2, r3
 8005bb0:	01db      	lsls	r3, r3, #7
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005bba:	78fb      	ldrb	r3, [r7, #3]
 8005bbc:	015a      	lsls	r2, r3, #5
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	4013      	ands	r3, r2
 8005bcc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005bce:	68bb      	ldr	r3, [r7, #8]
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	371c      	adds	r7, #28
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	f003 0301 	and.w	r3, r3, #1
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c12:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005c16:	f023 0307 	bic.w	r3, r3, #7
 8005c1a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c2e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
	...

08005c40 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b087      	sub	sp, #28
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	460b      	mov	r3, r1
 8005c4a:	607a      	str	r2, [r7, #4]
 8005c4c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	333c      	adds	r3, #60	; 0x3c
 8005c56:	3304      	adds	r3, #4
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	4a26      	ldr	r2, [pc, #152]	; (8005cf8 <USB_EP0_OutStart+0xb8>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d90a      	bls.n	8005c7a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c74:	d101      	bne.n	8005c7a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005c76:	2300      	movs	r3, #0
 8005c78:	e037      	b.n	8005cea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c80:	461a      	mov	r2, r3
 8005c82:	2300      	movs	r3, #0
 8005c84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ca8:	f043 0318 	orr.w	r3, r3, #24
 8005cac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cbc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005cc0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005cc2:	7afb      	ldrb	r3, [r7, #11]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d10f      	bne.n	8005ce8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cce:	461a      	mov	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ce2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005ce6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	371c      	adds	r7, #28
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	4f54300a 	.word	0x4f54300a

08005cfc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005d04:	2300      	movs	r3, #0
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	60fb      	str	r3, [r7, #12]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	4a13      	ldr	r2, [pc, #76]	; (8005d60 <USB_CoreReset+0x64>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d901      	bls.n	8005d1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e01b      	b.n	8005d52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	daf2      	bge.n	8005d08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d22:	2300      	movs	r3, #0
 8005d24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	f043 0201 	orr.w	r2, r3, #1
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	3301      	adds	r3, #1
 8005d36:	60fb      	str	r3, [r7, #12]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	4a09      	ldr	r2, [pc, #36]	; (8005d60 <USB_CoreReset+0x64>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d901      	bls.n	8005d44 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e006      	b.n	8005d52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d0f0      	beq.n	8005d32 <USB_CoreReset+0x36>

  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3714      	adds	r7, #20
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	00030d40 	.word	0x00030d40

08005d64 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005d70:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005d74:	f002 fab4 	bl	80082e0 <malloc>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d105      	bne.n	8005d8e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	e066      	b.n	8005e5c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	7c1b      	ldrb	r3, [r3, #16]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d119      	bne.n	8005dd2 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005d9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005da2:	2202      	movs	r2, #2
 8005da4:	2181      	movs	r1, #129	; 0x81
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f001 ffe9 	bl	8007d7e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005db2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005db6:	2202      	movs	r2, #2
 8005db8:	2101      	movs	r1, #1
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f001 ffdf 	bl	8007d7e <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2210      	movs	r2, #16
 8005dcc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005dd0:	e016      	b.n	8005e00 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005dd2:	2340      	movs	r3, #64	; 0x40
 8005dd4:	2202      	movs	r2, #2
 8005dd6:	2181      	movs	r1, #129	; 0x81
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f001 ffd0 	bl	8007d7e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2201      	movs	r2, #1
 8005de2:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005de4:	2340      	movs	r3, #64	; 0x40
 8005de6:	2202      	movs	r2, #2
 8005de8:	2101      	movs	r1, #1
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f001 ffc7 	bl	8007d7e <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2210      	movs	r2, #16
 8005dfc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005e00:	2308      	movs	r3, #8
 8005e02:	2203      	movs	r2, #3
 8005e04:	2182      	movs	r1, #130	; 0x82
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f001 ffb9 	bl	8007d7e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	7c1b      	ldrb	r3, [r3, #16]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d109      	bne.n	8005e4a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e40:	2101      	movs	r1, #1
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f002 f88a 	bl	8007f5c <USBD_LL_PrepareReceive>
 8005e48:	e007      	b.n	8005e5a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e50:	2340      	movs	r3, #64	; 0x40
 8005e52:	2101      	movs	r1, #1
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f002 f881 	bl	8007f5c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8005e70:	2300      	movs	r3, #0
 8005e72:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005e74:	2181      	movs	r1, #129	; 0x81
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f001 ffa7 	bl	8007dca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005e82:	2101      	movs	r1, #1
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f001 ffa0 	bl	8007dca <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005e92:	2182      	movs	r1, #130	; 0x82
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f001 ff98 	bl	8007dca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00e      	beq.n	8005ed2 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f002 fa13 	bl	80082f0 <free>
    pdev->pClassData = NULL;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8005ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b086      	sub	sp, #24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005eec:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d03a      	beq.n	8005f7c <USBD_CDC_Setup+0xa0>
 8005f06:	2b20      	cmp	r3, #32
 8005f08:	f040 8097 	bne.w	800603a <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	88db      	ldrh	r3, [r3, #6]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d029      	beq.n	8005f68 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	b25b      	sxtb	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	da11      	bge.n	8005f42 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	683a      	ldr	r2, [r7, #0]
 8005f28:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8005f2a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005f2c:	683a      	ldr	r2, [r7, #0]
 8005f2e:	88d2      	ldrh	r2, [r2, #6]
 8005f30:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005f32:	6939      	ldr	r1, [r7, #16]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	88db      	ldrh	r3, [r3, #6]
 8005f38:	461a      	mov	r2, r3
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f001 fac7 	bl	80074ce <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8005f40:	e082      	b.n	8006048 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	785a      	ldrb	r2, [r3, #1]
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	88db      	ldrh	r3, [r3, #6]
 8005f50:	b2da      	uxtb	r2, r3
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005f58:	6939      	ldr	r1, [r7, #16]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	88db      	ldrh	r3, [r3, #6]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f001 fae0 	bl	8007526 <USBD_CtlPrepareRx>
    break;
 8005f66:	e06f      	b.n	8006048 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	7850      	ldrb	r0, [r2, #1]
 8005f74:	2200      	movs	r2, #0
 8005f76:	6839      	ldr	r1, [r7, #0]
 8005f78:	4798      	blx	r3
    break;
 8005f7a:	e065      	b.n	8006048 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	785b      	ldrb	r3, [r3, #1]
 8005f80:	2b0b      	cmp	r3, #11
 8005f82:	d84f      	bhi.n	8006024 <USBD_CDC_Setup+0x148>
 8005f84:	a201      	add	r2, pc, #4	; (adr r2, 8005f8c <USBD_CDC_Setup+0xb0>)
 8005f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f8a:	bf00      	nop
 8005f8c:	08005fbd 	.word	0x08005fbd
 8005f90:	08006033 	.word	0x08006033
 8005f94:	08006025 	.word	0x08006025
 8005f98:	08006025 	.word	0x08006025
 8005f9c:	08006025 	.word	0x08006025
 8005fa0:	08006025 	.word	0x08006025
 8005fa4:	08006025 	.word	0x08006025
 8005fa8:	08006025 	.word	0x08006025
 8005fac:	08006025 	.word	0x08006025
 8005fb0:	08006025 	.word	0x08006025
 8005fb4:	08005fe5 	.word	0x08005fe5
 8005fb8:	0800600d 	.word	0x0800600d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fc2:	2b03      	cmp	r3, #3
 8005fc4:	d107      	bne.n	8005fd6 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005fc6:	f107 030c 	add.w	r3, r7, #12
 8005fca:	2202      	movs	r2, #2
 8005fcc:	4619      	mov	r1, r3
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f001 fa7d 	bl	80074ce <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005fd4:	e030      	b.n	8006038 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005fd6:	6839      	ldr	r1, [r7, #0]
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f001 fa07 	bl	80073ec <USBD_CtlError>
        ret = USBD_FAIL;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	75fb      	strb	r3, [r7, #23]
      break;
 8005fe2:	e029      	b.n	8006038 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fea:	2b03      	cmp	r3, #3
 8005fec:	d107      	bne.n	8005ffe <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005fee:	f107 030f 	add.w	r3, r7, #15
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f001 fa69 	bl	80074ce <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005ffc:	e01c      	b.n	8006038 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005ffe:	6839      	ldr	r1, [r7, #0]
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f001 f9f3 	bl	80073ec <USBD_CtlError>
        ret = USBD_FAIL;
 8006006:	2303      	movs	r3, #3
 8006008:	75fb      	strb	r3, [r7, #23]
      break;
 800600a:	e015      	b.n	8006038 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006012:	2b03      	cmp	r3, #3
 8006014:	d00f      	beq.n	8006036 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8006016:	6839      	ldr	r1, [r7, #0]
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f001 f9e7 	bl	80073ec <USBD_CtlError>
        ret = USBD_FAIL;
 800601e:	2303      	movs	r3, #3
 8006020:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006022:	e008      	b.n	8006036 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006024:	6839      	ldr	r1, [r7, #0]
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f001 f9e0 	bl	80073ec <USBD_CtlError>
      ret = USBD_FAIL;
 800602c:	2303      	movs	r3, #3
 800602e:	75fb      	strb	r3, [r7, #23]
      break;
 8006030:	e002      	b.n	8006038 <USBD_CDC_Setup+0x15c>
      break;
 8006032:	bf00      	nop
 8006034:	e008      	b.n	8006048 <USBD_CDC_Setup+0x16c>
      break;
 8006036:	bf00      	nop
    }
    break;
 8006038:	e006      	b.n	8006048 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800603a:	6839      	ldr	r1, [r7, #0]
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f001 f9d5 	bl	80073ec <USBD_CtlError>
    ret = USBD_FAIL;
 8006042:	2303      	movs	r3, #3
 8006044:	75fb      	strb	r3, [r7, #23]
    break;
 8006046:	bf00      	nop
  }

  return (uint8_t)ret;
 8006048:	7dfb      	ldrb	r3, [r7, #23]
}
 800604a:	4618      	mov	r0, r3
 800604c:	3718      	adds	r7, #24
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop

08006054 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	460b      	mov	r3, r1
 800605e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006066:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006072:	2303      	movs	r3, #3
 8006074:	e049      	b.n	800610a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800607c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800607e:	78fa      	ldrb	r2, [r7, #3]
 8006080:	6879      	ldr	r1, [r7, #4]
 8006082:	4613      	mov	r3, r2
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	4413      	add	r3, r2
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	440b      	add	r3, r1
 800608c:	3318      	adds	r3, #24
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d029      	beq.n	80060e8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006094:	78fa      	ldrb	r2, [r7, #3]
 8006096:	6879      	ldr	r1, [r7, #4]
 8006098:	4613      	mov	r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	440b      	add	r3, r1
 80060a2:	3318      	adds	r3, #24
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	78f9      	ldrb	r1, [r7, #3]
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	460b      	mov	r3, r1
 80060ac:	00db      	lsls	r3, r3, #3
 80060ae:	1a5b      	subs	r3, r3, r1
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	4403      	add	r3, r0
 80060b4:	3344      	adds	r3, #68	; 0x44
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	fbb2 f1f3 	udiv	r1, r2, r3
 80060bc:	fb03 f301 	mul.w	r3, r3, r1
 80060c0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d110      	bne.n	80060e8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80060c6:	78fa      	ldrb	r2, [r7, #3]
 80060c8:	6879      	ldr	r1, [r7, #4]
 80060ca:	4613      	mov	r3, r2
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4413      	add	r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	440b      	add	r3, r1
 80060d4:	3318      	adds	r3, #24
 80060d6:	2200      	movs	r2, #0
 80060d8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80060da:	78f9      	ldrb	r1, [r7, #3]
 80060dc:	2300      	movs	r3, #0
 80060de:	2200      	movs	r2, #0
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f001 ff1a 	bl	8007f1a <USBD_LL_Transmit>
 80060e6:	e00f      	b.n	8006108 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80060fe:	68ba      	ldr	r2, [r7, #8]
 8006100:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006104:	78fa      	ldrb	r2, [r7, #3]
 8006106:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b084      	sub	sp, #16
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
 800611a:	460b      	mov	r3, r1
 800611c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006124:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800612c:	2b00      	cmp	r3, #0
 800612e:	d101      	bne.n	8006134 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006130:	2303      	movs	r3, #3
 8006132:	e015      	b.n	8006160 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006134:	78fb      	ldrb	r3, [r7, #3]
 8006136:	4619      	mov	r1, r3
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f001 ff30 	bl	8007f9e <USBD_LL_GetRxDataSize>
 800613e:	4602      	mov	r2, r0
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800615a:	4611      	mov	r1, r2
 800615c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006176:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d015      	beq.n	80061ae <USBD_CDC_EP0_RxReady+0x46>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006188:	2bff      	cmp	r3, #255	; 0xff
 800618a:	d010      	beq.n	80061ae <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800619a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80061a2:	b292      	uxth	r2, r2
 80061a4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	22ff      	movs	r2, #255	; 0xff
 80061aa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3710      	adds	r7, #16
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2243      	movs	r2, #67	; 0x43
 80061c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80061c6:	4b03      	ldr	r3, [pc, #12]	; (80061d4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr
 80061d4:	20000094 	.word	0x20000094

080061d8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2243      	movs	r2, #67	; 0x43
 80061e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80061e6:	4b03      	ldr	r3, [pc, #12]	; (80061f4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr
 80061f4:	20000050 	.word	0x20000050

080061f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2243      	movs	r2, #67	; 0x43
 8006204:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006206:	4b03      	ldr	r3, [pc, #12]	; (8006214 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006208:	4618      	mov	r0, r3
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	200000d8 	.word	0x200000d8

08006218 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	220a      	movs	r2, #10
 8006224:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006226:	4b03      	ldr	r3, [pc, #12]	; (8006234 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006228:	4618      	mov	r0, r3
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr
 8006234:	2000000c 	.word	0x2000000c

08006238 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d101      	bne.n	800624c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006248:	2303      	movs	r3, #3
 800624a:	e004      	b.n	8006256 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	683a      	ldr	r2, [r7, #0]
 8006250:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006262:	b480      	push	{r7}
 8006264:	b087      	sub	sp, #28
 8006266:	af00      	add	r7, sp, #0
 8006268:	60f8      	str	r0, [r7, #12]
 800626a:	60b9      	str	r1, [r7, #8]
 800626c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006274:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	371c      	adds	r7, #28
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062a4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	683a      	ldr	r2, [r7, #0]
 80062aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3714      	adds	r7, #20
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062ca:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80062cc:	2301      	movs	r3, #1
 80062ce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d101      	bne.n	80062de <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80062da:	2303      	movs	r3, #3
 80062dc:	e01a      	b.n	8006314 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d114      	bne.n	8006312 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006306:	2181      	movs	r1, #129	; 0x81
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f001 fe06 	bl	8007f1a <USBD_LL_Transmit>

    ret = USBD_OK;
 800630e:	2300      	movs	r3, #0
 8006310:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006312:	7bfb      	ldrb	r3, [r7, #15]
}
 8006314:	4618      	mov	r0, r3
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800632a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006332:	2b00      	cmp	r3, #0
 8006334:	d101      	bne.n	800633a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006336:	2303      	movs	r3, #3
 8006338:	e016      	b.n	8006368 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	7c1b      	ldrb	r3, [r3, #16]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d109      	bne.n	8006356 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006348:	f44f 7300 	mov.w	r3, #512	; 0x200
 800634c:	2101      	movs	r1, #1
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f001 fe04 	bl	8007f5c <USBD_LL_PrepareReceive>
 8006354:	e007      	b.n	8006366 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800635c:	2340      	movs	r3, #64	; 0x40
 800635e:	2101      	movs	r1, #1
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f001 fdfb 	bl	8007f5c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b086      	sub	sp, #24
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	4613      	mov	r3, r2
 800637c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d101      	bne.n	8006388 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006384:	2303      	movs	r3, #3
 8006386:	e025      	b.n	80063d4 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800638e:	2b00      	cmp	r3, #0
 8006390:	d003      	beq.n	800639a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d003      	beq.n	80063ac <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	79fa      	ldrb	r2, [r7, #7]
 80063c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f001 fc71 	bl	8007cb0 <USBD_LL_Init>
 80063ce:	4603      	mov	r3, r0
 80063d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80063d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3718      	adds	r7, #24
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80063e6:	2300      	movs	r3, #0
 80063e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d101      	bne.n	80063f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80063f0:	2303      	movs	r3, #3
 80063f2:	e010      	b.n	8006416 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	683a      	ldr	r2, [r7, #0]
 80063f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006404:	f107 020e 	add.w	r2, r7, #14
 8006408:	4610      	mov	r0, r2
 800640a:	4798      	blx	r3
 800640c:	4602      	mov	r2, r0
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b082      	sub	sp, #8
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f001 fc8e 	bl	8007d48 <USBD_LL_Start>
 800642c:	4603      	mov	r3, r0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3708      	adds	r7, #8
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006436:	b480      	push	{r7}
 8006438:	b083      	sub	sp, #12
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	460b      	mov	r3, r1
 8006456:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006458:	2303      	movs	r3, #3
 800645a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006462:	2b00      	cmp	r3, #0
 8006464:	d009      	beq.n	800647a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	78fa      	ldrb	r2, [r7, #3]
 8006470:	4611      	mov	r1, r2
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	4798      	blx	r3
 8006476:	4603      	mov	r3, r0
 8006478:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800647a:	7bfb      	ldrb	r3, [r7, #15]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	460b      	mov	r3, r1
 800648e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006496:	2b00      	cmp	r3, #0
 8006498:	d007      	beq.n	80064aa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	78fa      	ldrb	r2, [r7, #3]
 80064a4:	4611      	mov	r1, r2
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	4798      	blx	r3
  }

  return USBD_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3708      	adds	r7, #8
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80064c4:	6839      	ldr	r1, [r7, #0]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 ff56 	bl	8007378 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80064da:	461a      	mov	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80064e8:	f003 031f 	and.w	r3, r3, #31
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d00e      	beq.n	800650e <USBD_LL_SetupStage+0x5a>
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d302      	bcc.n	80064fa <USBD_LL_SetupStage+0x46>
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d014      	beq.n	8006522 <USBD_LL_SetupStage+0x6e>
 80064f8:	e01d      	b.n	8006536 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006500:	4619      	mov	r1, r3
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 fa18 	bl	8006938 <USBD_StdDevReq>
 8006508:	4603      	mov	r3, r0
 800650a:	73fb      	strb	r3, [r7, #15]
      break;
 800650c:	e020      	b.n	8006550 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006514:	4619      	mov	r1, r3
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 fa7c 	bl	8006a14 <USBD_StdItfReq>
 800651c:	4603      	mov	r3, r0
 800651e:	73fb      	strb	r3, [r7, #15]
      break;
 8006520:	e016      	b.n	8006550 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006528:	4619      	mov	r1, r3
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 fab8 	bl	8006aa0 <USBD_StdEPReq>
 8006530:	4603      	mov	r3, r0
 8006532:	73fb      	strb	r3, [r7, #15]
      break;
 8006534:	e00c      	b.n	8006550 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800653c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006540:	b2db      	uxtb	r3, r3
 8006542:	4619      	mov	r1, r3
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f001 fc5f 	bl	8007e08 <USBD_LL_StallEP>
 800654a:	4603      	mov	r3, r0
 800654c:	73fb      	strb	r3, [r7, #15]
      break;
 800654e:	bf00      	nop
  }

  return ret;
 8006550:	7bfb      	ldrb	r3, [r7, #15]
}
 8006552:	4618      	mov	r0, r3
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b086      	sub	sp, #24
 800655e:	af00      	add	r7, sp, #0
 8006560:	60f8      	str	r0, [r7, #12]
 8006562:	460b      	mov	r3, r1
 8006564:	607a      	str	r2, [r7, #4]
 8006566:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006568:	7afb      	ldrb	r3, [r7, #11]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d137      	bne.n	80065de <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006574:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800657c:	2b03      	cmp	r3, #3
 800657e:	d14a      	bne.n	8006616 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	689a      	ldr	r2, [r3, #8]
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	429a      	cmp	r2, r3
 800658a:	d913      	bls.n	80065b4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	689a      	ldr	r2, [r3, #8]
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	1ad2      	subs	r2, r2, r3
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	68da      	ldr	r2, [r3, #12]
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	4293      	cmp	r3, r2
 80065a4:	bf28      	it	cs
 80065a6:	4613      	movcs	r3, r2
 80065a8:	461a      	mov	r2, r3
 80065aa:	6879      	ldr	r1, [r7, #4]
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	f000 ffd7 	bl	8007560 <USBD_CtlContinueRx>
 80065b2:	e030      	b.n	8006616 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00a      	beq.n	80065d6 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80065c6:	2b03      	cmp	r3, #3
 80065c8:	d105      	bne.n	80065d6 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80065d6:	68f8      	ldr	r0, [r7, #12]
 80065d8:	f000 ffd3 	bl	8007582 <USBD_CtlSendStatus>
 80065dc:	e01b      	b.n	8006616 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d013      	beq.n	8006612 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80065f0:	2b03      	cmp	r3, #3
 80065f2:	d10e      	bne.n	8006612 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	7afa      	ldrb	r2, [r7, #11]
 80065fe:	4611      	mov	r1, r2
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	4798      	blx	r3
 8006604:	4603      	mov	r3, r0
 8006606:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006608:	7dfb      	ldrb	r3, [r7, #23]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d003      	beq.n	8006616 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800660e:	7dfb      	ldrb	r3, [r7, #23]
 8006610:	e002      	b.n	8006618 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006612:	2303      	movs	r3, #3
 8006614:	e000      	b.n	8006618 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	3718      	adds	r7, #24
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b086      	sub	sp, #24
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	460b      	mov	r3, r1
 800662a:	607a      	str	r2, [r7, #4]
 800662c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800662e:	7afb      	ldrb	r3, [r7, #11]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d16a      	bne.n	800670a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	3314      	adds	r3, #20
 8006638:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006640:	2b02      	cmp	r3, #2
 8006642:	d155      	bne.n	80066f0 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	689a      	ldr	r2, [r3, #8]
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	429a      	cmp	r2, r3
 800664e:	d914      	bls.n	800667a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	689a      	ldr	r2, [r3, #8]
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	1ad2      	subs	r2, r2, r3
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	461a      	mov	r2, r3
 8006664:	6879      	ldr	r1, [r7, #4]
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f000 ff4c 	bl	8007504 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800666c:	2300      	movs	r3, #0
 800666e:	2200      	movs	r2, #0
 8006670:	2100      	movs	r1, #0
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f001 fc72 	bl	8007f5c <USBD_LL_PrepareReceive>
 8006678:	e03a      	b.n	80066f0 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	68da      	ldr	r2, [r3, #12]
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	429a      	cmp	r2, r3
 8006684:	d11c      	bne.n	80066c0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	685a      	ldr	r2, [r3, #4]
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800668e:	429a      	cmp	r2, r3
 8006690:	d316      	bcc.n	80066c0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	685a      	ldr	r2, [r3, #4]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800669c:	429a      	cmp	r2, r3
 800669e:	d20f      	bcs.n	80066c0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80066a0:	2200      	movs	r2, #0
 80066a2:	2100      	movs	r1, #0
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f000 ff2d 	bl	8007504 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066b2:	2300      	movs	r3, #0
 80066b4:	2200      	movs	r2, #0
 80066b6:	2100      	movs	r1, #0
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f001 fc4f 	bl	8007f5c <USBD_LL_PrepareReceive>
 80066be:	e017      	b.n	80066f0 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00a      	beq.n	80066e2 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80066d2:	2b03      	cmp	r3, #3
 80066d4:	d105      	bne.n	80066e2 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80066e2:	2180      	movs	r1, #128	; 0x80
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f001 fb8f 	bl	8007e08 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	f000 ff5c 	bl	80075a8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d123      	bne.n	8006742 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f7ff fe9b 	bl	8006436 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006708:	e01b      	b.n	8006742 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d013      	beq.n	800673e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800671c:	2b03      	cmp	r3, #3
 800671e:	d10e      	bne.n	800673e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006726:	695b      	ldr	r3, [r3, #20]
 8006728:	7afa      	ldrb	r2, [r7, #11]
 800672a:	4611      	mov	r1, r2
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	4798      	blx	r3
 8006730:	4603      	mov	r3, r0
 8006732:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006734:	7dfb      	ldrb	r3, [r7, #23]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d003      	beq.n	8006742 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800673a:	7dfb      	ldrb	r3, [r7, #23]
 800673c:	e002      	b.n	8006744 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800673e:	2303      	movs	r3, #3
 8006740:	e000      	b.n	8006744 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3718      	adds	r7, #24
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006778:	2b00      	cmp	r3, #0
 800677a:	d009      	beq.n	8006790 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	6852      	ldr	r2, [r2, #4]
 8006788:	b2d2      	uxtb	r2, r2
 800678a:	4611      	mov	r1, r2
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006790:	2340      	movs	r3, #64	; 0x40
 8006792:	2200      	movs	r2, #0
 8006794:	2100      	movs	r1, #0
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f001 faf1 	bl	8007d7e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2240      	movs	r2, #64	; 0x40
 80067a8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067ac:	2340      	movs	r3, #64	; 0x40
 80067ae:	2200      	movs	r2, #0
 80067b0:	2180      	movs	r1, #128	; 0x80
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f001 fae3 	bl	8007d7e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2240      	movs	r2, #64	; 0x40
 80067c2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3708      	adds	r7, #8
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}

080067ce <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b083      	sub	sp, #12
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
 80067d6:	460b      	mov	r3, r1
 80067d8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	78fa      	ldrb	r2, [r7, #3]
 80067de:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	370c      	adds	r7, #12
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b083      	sub	sp, #12
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2204      	movs	r2, #4
 8006806:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006826:	2b04      	cmp	r3, #4
 8006828:	d105      	bne.n	8006836 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006852:	2b03      	cmp	r3, #3
 8006854:	d10b      	bne.n	800686e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800685c:	69db      	ldr	r3, [r3, #28]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d005      	beq.n	800686e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006868:	69db      	ldr	r3, [r3, #28]
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3708      	adds	r7, #8
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	460b      	mov	r3, r1
 8006882:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	370c      	adds	r7, #12
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr

08006892 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006892:	b480      	push	{r7}
 8006894:	b083      	sub	sp, #12
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
 800689a:	460b      	mov	r3, r1
 800689c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	370c      	adds	r7, #12
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr

080068c2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b082      	sub	sp, #8
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d009      	beq.n	80068f0 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	6852      	ldr	r2, [r2, #4]
 80068e8:	b2d2      	uxtb	r2, r2
 80068ea:	4611      	mov	r1, r2
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	4798      	blx	r3
  }

  return USBD_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3708      	adds	r7, #8
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80068fa:	b480      	push	{r7}
 80068fc:	b087      	sub	sp, #28
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	3301      	adds	r3, #1
 8006910:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006918:	8a3b      	ldrh	r3, [r7, #16]
 800691a:	021b      	lsls	r3, r3, #8
 800691c:	b21a      	sxth	r2, r3
 800691e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006922:	4313      	orrs	r3, r2
 8006924:	b21b      	sxth	r3, r3
 8006926:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006928:	89fb      	ldrh	r3, [r7, #14]
}
 800692a:	4618      	mov	r0, r3
 800692c:	371c      	adds	r7, #28
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
	...

08006938 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006942:	2300      	movs	r3, #0
 8006944:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800694e:	2b20      	cmp	r3, #32
 8006950:	d004      	beq.n	800695c <USBD_StdDevReq+0x24>
 8006952:	2b40      	cmp	r3, #64	; 0x40
 8006954:	d002      	beq.n	800695c <USBD_StdDevReq+0x24>
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00a      	beq.n	8006970 <USBD_StdDevReq+0x38>
 800695a:	e050      	b.n	80069fe <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	6839      	ldr	r1, [r7, #0]
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	4798      	blx	r3
 800696a:	4603      	mov	r3, r0
 800696c:	73fb      	strb	r3, [r7, #15]
    break;
 800696e:	e04b      	b.n	8006a08 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	785b      	ldrb	r3, [r3, #1]
 8006974:	2b09      	cmp	r3, #9
 8006976:	d83c      	bhi.n	80069f2 <USBD_StdDevReq+0xba>
 8006978:	a201      	add	r2, pc, #4	; (adr r2, 8006980 <USBD_StdDevReq+0x48>)
 800697a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697e:	bf00      	nop
 8006980:	080069d5 	.word	0x080069d5
 8006984:	080069e9 	.word	0x080069e9
 8006988:	080069f3 	.word	0x080069f3
 800698c:	080069df 	.word	0x080069df
 8006990:	080069f3 	.word	0x080069f3
 8006994:	080069b3 	.word	0x080069b3
 8006998:	080069a9 	.word	0x080069a9
 800699c:	080069f3 	.word	0x080069f3
 80069a0:	080069cb 	.word	0x080069cb
 80069a4:	080069bd 	.word	0x080069bd
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80069a8:	6839      	ldr	r1, [r7, #0]
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f9ce 	bl	8006d4c <USBD_GetDescriptor>
      break;
 80069b0:	e024      	b.n	80069fc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80069b2:	6839      	ldr	r1, [r7, #0]
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 fb5d 	bl	8007074 <USBD_SetAddress>
      break;
 80069ba:	e01f      	b.n	80069fc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80069bc:	6839      	ldr	r1, [r7, #0]
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 fb9a 	bl	80070f8 <USBD_SetConfig>
 80069c4:	4603      	mov	r3, r0
 80069c6:	73fb      	strb	r3, [r7, #15]
      break;
 80069c8:	e018      	b.n	80069fc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80069ca:	6839      	ldr	r1, [r7, #0]
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 fc37 	bl	8007240 <USBD_GetConfig>
      break;
 80069d2:	e013      	b.n	80069fc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80069d4:	6839      	ldr	r1, [r7, #0]
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fc66 	bl	80072a8 <USBD_GetStatus>
      break;
 80069dc:	e00e      	b.n	80069fc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80069de:	6839      	ldr	r1, [r7, #0]
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 fc94 	bl	800730e <USBD_SetFeature>
      break;
 80069e6:	e009      	b.n	80069fc <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80069e8:	6839      	ldr	r1, [r7, #0]
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 fca3 	bl	8007336 <USBD_ClrFeature>
      break;
 80069f0:	e004      	b.n	80069fc <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80069f2:	6839      	ldr	r1, [r7, #0]
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 fcf9 	bl	80073ec <USBD_CtlError>
      break;
 80069fa:	bf00      	nop
    }
    break;
 80069fc:	e004      	b.n	8006a08 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80069fe:	6839      	ldr	r1, [r7, #0]
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 fcf3 	bl	80073ec <USBD_CtlError>
    break;
 8006a06:	bf00      	nop
  }

  return ret;
 8006a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop

08006a14 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a2a:	2b20      	cmp	r3, #32
 8006a2c:	d003      	beq.n	8006a36 <USBD_StdItfReq+0x22>
 8006a2e:	2b40      	cmp	r3, #64	; 0x40
 8006a30:	d001      	beq.n	8006a36 <USBD_StdItfReq+0x22>
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d12a      	bne.n	8006a8c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d81d      	bhi.n	8006a7e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	889b      	ldrh	r3, [r3, #4]
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d813      	bhi.n	8006a74 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	6839      	ldr	r1, [r7, #0]
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	4798      	blx	r3
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	88db      	ldrh	r3, [r3, #6]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d110      	bne.n	8006a88 <USBD_StdItfReq+0x74>
 8006a66:	7bfb      	ldrb	r3, [r7, #15]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d10d      	bne.n	8006a88 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 fd88 	bl	8007582 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006a72:	e009      	b.n	8006a88 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006a74:	6839      	ldr	r1, [r7, #0]
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 fcb8 	bl	80073ec <USBD_CtlError>
      break;
 8006a7c:	e004      	b.n	8006a88 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006a7e:	6839      	ldr	r1, [r7, #0]
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 fcb3 	bl	80073ec <USBD_CtlError>
      break;
 8006a86:	e000      	b.n	8006a8a <USBD_StdItfReq+0x76>
      break;
 8006a88:	bf00      	nop
    }
    break;
 8006a8a:	e004      	b.n	8006a96 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006a8c:	6839      	ldr	r1, [r7, #0]
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 fcac 	bl	80073ec <USBD_CtlError>
    break;
 8006a94:	bf00      	nop
  }

  return ret;
 8006a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	889b      	ldrh	r3, [r3, #4]
 8006ab2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006abc:	2b20      	cmp	r3, #32
 8006abe:	d004      	beq.n	8006aca <USBD_StdEPReq+0x2a>
 8006ac0:	2b40      	cmp	r3, #64	; 0x40
 8006ac2:	d002      	beq.n	8006aca <USBD_StdEPReq+0x2a>
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00a      	beq.n	8006ade <USBD_StdEPReq+0x3e>
 8006ac8:	e135      	b.n	8006d36 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	6839      	ldr	r1, [r7, #0]
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	4798      	blx	r3
 8006ad8:	4603      	mov	r3, r0
 8006ada:	73fb      	strb	r3, [r7, #15]
    break;
 8006adc:	e130      	b.n	8006d40 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	785b      	ldrb	r3, [r3, #1]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d03e      	beq.n	8006b64 <USBD_StdEPReq+0xc4>
 8006ae6:	2b03      	cmp	r3, #3
 8006ae8:	d002      	beq.n	8006af0 <USBD_StdEPReq+0x50>
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d077      	beq.n	8006bde <USBD_StdEPReq+0x13e>
 8006aee:	e11c      	b.n	8006d2a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d002      	beq.n	8006b00 <USBD_StdEPReq+0x60>
 8006afa:	2b03      	cmp	r3, #3
 8006afc:	d015      	beq.n	8006b2a <USBD_StdEPReq+0x8a>
 8006afe:	e02b      	b.n	8006b58 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b00:	7bbb      	ldrb	r3, [r7, #14]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00c      	beq.n	8006b20 <USBD_StdEPReq+0x80>
 8006b06:	7bbb      	ldrb	r3, [r7, #14]
 8006b08:	2b80      	cmp	r3, #128	; 0x80
 8006b0a:	d009      	beq.n	8006b20 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b0c:	7bbb      	ldrb	r3, [r7, #14]
 8006b0e:	4619      	mov	r1, r3
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f001 f979 	bl	8007e08 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b16:	2180      	movs	r1, #128	; 0x80
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f001 f975 	bl	8007e08 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006b1e:	e020      	b.n	8006b62 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006b20:	6839      	ldr	r1, [r7, #0]
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fc62 	bl	80073ec <USBD_CtlError>
        break;
 8006b28:	e01b      	b.n	8006b62 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	885b      	ldrh	r3, [r3, #2]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10e      	bne.n	8006b50 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b32:	7bbb      	ldrb	r3, [r7, #14]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00b      	beq.n	8006b50 <USBD_StdEPReq+0xb0>
 8006b38:	7bbb      	ldrb	r3, [r7, #14]
 8006b3a:	2b80      	cmp	r3, #128	; 0x80
 8006b3c:	d008      	beq.n	8006b50 <USBD_StdEPReq+0xb0>
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	88db      	ldrh	r3, [r3, #6]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d104      	bne.n	8006b50 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b46:	7bbb      	ldrb	r3, [r7, #14]
 8006b48:	4619      	mov	r1, r3
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f001 f95c 	bl	8007e08 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 fd16 	bl	8007582 <USBD_CtlSendStatus>

        break;
 8006b56:	e004      	b.n	8006b62 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8006b58:	6839      	ldr	r1, [r7, #0]
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 fc46 	bl	80073ec <USBD_CtlError>
        break;
 8006b60:	bf00      	nop
      }
      break;
 8006b62:	e0e7      	b.n	8006d34 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d002      	beq.n	8006b74 <USBD_StdEPReq+0xd4>
 8006b6e:	2b03      	cmp	r3, #3
 8006b70:	d015      	beq.n	8006b9e <USBD_StdEPReq+0xfe>
 8006b72:	e02d      	b.n	8006bd0 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b74:	7bbb      	ldrb	r3, [r7, #14]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00c      	beq.n	8006b94 <USBD_StdEPReq+0xf4>
 8006b7a:	7bbb      	ldrb	r3, [r7, #14]
 8006b7c:	2b80      	cmp	r3, #128	; 0x80
 8006b7e:	d009      	beq.n	8006b94 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b80:	7bbb      	ldrb	r3, [r7, #14]
 8006b82:	4619      	mov	r1, r3
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f001 f93f 	bl	8007e08 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b8a:	2180      	movs	r1, #128	; 0x80
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f001 f93b 	bl	8007e08 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006b92:	e023      	b.n	8006bdc <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8006b94:	6839      	ldr	r1, [r7, #0]
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 fc28 	bl	80073ec <USBD_CtlError>
        break;
 8006b9c:	e01e      	b.n	8006bdc <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	885b      	ldrh	r3, [r3, #2]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d119      	bne.n	8006bda <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006ba6:	7bbb      	ldrb	r3, [r7, #14]
 8006ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d004      	beq.n	8006bba <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006bb0:	7bbb      	ldrb	r3, [r7, #14]
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f001 f946 	bl	8007e46 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 fce1 	bl	8007582 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	6839      	ldr	r1, [r7, #0]
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	4798      	blx	r3
        }
        break;
 8006bce:	e004      	b.n	8006bda <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8006bd0:	6839      	ldr	r1, [r7, #0]
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 fc0a 	bl	80073ec <USBD_CtlError>
        break;
 8006bd8:	e000      	b.n	8006bdc <USBD_StdEPReq+0x13c>
        break;
 8006bda:	bf00      	nop
      }
      break;
 8006bdc:	e0aa      	b.n	8006d34 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006be4:	2b02      	cmp	r3, #2
 8006be6:	d002      	beq.n	8006bee <USBD_StdEPReq+0x14e>
 8006be8:	2b03      	cmp	r3, #3
 8006bea:	d032      	beq.n	8006c52 <USBD_StdEPReq+0x1b2>
 8006bec:	e097      	b.n	8006d1e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bee:	7bbb      	ldrb	r3, [r7, #14]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d007      	beq.n	8006c04 <USBD_StdEPReq+0x164>
 8006bf4:	7bbb      	ldrb	r3, [r7, #14]
 8006bf6:	2b80      	cmp	r3, #128	; 0x80
 8006bf8:	d004      	beq.n	8006c04 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8006bfa:	6839      	ldr	r1, [r7, #0]
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 fbf5 	bl	80073ec <USBD_CtlError>
          break;
 8006c02:	e091      	b.n	8006d28 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	da0b      	bge.n	8006c24 <USBD_StdEPReq+0x184>
 8006c0c:	7bbb      	ldrb	r3, [r7, #14]
 8006c0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c12:	4613      	mov	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	3310      	adds	r3, #16
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	4413      	add	r3, r2
 8006c20:	3304      	adds	r3, #4
 8006c22:	e00b      	b.n	8006c3c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006c24:	7bbb      	ldrb	r3, [r7, #14]
 8006c26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	4413      	add	r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	4413      	add	r3, r2
 8006c3a:	3304      	adds	r3, #4
 8006c3c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	2200      	movs	r2, #0
 8006c42:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	2202      	movs	r2, #2
 8006c48:	4619      	mov	r1, r3
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 fc3f 	bl	80074ce <USBD_CtlSendData>
        break;
 8006c50:	e06a      	b.n	8006d28 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8006c52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	da11      	bge.n	8006c7e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006c5a:	7bbb      	ldrb	r3, [r7, #14]
 8006c5c:	f003 020f 	and.w	r2, r3, #15
 8006c60:	6879      	ldr	r1, [r7, #4]
 8006c62:	4613      	mov	r3, r2
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	4413      	add	r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	440b      	add	r3, r1
 8006c6c:	3324      	adds	r3, #36	; 0x24
 8006c6e:	881b      	ldrh	r3, [r3, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d117      	bne.n	8006ca4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006c74:	6839      	ldr	r1, [r7, #0]
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 fbb8 	bl	80073ec <USBD_CtlError>
            break;
 8006c7c:	e054      	b.n	8006d28 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006c7e:	7bbb      	ldrb	r3, [r7, #14]
 8006c80:	f003 020f 	and.w	r2, r3, #15
 8006c84:	6879      	ldr	r1, [r7, #4]
 8006c86:	4613      	mov	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	440b      	add	r3, r1
 8006c90:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c94:	881b      	ldrh	r3, [r3, #0]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d104      	bne.n	8006ca4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006c9a:	6839      	ldr	r1, [r7, #0]
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fba5 	bl	80073ec <USBD_CtlError>
            break;
 8006ca2:	e041      	b.n	8006d28 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ca4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	da0b      	bge.n	8006cc4 <USBD_StdEPReq+0x224>
 8006cac:	7bbb      	ldrb	r3, [r7, #14]
 8006cae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	3310      	adds	r3, #16
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	3304      	adds	r3, #4
 8006cc2:	e00b      	b.n	8006cdc <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006cc4:	7bbb      	ldrb	r3, [r7, #14]
 8006cc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cca:	4613      	mov	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4413      	add	r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	4413      	add	r3, r2
 8006cda:	3304      	adds	r3, #4
 8006cdc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006cde:	7bbb      	ldrb	r3, [r7, #14]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d002      	beq.n	8006cea <USBD_StdEPReq+0x24a>
 8006ce4:	7bbb      	ldrb	r3, [r7, #14]
 8006ce6:	2b80      	cmp	r3, #128	; 0x80
 8006ce8:	d103      	bne.n	8006cf2 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	2200      	movs	r2, #0
 8006cee:	601a      	str	r2, [r3, #0]
 8006cf0:	e00e      	b.n	8006d10 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006cf2:	7bbb      	ldrb	r3, [r7, #14]
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f001 f8c4 	bl	8007e84 <USBD_LL_IsStallEP>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d003      	beq.n	8006d0a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	2201      	movs	r2, #1
 8006d06:	601a      	str	r2, [r3, #0]
 8006d08:	e002      	b.n	8006d10 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	2202      	movs	r2, #2
 8006d14:	4619      	mov	r1, r3
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 fbd9 	bl	80074ce <USBD_CtlSendData>
          break;
 8006d1c:	e004      	b.n	8006d28 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8006d1e:	6839      	ldr	r1, [r7, #0]
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 fb63 	bl	80073ec <USBD_CtlError>
        break;
 8006d26:	bf00      	nop
      }
      break;
 8006d28:	e004      	b.n	8006d34 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8006d2a:	6839      	ldr	r1, [r7, #0]
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 fb5d 	bl	80073ec <USBD_CtlError>
      break;
 8006d32:	bf00      	nop
    }
    break;
 8006d34:	e004      	b.n	8006d40 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8006d36:	6839      	ldr	r1, [r7, #0]
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 fb57 	bl	80073ec <USBD_CtlError>
    break;
 8006d3e:	bf00      	nop
  }

  return ret;
 8006d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
	...

08006d4c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d56:	2300      	movs	r3, #0
 8006d58:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	885b      	ldrh	r3, [r3, #2]
 8006d66:	0a1b      	lsrs	r3, r3, #8
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	2b0e      	cmp	r3, #14
 8006d6e:	f200 8152 	bhi.w	8007016 <USBD_GetDescriptor+0x2ca>
 8006d72:	a201      	add	r2, pc, #4	; (adr r2, 8006d78 <USBD_GetDescriptor+0x2c>)
 8006d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d78:	08006de9 	.word	0x08006de9
 8006d7c:	08006e01 	.word	0x08006e01
 8006d80:	08006e41 	.word	0x08006e41
 8006d84:	08007017 	.word	0x08007017
 8006d88:	08007017 	.word	0x08007017
 8006d8c:	08006fb7 	.word	0x08006fb7
 8006d90:	08006fe3 	.word	0x08006fe3
 8006d94:	08007017 	.word	0x08007017
 8006d98:	08007017 	.word	0x08007017
 8006d9c:	08007017 	.word	0x08007017
 8006da0:	08007017 	.word	0x08007017
 8006da4:	08007017 	.word	0x08007017
 8006da8:	08007017 	.word	0x08007017
 8006dac:	08007017 	.word	0x08007017
 8006db0:	08006db5 	.word	0x08006db5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dba:	69db      	ldr	r3, [r3, #28]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00b      	beq.n	8006dd8 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dc6:	69db      	ldr	r3, [r3, #28]
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	7c12      	ldrb	r2, [r2, #16]
 8006dcc:	f107 0108 	add.w	r1, r7, #8
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	4798      	blx	r3
 8006dd4:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006dd6:	e126      	b.n	8007026 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8006dd8:	6839      	ldr	r1, [r7, #0]
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 fb06 	bl	80073ec <USBD_CtlError>
      err++;
 8006de0:	7afb      	ldrb	r3, [r7, #11]
 8006de2:	3301      	adds	r3, #1
 8006de4:	72fb      	strb	r3, [r7, #11]
    break;
 8006de6:	e11e      	b.n	8007026 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	7c12      	ldrb	r2, [r2, #16]
 8006df4:	f107 0108 	add.w	r1, r7, #8
 8006df8:	4610      	mov	r0, r2
 8006dfa:	4798      	blx	r3
 8006dfc:	60f8      	str	r0, [r7, #12]
    break;
 8006dfe:	e112      	b.n	8007026 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	7c1b      	ldrb	r3, [r3, #16]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d10d      	bne.n	8006e24 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e10:	f107 0208 	add.w	r2, r7, #8
 8006e14:	4610      	mov	r0, r2
 8006e16:	4798      	blx	r3
 8006e18:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	2202      	movs	r2, #2
 8006e20:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006e22:	e100      	b.n	8007026 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2c:	f107 0208 	add.w	r2, r7, #8
 8006e30:	4610      	mov	r0, r2
 8006e32:	4798      	blx	r3
 8006e34:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	3301      	adds	r3, #1
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	701a      	strb	r2, [r3, #0]
    break;
 8006e3e:	e0f2      	b.n	8007026 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	885b      	ldrh	r3, [r3, #2]
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b05      	cmp	r3, #5
 8006e48:	f200 80ac 	bhi.w	8006fa4 <USBD_GetDescriptor+0x258>
 8006e4c:	a201      	add	r2, pc, #4	; (adr r2, 8006e54 <USBD_GetDescriptor+0x108>)
 8006e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e52:	bf00      	nop
 8006e54:	08006e6d 	.word	0x08006e6d
 8006e58:	08006ea1 	.word	0x08006ea1
 8006e5c:	08006ed5 	.word	0x08006ed5
 8006e60:	08006f09 	.word	0x08006f09
 8006e64:	08006f3d 	.word	0x08006f3d
 8006e68:	08006f71 	.word	0x08006f71
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00b      	beq.n	8006e90 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	7c12      	ldrb	r2, [r2, #16]
 8006e84:	f107 0108 	add.w	r1, r7, #8
 8006e88:	4610      	mov	r0, r2
 8006e8a:	4798      	blx	r3
 8006e8c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e8e:	e091      	b.n	8006fb4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006e90:	6839      	ldr	r1, [r7, #0]
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 faaa 	bl	80073ec <USBD_CtlError>
        err++;
 8006e98:	7afb      	ldrb	r3, [r7, #11]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	72fb      	strb	r3, [r7, #11]
      break;
 8006e9e:	e089      	b.n	8006fb4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00b      	beq.n	8006ec4 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	7c12      	ldrb	r2, [r2, #16]
 8006eb8:	f107 0108 	add.w	r1, r7, #8
 8006ebc:	4610      	mov	r0, r2
 8006ebe:	4798      	blx	r3
 8006ec0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ec2:	e077      	b.n	8006fb4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006ec4:	6839      	ldr	r1, [r7, #0]
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fa90 	bl	80073ec <USBD_CtlError>
        err++;
 8006ecc:	7afb      	ldrb	r3, [r7, #11]
 8006ece:	3301      	adds	r3, #1
 8006ed0:	72fb      	strb	r3, [r7, #11]
      break;
 8006ed2:	e06f      	b.n	8006fb4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00b      	beq.n	8006ef8 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	7c12      	ldrb	r2, [r2, #16]
 8006eec:	f107 0108 	add.w	r1, r7, #8
 8006ef0:	4610      	mov	r0, r2
 8006ef2:	4798      	blx	r3
 8006ef4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ef6:	e05d      	b.n	8006fb4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006ef8:	6839      	ldr	r1, [r7, #0]
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 fa76 	bl	80073ec <USBD_CtlError>
        err++;
 8006f00:	7afb      	ldrb	r3, [r7, #11]
 8006f02:	3301      	adds	r3, #1
 8006f04:	72fb      	strb	r3, [r7, #11]
      break;
 8006f06:	e055      	b.n	8006fb4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00b      	beq.n	8006f2c <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	7c12      	ldrb	r2, [r2, #16]
 8006f20:	f107 0108 	add.w	r1, r7, #8
 8006f24:	4610      	mov	r0, r2
 8006f26:	4798      	blx	r3
 8006f28:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f2a:	e043      	b.n	8006fb4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006f2c:	6839      	ldr	r1, [r7, #0]
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 fa5c 	bl	80073ec <USBD_CtlError>
        err++;
 8006f34:	7afb      	ldrb	r3, [r7, #11]
 8006f36:	3301      	adds	r3, #1
 8006f38:	72fb      	strb	r3, [r7, #11]
      break;
 8006f3a:	e03b      	b.n	8006fb4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f42:	695b      	ldr	r3, [r3, #20]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00b      	beq.n	8006f60 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f4e:	695b      	ldr	r3, [r3, #20]
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	7c12      	ldrb	r2, [r2, #16]
 8006f54:	f107 0108 	add.w	r1, r7, #8
 8006f58:	4610      	mov	r0, r2
 8006f5a:	4798      	blx	r3
 8006f5c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f5e:	e029      	b.n	8006fb4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006f60:	6839      	ldr	r1, [r7, #0]
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 fa42 	bl	80073ec <USBD_CtlError>
        err++;
 8006f68:	7afb      	ldrb	r3, [r7, #11]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	72fb      	strb	r3, [r7, #11]
      break;
 8006f6e:	e021      	b.n	8006fb4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f76:	699b      	ldr	r3, [r3, #24]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00b      	beq.n	8006f94 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f82:	699b      	ldr	r3, [r3, #24]
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	7c12      	ldrb	r2, [r2, #16]
 8006f88:	f107 0108 	add.w	r1, r7, #8
 8006f8c:	4610      	mov	r0, r2
 8006f8e:	4798      	blx	r3
 8006f90:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f92:	e00f      	b.n	8006fb4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006f94:	6839      	ldr	r1, [r7, #0]
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 fa28 	bl	80073ec <USBD_CtlError>
        err++;
 8006f9c:	7afb      	ldrb	r3, [r7, #11]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	72fb      	strb	r3, [r7, #11]
      break;
 8006fa2:	e007      	b.n	8006fb4 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006fa4:	6839      	ldr	r1, [r7, #0]
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fa20 	bl	80073ec <USBD_CtlError>
      err++;
 8006fac:	7afb      	ldrb	r3, [r7, #11]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8006fb2:	bf00      	nop
    }
    break;
 8006fb4:	e037      	b.n	8007026 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	7c1b      	ldrb	r3, [r3, #16]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d109      	bne.n	8006fd2 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fc6:	f107 0208 	add.w	r2, r7, #8
 8006fca:	4610      	mov	r0, r2
 8006fcc:	4798      	blx	r3
 8006fce:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006fd0:	e029      	b.n	8007026 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8006fd2:	6839      	ldr	r1, [r7, #0]
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 fa09 	bl	80073ec <USBD_CtlError>
      err++;
 8006fda:	7afb      	ldrb	r3, [r7, #11]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	72fb      	strb	r3, [r7, #11]
    break;
 8006fe0:	e021      	b.n	8007026 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	7c1b      	ldrb	r3, [r3, #16]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d10d      	bne.n	8007006 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff2:	f107 0208 	add.w	r2, r7, #8
 8006ff6:	4610      	mov	r0, r2
 8006ff8:	4798      	blx	r3
 8006ffa:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	3301      	adds	r3, #1
 8007000:	2207      	movs	r2, #7
 8007002:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007004:	e00f      	b.n	8007026 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007006:	6839      	ldr	r1, [r7, #0]
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f9ef 	bl	80073ec <USBD_CtlError>
      err++;
 800700e:	7afb      	ldrb	r3, [r7, #11]
 8007010:	3301      	adds	r3, #1
 8007012:	72fb      	strb	r3, [r7, #11]
    break;
 8007014:	e007      	b.n	8007026 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8007016:	6839      	ldr	r1, [r7, #0]
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 f9e7 	bl	80073ec <USBD_CtlError>
    err++;
 800701e:	7afb      	ldrb	r3, [r7, #11]
 8007020:	3301      	adds	r3, #1
 8007022:	72fb      	strb	r3, [r7, #11]
    break;
 8007024:	bf00      	nop
  }

  if (err != 0U)
 8007026:	7afb      	ldrb	r3, [r7, #11]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d11e      	bne.n	800706a <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	88db      	ldrh	r3, [r3, #6]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d016      	beq.n	8007062 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8007034:	893b      	ldrh	r3, [r7, #8]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00e      	beq.n	8007058 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	88da      	ldrh	r2, [r3, #6]
 800703e:	893b      	ldrh	r3, [r7, #8]
 8007040:	4293      	cmp	r3, r2
 8007042:	bf28      	it	cs
 8007044:	4613      	movcs	r3, r2
 8007046:	b29b      	uxth	r3, r3
 8007048:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800704a:	893b      	ldrh	r3, [r7, #8]
 800704c:	461a      	mov	r2, r3
 800704e:	68f9      	ldr	r1, [r7, #12]
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 fa3c 	bl	80074ce <USBD_CtlSendData>
 8007056:	e009      	b.n	800706c <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007058:	6839      	ldr	r1, [r7, #0]
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f9c6 	bl	80073ec <USBD_CtlError>
 8007060:	e004      	b.n	800706c <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fa8d 	bl	8007582 <USBD_CtlSendStatus>
 8007068:	e000      	b.n	800706c <USBD_GetDescriptor+0x320>
    return;
 800706a:	bf00      	nop
    }
  }
}
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop

08007074 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	889b      	ldrh	r3, [r3, #4]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d130      	bne.n	80070e8 <USBD_SetAddress+0x74>
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	88db      	ldrh	r3, [r3, #6]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d12c      	bne.n	80070e8 <USBD_SetAddress+0x74>
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	885b      	ldrh	r3, [r3, #2]
 8007092:	2b7f      	cmp	r3, #127	; 0x7f
 8007094:	d828      	bhi.n	80070e8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	885b      	ldrh	r3, [r3, #2]
 800709a:	b2db      	uxtb	r3, r3
 800709c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070a8:	2b03      	cmp	r3, #3
 80070aa:	d104      	bne.n	80070b6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80070ac:	6839      	ldr	r1, [r7, #0]
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 f99c 	bl	80073ec <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070b4:	e01c      	b.n	80070f0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	7bfa      	ldrb	r2, [r7, #15]
 80070ba:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80070be:	7bfb      	ldrb	r3, [r7, #15]
 80070c0:	4619      	mov	r1, r3
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 ff0a 	bl	8007edc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 fa5a 	bl	8007582 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80070ce:	7bfb      	ldrb	r3, [r7, #15]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d004      	beq.n	80070de <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2202      	movs	r2, #2
 80070d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070dc:	e008      	b.n	80070f0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2201      	movs	r2, #1
 80070e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070e6:	e003      	b.n	80070f0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80070e8:	6839      	ldr	r1, [r7, #0]
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f97e 	bl	80073ec <USBD_CtlError>
  }
}
 80070f0:	bf00      	nop
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	885b      	ldrh	r3, [r3, #2]
 800710a:	b2da      	uxtb	r2, r3
 800710c:	4b4b      	ldr	r3, [pc, #300]	; (800723c <USBD_SetConfig+0x144>)
 800710e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007110:	4b4a      	ldr	r3, [pc, #296]	; (800723c <USBD_SetConfig+0x144>)
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d905      	bls.n	8007124 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007118:	6839      	ldr	r1, [r7, #0]
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 f966 	bl	80073ec <USBD_CtlError>
    return USBD_FAIL;
 8007120:	2303      	movs	r3, #3
 8007122:	e087      	b.n	8007234 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800712a:	2b02      	cmp	r3, #2
 800712c:	d002      	beq.n	8007134 <USBD_SetConfig+0x3c>
 800712e:	2b03      	cmp	r3, #3
 8007130:	d025      	beq.n	800717e <USBD_SetConfig+0x86>
 8007132:	e071      	b.n	8007218 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007134:	4b41      	ldr	r3, [pc, #260]	; (800723c <USBD_SetConfig+0x144>)
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d01c      	beq.n	8007176 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800713c:	4b3f      	ldr	r3, [pc, #252]	; (800723c <USBD_SetConfig+0x144>)
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	461a      	mov	r2, r3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007146:	4b3d      	ldr	r3, [pc, #244]	; (800723c <USBD_SetConfig+0x144>)
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	4619      	mov	r1, r3
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f7ff f97d 	bl	800644c <USBD_SetClassConfig>
 8007152:	4603      	mov	r3, r0
 8007154:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007156:	7bfb      	ldrb	r3, [r7, #15]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d004      	beq.n	8007166 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800715c:	6839      	ldr	r1, [r7, #0]
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f944 	bl	80073ec <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007164:	e065      	b.n	8007232 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 fa0b 	bl	8007582 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2203      	movs	r2, #3
 8007170:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007174:	e05d      	b.n	8007232 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fa03 	bl	8007582 <USBD_CtlSendStatus>
    break;
 800717c:	e059      	b.n	8007232 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800717e:	4b2f      	ldr	r3, [pc, #188]	; (800723c <USBD_SetConfig+0x144>)
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d112      	bne.n	80071ac <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2202      	movs	r2, #2
 800718a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800718e:	4b2b      	ldr	r3, [pc, #172]	; (800723c <USBD_SetConfig+0x144>)
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	461a      	mov	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007198:	4b28      	ldr	r3, [pc, #160]	; (800723c <USBD_SetConfig+0x144>)
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	4619      	mov	r1, r3
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f7ff f970 	bl	8006484 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 f9ec 	bl	8007582 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80071aa:	e042      	b.n	8007232 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80071ac:	4b23      	ldr	r3, [pc, #140]	; (800723c <USBD_SetConfig+0x144>)
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	461a      	mov	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d02a      	beq.n	8007210 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	4619      	mov	r1, r3
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f7ff f95e 	bl	8006484 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80071c8:	4b1c      	ldr	r3, [pc, #112]	; (800723c <USBD_SetConfig+0x144>)
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	461a      	mov	r2, r3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80071d2:	4b1a      	ldr	r3, [pc, #104]	; (800723c <USBD_SetConfig+0x144>)
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	4619      	mov	r1, r3
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f7ff f937 	bl	800644c <USBD_SetClassConfig>
 80071de:	4603      	mov	r3, r0
 80071e0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80071e2:	7bfb      	ldrb	r3, [r7, #15]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00f      	beq.n	8007208 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80071e8:	6839      	ldr	r1, [r7, #0]
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 f8fe 	bl	80073ec <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	4619      	mov	r1, r3
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f7ff f943 	bl	8006484 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2202      	movs	r2, #2
 8007202:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007206:	e014      	b.n	8007232 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 f9ba 	bl	8007582 <USBD_CtlSendStatus>
    break;
 800720e:	e010      	b.n	8007232 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 f9b6 	bl	8007582 <USBD_CtlSendStatus>
    break;
 8007216:	e00c      	b.n	8007232 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007218:	6839      	ldr	r1, [r7, #0]
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f8e6 	bl	80073ec <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007220:	4b06      	ldr	r3, [pc, #24]	; (800723c <USBD_SetConfig+0x144>)
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	4619      	mov	r1, r3
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f7ff f92c 	bl	8006484 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800722c:	2303      	movs	r3, #3
 800722e:	73fb      	strb	r3, [r7, #15]
    break;
 8007230:	bf00      	nop
  }

  return ret;
 8007232:	7bfb      	ldrb	r3, [r7, #15]
}
 8007234:	4618      	mov	r0, r3
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	2000021c 	.word	0x2000021c

08007240 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	88db      	ldrh	r3, [r3, #6]
 800724e:	2b01      	cmp	r3, #1
 8007250:	d004      	beq.n	800725c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007252:	6839      	ldr	r1, [r7, #0]
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 f8c9 	bl	80073ec <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800725a:	e021      	b.n	80072a0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007262:	2b01      	cmp	r3, #1
 8007264:	db17      	blt.n	8007296 <USBD_GetConfig+0x56>
 8007266:	2b02      	cmp	r3, #2
 8007268:	dd02      	ble.n	8007270 <USBD_GetConfig+0x30>
 800726a:	2b03      	cmp	r3, #3
 800726c:	d00b      	beq.n	8007286 <USBD_GetConfig+0x46>
 800726e:	e012      	b.n	8007296 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	3308      	adds	r3, #8
 800727a:	2201      	movs	r2, #1
 800727c:	4619      	mov	r1, r3
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 f925 	bl	80074ce <USBD_CtlSendData>
      break;
 8007284:	e00c      	b.n	80072a0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	3304      	adds	r3, #4
 800728a:	2201      	movs	r2, #1
 800728c:	4619      	mov	r1, r3
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f91d 	bl	80074ce <USBD_CtlSendData>
      break;
 8007294:	e004      	b.n	80072a0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8007296:	6839      	ldr	r1, [r7, #0]
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 f8a7 	bl	80073ec <USBD_CtlError>
      break;
 800729e:	bf00      	nop
}
 80072a0:	bf00      	nop
 80072a2:	3708      	adds	r7, #8
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072b8:	3b01      	subs	r3, #1
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d81e      	bhi.n	80072fc <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	88db      	ldrh	r3, [r3, #6]
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	d004      	beq.n	80072d0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80072c6:	6839      	ldr	r1, [r7, #0]
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 f88f 	bl	80073ec <USBD_CtlError>
      break;
 80072ce:	e01a      	b.n	8007306 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d005      	beq.n	80072ec <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	f043 0202 	orr.w	r2, r3, #2
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	330c      	adds	r3, #12
 80072f0:	2202      	movs	r2, #2
 80072f2:	4619      	mov	r1, r3
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 f8ea 	bl	80074ce <USBD_CtlSendData>
    break;
 80072fa:	e004      	b.n	8007306 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80072fc:	6839      	ldr	r1, [r7, #0]
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 f874 	bl	80073ec <USBD_CtlError>
    break;
 8007304:	bf00      	nop
  }
}
 8007306:	bf00      	nop
 8007308:	3708      	adds	r7, #8
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b082      	sub	sp, #8
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
 8007316:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	885b      	ldrh	r3, [r3, #2]
 800731c:	2b01      	cmp	r3, #1
 800731e:	d106      	bne.n	800732e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 f92a 	bl	8007582 <USBD_CtlSendStatus>
  }
}
 800732e:	bf00      	nop
 8007330:	3708      	adds	r7, #8
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b082      	sub	sp, #8
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
 800733e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007346:	3b01      	subs	r3, #1
 8007348:	2b02      	cmp	r3, #2
 800734a:	d80b      	bhi.n	8007364 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	885b      	ldrh	r3, [r3, #2]
 8007350:	2b01      	cmp	r3, #1
 8007352:	d10c      	bne.n	800736e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 f910 	bl	8007582 <USBD_CtlSendStatus>
      }
      break;
 8007362:	e004      	b.n	800736e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007364:	6839      	ldr	r1, [r7, #0]
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f840 	bl	80073ec <USBD_CtlError>
      break;
 800736c:	e000      	b.n	8007370 <USBD_ClrFeature+0x3a>
      break;
 800736e:	bf00      	nop
  }
}
 8007370:	bf00      	nop
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	781a      	ldrb	r2, [r3, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	3301      	adds	r3, #1
 8007392:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	781a      	ldrb	r2, [r3, #0]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	3301      	adds	r3, #1
 80073a0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80073a2:	68f8      	ldr	r0, [r7, #12]
 80073a4:	f7ff faa9 	bl	80068fa <SWAPBYTE>
 80073a8:	4603      	mov	r3, r0
 80073aa:	461a      	mov	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	3301      	adds	r3, #1
 80073b4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	3301      	adds	r3, #1
 80073ba:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	f7ff fa9c 	bl	80068fa <SWAPBYTE>
 80073c2:	4603      	mov	r3, r0
 80073c4:	461a      	mov	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	3301      	adds	r3, #1
 80073ce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	3301      	adds	r3, #1
 80073d4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f7ff fa8f 	bl	80068fa <SWAPBYTE>
 80073dc:	4603      	mov	r3, r0
 80073de:	461a      	mov	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	80da      	strh	r2, [r3, #6]
}
 80073e4:	bf00      	nop
 80073e6:	3710      	adds	r7, #16
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80073f6:	2180      	movs	r1, #128	; 0x80
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 fd05 	bl	8007e08 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80073fe:	2100      	movs	r1, #0
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 fd01 	bl	8007e08 <USBD_LL_StallEP>
}
 8007406:	bf00      	nop
 8007408:	3708      	adds	r7, #8
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b086      	sub	sp, #24
 8007412:	af00      	add	r7, sp, #0
 8007414:	60f8      	str	r0, [r7, #12]
 8007416:	60b9      	str	r1, [r7, #8]
 8007418:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800741a:	2300      	movs	r3, #0
 800741c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d036      	beq.n	8007492 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007428:	6938      	ldr	r0, [r7, #16]
 800742a:	f000 f836 	bl	800749a <USBD_GetLen>
 800742e:	4603      	mov	r3, r0
 8007430:	3301      	adds	r3, #1
 8007432:	b29b      	uxth	r3, r3
 8007434:	005b      	lsls	r3, r3, #1
 8007436:	b29a      	uxth	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800743c:	7dfb      	ldrb	r3, [r7, #23]
 800743e:	68ba      	ldr	r2, [r7, #8]
 8007440:	4413      	add	r3, r2
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	7812      	ldrb	r2, [r2, #0]
 8007446:	701a      	strb	r2, [r3, #0]
  idx++;
 8007448:	7dfb      	ldrb	r3, [r7, #23]
 800744a:	3301      	adds	r3, #1
 800744c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800744e:	7dfb      	ldrb	r3, [r7, #23]
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	4413      	add	r3, r2
 8007454:	2203      	movs	r2, #3
 8007456:	701a      	strb	r2, [r3, #0]
  idx++;
 8007458:	7dfb      	ldrb	r3, [r7, #23]
 800745a:	3301      	adds	r3, #1
 800745c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800745e:	e013      	b.n	8007488 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007460:	7dfb      	ldrb	r3, [r7, #23]
 8007462:	68ba      	ldr	r2, [r7, #8]
 8007464:	4413      	add	r3, r2
 8007466:	693a      	ldr	r2, [r7, #16]
 8007468:	7812      	ldrb	r2, [r2, #0]
 800746a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	3301      	adds	r3, #1
 8007470:	613b      	str	r3, [r7, #16]
    idx++;
 8007472:	7dfb      	ldrb	r3, [r7, #23]
 8007474:	3301      	adds	r3, #1
 8007476:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007478:	7dfb      	ldrb	r3, [r7, #23]
 800747a:	68ba      	ldr	r2, [r7, #8]
 800747c:	4413      	add	r3, r2
 800747e:	2200      	movs	r2, #0
 8007480:	701a      	strb	r2, [r3, #0]
    idx++;
 8007482:	7dfb      	ldrb	r3, [r7, #23]
 8007484:	3301      	adds	r3, #1
 8007486:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d1e7      	bne.n	8007460 <USBD_GetString+0x52>
 8007490:	e000      	b.n	8007494 <USBD_GetString+0x86>
    return;
 8007492:	bf00      	nop
  }
}
 8007494:	3718      	adds	r7, #24
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800749a:	b480      	push	{r7}
 800749c:	b085      	sub	sp, #20
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80074a2:	2300      	movs	r3, #0
 80074a4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80074aa:	e005      	b.n	80074b8 <USBD_GetLen+0x1e>
  {
    len++;
 80074ac:	7bfb      	ldrb	r3, [r7, #15]
 80074ae:	3301      	adds	r3, #1
 80074b0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	3301      	adds	r3, #1
 80074b6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1f5      	bne.n	80074ac <USBD_GetLen+0x12>
  }

  return len;
 80074c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3714      	adds	r7, #20
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr

080074ce <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b084      	sub	sp, #16
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	60f8      	str	r0, [r7, #12]
 80074d6:	60b9      	str	r1, [r7, #8]
 80074d8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2202      	movs	r2, #2
 80074de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	2100      	movs	r1, #0
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	f000 fd10 	bl	8007f1a <USBD_LL_Transmit>

  return USBD_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	2100      	movs	r1, #0
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f000 fcff 	bl	8007f1a <USBD_LL_Transmit>

  return USBD_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}

08007526 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007526:	b580      	push	{r7, lr}
 8007528:	b084      	sub	sp, #16
 800752a:	af00      	add	r7, sp, #0
 800752c:	60f8      	str	r0, [r7, #12]
 800752e:	60b9      	str	r1, [r7, #8]
 8007530:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2203      	movs	r2, #3
 8007536:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	68ba      	ldr	r2, [r7, #8]
 800754e:	2100      	movs	r1, #0
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f000 fd03 	bl	8007f5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	2100      	movs	r1, #0
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	f000 fcf2 	bl	8007f5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007582:	b580      	push	{r7, lr}
 8007584:	b082      	sub	sp, #8
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2204      	movs	r2, #4
 800758e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007592:	2300      	movs	r3, #0
 8007594:	2200      	movs	r2, #0
 8007596:	2100      	movs	r1, #0
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 fcbe 	bl	8007f1a <USBD_LL_Transmit>

  return USBD_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3708      	adds	r7, #8
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2205      	movs	r2, #5
 80075b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075b8:	2300      	movs	r3, #0
 80075ba:	2200      	movs	r2, #0
 80075bc:	2100      	movs	r1, #0
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 fccc 	bl	8007f5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3708      	adds	r7, #8
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
	...

080075d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80075d4:	2200      	movs	r2, #0
 80075d6:	4912      	ldr	r1, [pc, #72]	; (8007620 <MX_USB_DEVICE_Init+0x50>)
 80075d8:	4812      	ldr	r0, [pc, #72]	; (8007624 <MX_USB_DEVICE_Init+0x54>)
 80075da:	f7fe fec9 	bl	8006370 <USBD_Init>
 80075de:	4603      	mov	r3, r0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d001      	beq.n	80075e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80075e4:	f7f9 fa58 	bl	8000a98 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80075e8:	490f      	ldr	r1, [pc, #60]	; (8007628 <MX_USB_DEVICE_Init+0x58>)
 80075ea:	480e      	ldr	r0, [pc, #56]	; (8007624 <MX_USB_DEVICE_Init+0x54>)
 80075ec:	f7fe fef6 	bl	80063dc <USBD_RegisterClass>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d001      	beq.n	80075fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80075f6:	f7f9 fa4f 	bl	8000a98 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80075fa:	490c      	ldr	r1, [pc, #48]	; (800762c <MX_USB_DEVICE_Init+0x5c>)
 80075fc:	4809      	ldr	r0, [pc, #36]	; (8007624 <MX_USB_DEVICE_Init+0x54>)
 80075fe:	f7fe fe1b 	bl	8006238 <USBD_CDC_RegisterInterface>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d001      	beq.n	800760c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007608:	f7f9 fa46 	bl	8000a98 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800760c:	4805      	ldr	r0, [pc, #20]	; (8007624 <MX_USB_DEVICE_Init+0x54>)
 800760e:	f7fe ff06 	bl	800641e <USBD_Start>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d001      	beq.n	800761c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007618:	f7f9 fa3e 	bl	8000a98 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800761c:	bf00      	nop
 800761e:	bd80      	pop	{r7, pc}
 8007620:	20000138 	.word	0x20000138
 8007624:	200002b8 	.word	0x200002b8
 8007628:	20000018 	.word	0x20000018
 800762c:	20000124 	.word	0x20000124

08007630 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007634:	2200      	movs	r2, #0
 8007636:	4905      	ldr	r1, [pc, #20]	; (800764c <CDC_Init_FS+0x1c>)
 8007638:	4805      	ldr	r0, [pc, #20]	; (8007650 <CDC_Init_FS+0x20>)
 800763a:	f7fe fe12 	bl	8006262 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800763e:	4905      	ldr	r1, [pc, #20]	; (8007654 <CDC_Init_FS+0x24>)
 8007640:	4803      	ldr	r0, [pc, #12]	; (8007650 <CDC_Init_FS+0x20>)
 8007642:	f7fe fe27 	bl	8006294 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007646:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007648:	4618      	mov	r0, r3
 800764a:	bd80      	pop	{r7, pc}
 800764c:	20000d88 	.word	0x20000d88
 8007650:	200002b8 	.word	0x200002b8
 8007654:	20000588 	.word	0x20000588

08007658 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007658:	b480      	push	{r7}
 800765a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800765c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800765e:	4618      	mov	r0, r3
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	4603      	mov	r3, r0
 8007670:	6039      	str	r1, [r7, #0]
 8007672:	71fb      	strb	r3, [r7, #7]
 8007674:	4613      	mov	r3, r2
 8007676:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007678:	79fb      	ldrb	r3, [r7, #7]
 800767a:	2b23      	cmp	r3, #35	; 0x23
 800767c:	d85c      	bhi.n	8007738 <CDC_Control_FS+0xd0>
 800767e:	a201      	add	r2, pc, #4	; (adr r2, 8007684 <CDC_Control_FS+0x1c>)
 8007680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007684:	08007739 	.word	0x08007739
 8007688:	08007739 	.word	0x08007739
 800768c:	08007739 	.word	0x08007739
 8007690:	08007739 	.word	0x08007739
 8007694:	08007739 	.word	0x08007739
 8007698:	08007739 	.word	0x08007739
 800769c:	08007739 	.word	0x08007739
 80076a0:	08007739 	.word	0x08007739
 80076a4:	08007739 	.word	0x08007739
 80076a8:	08007739 	.word	0x08007739
 80076ac:	08007739 	.word	0x08007739
 80076b0:	08007739 	.word	0x08007739
 80076b4:	08007739 	.word	0x08007739
 80076b8:	08007739 	.word	0x08007739
 80076bc:	08007739 	.word	0x08007739
 80076c0:	08007739 	.word	0x08007739
 80076c4:	08007739 	.word	0x08007739
 80076c8:	08007739 	.word	0x08007739
 80076cc:	08007739 	.word	0x08007739
 80076d0:	08007739 	.word	0x08007739
 80076d4:	08007739 	.word	0x08007739
 80076d8:	08007739 	.word	0x08007739
 80076dc:	08007739 	.word	0x08007739
 80076e0:	08007739 	.word	0x08007739
 80076e4:	08007739 	.word	0x08007739
 80076e8:	08007739 	.word	0x08007739
 80076ec:	08007739 	.word	0x08007739
 80076f0:	08007739 	.word	0x08007739
 80076f4:	08007739 	.word	0x08007739
 80076f8:	08007739 	.word	0x08007739
 80076fc:	08007739 	.word	0x08007739
 8007700:	08007739 	.word	0x08007739
 8007704:	08007715 	.word	0x08007715
 8007708:	08007727 	.word	0x08007727
 800770c:	08007739 	.word	0x08007739
 8007710:	08007739 	.word	0x08007739
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy( lineCoding, pbuf, sizeof(lineCoding) ); // <-- add this line
 8007714:	4b0c      	ldr	r3, [pc, #48]	; (8007748 <CDC_Control_FS+0xe0>)
 8007716:	683a      	ldr	r2, [r7, #0]
 8007718:	6810      	ldr	r0, [r2, #0]
 800771a:	6018      	str	r0, [r3, #0]
 800771c:	8891      	ldrh	r1, [r2, #4]
 800771e:	7992      	ldrb	r2, [r2, #6]
 8007720:	8099      	strh	r1, [r3, #4]
 8007722:	719a      	strb	r2, [r3, #6]
    break;
 8007724:	e009      	b.n	800773a <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy( pbuf, lineCoding, sizeof(lineCoding) ); // <-- add this line
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	4a07      	ldr	r2, [pc, #28]	; (8007748 <CDC_Control_FS+0xe0>)
 800772a:	6810      	ldr	r0, [r2, #0]
 800772c:	6018      	str	r0, [r3, #0]
 800772e:	8891      	ldrh	r1, [r2, #4]
 8007730:	7992      	ldrb	r2, [r2, #6]
 8007732:	8099      	strh	r1, [r3, #4]
 8007734:	719a      	strb	r2, [r3, #6]
    break;
 8007736:	e000      	b.n	800773a <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007738:	bf00      	nop
  }

  return (USBD_OK);
 800773a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800773c:	4618      	mov	r0, r3
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr
 8007748:	2000011c 	.word	0x2000011c

0800774c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007756:	6879      	ldr	r1, [r7, #4]
 8007758:	4805      	ldr	r0, [pc, #20]	; (8007770 <CDC_Receive_FS+0x24>)
 800775a:	f7fe fd9b 	bl	8006294 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800775e:	4804      	ldr	r0, [pc, #16]	; (8007770 <CDC_Receive_FS+0x24>)
 8007760:	f7fe fddc 	bl	800631c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007764:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007766:	4618      	mov	r0, r3
 8007768:	3708      	adds	r7, #8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	200002b8 	.word	0x200002b8

08007774 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	460b      	mov	r3, r1
 800777e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007780:	2300      	movs	r3, #0
 8007782:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007784:	4b0d      	ldr	r3, [pc, #52]	; (80077bc <CDC_Transmit_FS+0x48>)
 8007786:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800778a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007792:	2b00      	cmp	r3, #0
 8007794:	d001      	beq.n	800779a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007796:	2301      	movs	r3, #1
 8007798:	e00b      	b.n	80077b2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800779a:	887b      	ldrh	r3, [r7, #2]
 800779c:	461a      	mov	r2, r3
 800779e:	6879      	ldr	r1, [r7, #4]
 80077a0:	4806      	ldr	r0, [pc, #24]	; (80077bc <CDC_Transmit_FS+0x48>)
 80077a2:	f7fe fd5e 	bl	8006262 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80077a6:	4805      	ldr	r0, [pc, #20]	; (80077bc <CDC_Transmit_FS+0x48>)
 80077a8:	f7fe fd88 	bl	80062bc <USBD_CDC_TransmitPacket>
 80077ac:	4603      	mov	r3, r0
 80077ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80077b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	200002b8 	.word	0x200002b8

080077c0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b087      	sub	sp, #28
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	4613      	mov	r3, r2
 80077cc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80077ce:	2300      	movs	r3, #0
 80077d0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80077d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	371c      	adds	r7, #28
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
	...

080077e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	4603      	mov	r3, r0
 80077ec:	6039      	str	r1, [r7, #0]
 80077ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	2212      	movs	r2, #18
 80077f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80077f6:	4b03      	ldr	r3, [pc, #12]	; (8007804 <USBD_FS_DeviceDescriptor+0x20>)
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr
 8007804:	20000158 	.word	0x20000158

08007808 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	4603      	mov	r3, r0
 8007810:	6039      	str	r1, [r7, #0]
 8007812:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	2204      	movs	r2, #4
 8007818:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800781a:	4b03      	ldr	r3, [pc, #12]	; (8007828 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800781c:	4618      	mov	r0, r3
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr
 8007828:	20000178 	.word	0x20000178

0800782c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	4603      	mov	r3, r0
 8007834:	6039      	str	r1, [r7, #0]
 8007836:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007838:	79fb      	ldrb	r3, [r7, #7]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d105      	bne.n	800784a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800783e:	683a      	ldr	r2, [r7, #0]
 8007840:	4907      	ldr	r1, [pc, #28]	; (8007860 <USBD_FS_ProductStrDescriptor+0x34>)
 8007842:	4808      	ldr	r0, [pc, #32]	; (8007864 <USBD_FS_ProductStrDescriptor+0x38>)
 8007844:	f7ff fde3 	bl	800740e <USBD_GetString>
 8007848:	e004      	b.n	8007854 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800784a:	683a      	ldr	r2, [r7, #0]
 800784c:	4904      	ldr	r1, [pc, #16]	; (8007860 <USBD_FS_ProductStrDescriptor+0x34>)
 800784e:	4805      	ldr	r0, [pc, #20]	; (8007864 <USBD_FS_ProductStrDescriptor+0x38>)
 8007850:	f7ff fddd 	bl	800740e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007854:	4b02      	ldr	r3, [pc, #8]	; (8007860 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007856:	4618      	mov	r0, r3
 8007858:	3708      	adds	r7, #8
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	20001588 	.word	0x20001588
 8007864:	08008c18 	.word	0x08008c18

08007868 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	4603      	mov	r3, r0
 8007870:	6039      	str	r1, [r7, #0]
 8007872:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007874:	683a      	ldr	r2, [r7, #0]
 8007876:	4904      	ldr	r1, [pc, #16]	; (8007888 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007878:	4804      	ldr	r0, [pc, #16]	; (800788c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800787a:	f7ff fdc8 	bl	800740e <USBD_GetString>
  return USBD_StrDesc;
 800787e:	4b02      	ldr	r3, [pc, #8]	; (8007888 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007880:	4618      	mov	r0, r3
 8007882:	3708      	adds	r7, #8
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	20001588 	.word	0x20001588
 800788c:	08008c30 	.word	0x08008c30

08007890 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
 8007896:	4603      	mov	r3, r0
 8007898:	6039      	str	r1, [r7, #0]
 800789a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	221a      	movs	r2, #26
 80078a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80078a2:	f000 f855 	bl	8007950 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80078a6:	4b02      	ldr	r3, [pc, #8]	; (80078b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3708      	adds	r7, #8
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	2000017c 	.word	0x2000017c

080078b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	4603      	mov	r3, r0
 80078bc:	6039      	str	r1, [r7, #0]
 80078be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80078c0:	79fb      	ldrb	r3, [r7, #7]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d105      	bne.n	80078d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80078c6:	683a      	ldr	r2, [r7, #0]
 80078c8:	4907      	ldr	r1, [pc, #28]	; (80078e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80078ca:	4808      	ldr	r0, [pc, #32]	; (80078ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80078cc:	f7ff fd9f 	bl	800740e <USBD_GetString>
 80078d0:	e004      	b.n	80078dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80078d2:	683a      	ldr	r2, [r7, #0]
 80078d4:	4904      	ldr	r1, [pc, #16]	; (80078e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80078d6:	4805      	ldr	r0, [pc, #20]	; (80078ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80078d8:	f7ff fd99 	bl	800740e <USBD_GetString>
  }
  return USBD_StrDesc;
 80078dc:	4b02      	ldr	r3, [pc, #8]	; (80078e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3708      	adds	r7, #8
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	20001588 	.word	0x20001588
 80078ec:	08008c44 	.word	0x08008c44

080078f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	4603      	mov	r3, r0
 80078f8:	6039      	str	r1, [r7, #0]
 80078fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078fc:	79fb      	ldrb	r3, [r7, #7]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d105      	bne.n	800790e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007902:	683a      	ldr	r2, [r7, #0]
 8007904:	4907      	ldr	r1, [pc, #28]	; (8007924 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007906:	4808      	ldr	r0, [pc, #32]	; (8007928 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007908:	f7ff fd81 	bl	800740e <USBD_GetString>
 800790c:	e004      	b.n	8007918 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800790e:	683a      	ldr	r2, [r7, #0]
 8007910:	4904      	ldr	r1, [pc, #16]	; (8007924 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007912:	4805      	ldr	r0, [pc, #20]	; (8007928 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007914:	f7ff fd7b 	bl	800740e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007918:	4b02      	ldr	r3, [pc, #8]	; (8007924 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800791a:	4618      	mov	r0, r3
 800791c:	3708      	adds	r7, #8
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	20001588 	.word	0x20001588
 8007928:	08008c50 	.word	0x08008c50

0800792c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	4603      	mov	r3, r0
 8007934:	6039      	str	r1, [r7, #0]
 8007936:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	220c      	movs	r2, #12
 800793c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800793e:	4b03      	ldr	r3, [pc, #12]	; (800794c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007940:	4618      	mov	r0, r3
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr
 800794c:	2000016c 	.word	0x2000016c

08007950 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007956:	4b0f      	ldr	r3, [pc, #60]	; (8007994 <Get_SerialNum+0x44>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800795c:	4b0e      	ldr	r3, [pc, #56]	; (8007998 <Get_SerialNum+0x48>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007962:	4b0e      	ldr	r3, [pc, #56]	; (800799c <Get_SerialNum+0x4c>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007968:	68fa      	ldr	r2, [r7, #12]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4413      	add	r3, r2
 800796e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d009      	beq.n	800798a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007976:	2208      	movs	r2, #8
 8007978:	4909      	ldr	r1, [pc, #36]	; (80079a0 <Get_SerialNum+0x50>)
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f000 f814 	bl	80079a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007980:	2204      	movs	r2, #4
 8007982:	4908      	ldr	r1, [pc, #32]	; (80079a4 <Get_SerialNum+0x54>)
 8007984:	68b8      	ldr	r0, [r7, #8]
 8007986:	f000 f80f 	bl	80079a8 <IntToUnicode>
  }
}
 800798a:	bf00      	nop
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	1fff7a10 	.word	0x1fff7a10
 8007998:	1fff7a14 	.word	0x1fff7a14
 800799c:	1fff7a18 	.word	0x1fff7a18
 80079a0:	2000017e 	.word	0x2000017e
 80079a4:	2000018e 	.word	0x2000018e

080079a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b087      	sub	sp, #28
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	4613      	mov	r3, r2
 80079b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80079b6:	2300      	movs	r3, #0
 80079b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80079ba:	2300      	movs	r3, #0
 80079bc:	75fb      	strb	r3, [r7, #23]
 80079be:	e027      	b.n	8007a10 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	0f1b      	lsrs	r3, r3, #28
 80079c4:	2b09      	cmp	r3, #9
 80079c6:	d80b      	bhi.n	80079e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	0f1b      	lsrs	r3, r3, #28
 80079cc:	b2da      	uxtb	r2, r3
 80079ce:	7dfb      	ldrb	r3, [r7, #23]
 80079d0:	005b      	lsls	r3, r3, #1
 80079d2:	4619      	mov	r1, r3
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	440b      	add	r3, r1
 80079d8:	3230      	adds	r2, #48	; 0x30
 80079da:	b2d2      	uxtb	r2, r2
 80079dc:	701a      	strb	r2, [r3, #0]
 80079de:	e00a      	b.n	80079f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	0f1b      	lsrs	r3, r3, #28
 80079e4:	b2da      	uxtb	r2, r3
 80079e6:	7dfb      	ldrb	r3, [r7, #23]
 80079e8:	005b      	lsls	r3, r3, #1
 80079ea:	4619      	mov	r1, r3
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	440b      	add	r3, r1
 80079f0:	3237      	adds	r2, #55	; 0x37
 80079f2:	b2d2      	uxtb	r2, r2
 80079f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	011b      	lsls	r3, r3, #4
 80079fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80079fc:	7dfb      	ldrb	r3, [r7, #23]
 80079fe:	005b      	lsls	r3, r3, #1
 8007a00:	3301      	adds	r3, #1
 8007a02:	68ba      	ldr	r2, [r7, #8]
 8007a04:	4413      	add	r3, r2
 8007a06:	2200      	movs	r2, #0
 8007a08:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007a0a:	7dfb      	ldrb	r3, [r7, #23]
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	75fb      	strb	r3, [r7, #23]
 8007a10:	7dfa      	ldrb	r2, [r7, #23]
 8007a12:	79fb      	ldrb	r3, [r7, #7]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d3d3      	bcc.n	80079c0 <IntToUnicode+0x18>
  }
}
 8007a18:	bf00      	nop
 8007a1a:	371c      	adds	r7, #28
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b08a      	sub	sp, #40	; 0x28
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a2c:	f107 0314 	add.w	r3, r7, #20
 8007a30:	2200      	movs	r2, #0
 8007a32:	601a      	str	r2, [r3, #0]
 8007a34:	605a      	str	r2, [r3, #4]
 8007a36:	609a      	str	r2, [r3, #8]
 8007a38:	60da      	str	r2, [r3, #12]
 8007a3a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a44:	d13a      	bne.n	8007abc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a46:	2300      	movs	r3, #0
 8007a48:	613b      	str	r3, [r7, #16]
 8007a4a:	4b1e      	ldr	r3, [pc, #120]	; (8007ac4 <HAL_PCD_MspInit+0xa0>)
 8007a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a4e:	4a1d      	ldr	r2, [pc, #116]	; (8007ac4 <HAL_PCD_MspInit+0xa0>)
 8007a50:	f043 0301 	orr.w	r3, r3, #1
 8007a54:	6313      	str	r3, [r2, #48]	; 0x30
 8007a56:	4b1b      	ldr	r3, [pc, #108]	; (8007ac4 <HAL_PCD_MspInit+0xa0>)
 8007a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5a:	f003 0301 	and.w	r3, r3, #1
 8007a5e:	613b      	str	r3, [r7, #16]
 8007a60:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007a62:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a68:	2302      	movs	r3, #2
 8007a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a70:	2303      	movs	r3, #3
 8007a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007a74:	230a      	movs	r3, #10
 8007a76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a78:	f107 0314 	add.w	r3, r7, #20
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	4812      	ldr	r0, [pc, #72]	; (8007ac8 <HAL_PCD_MspInit+0xa4>)
 8007a80:	f7f9 fae2 	bl	8001048 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007a84:	4b0f      	ldr	r3, [pc, #60]	; (8007ac4 <HAL_PCD_MspInit+0xa0>)
 8007a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a88:	4a0e      	ldr	r2, [pc, #56]	; (8007ac4 <HAL_PCD_MspInit+0xa0>)
 8007a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a8e:	6353      	str	r3, [r2, #52]	; 0x34
 8007a90:	2300      	movs	r3, #0
 8007a92:	60fb      	str	r3, [r7, #12]
 8007a94:	4b0b      	ldr	r3, [pc, #44]	; (8007ac4 <HAL_PCD_MspInit+0xa0>)
 8007a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a98:	4a0a      	ldr	r2, [pc, #40]	; (8007ac4 <HAL_PCD_MspInit+0xa0>)
 8007a9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a9e:	6453      	str	r3, [r2, #68]	; 0x44
 8007aa0:	4b08      	ldr	r3, [pc, #32]	; (8007ac4 <HAL_PCD_MspInit+0xa0>)
 8007aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007aa8:	60fb      	str	r3, [r7, #12]
 8007aaa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007aac:	2200      	movs	r2, #0
 8007aae:	2100      	movs	r1, #0
 8007ab0:	2043      	movs	r0, #67	; 0x43
 8007ab2:	f7f9 fa92 	bl	8000fda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007ab6:	2043      	movs	r0, #67	; 0x43
 8007ab8:	f7f9 faab 	bl	8001012 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007abc:	bf00      	nop
 8007abe:	3728      	adds	r7, #40	; 0x28
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	40023800 	.word	0x40023800
 8007ac8:	40020000 	.word	0x40020000

08007acc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b082      	sub	sp, #8
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	4610      	mov	r0, r2
 8007ae4:	f7fe fce6 	bl	80064b4 <USBD_LL_SetupStage>
}
 8007ae8:	bf00      	nop
 8007aea:	3708      	adds	r7, #8
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	460b      	mov	r3, r1
 8007afa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007b02:	78fa      	ldrb	r2, [r7, #3]
 8007b04:	6879      	ldr	r1, [r7, #4]
 8007b06:	4613      	mov	r3, r2
 8007b08:	00db      	lsls	r3, r3, #3
 8007b0a:	1a9b      	subs	r3, r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	440b      	add	r3, r1
 8007b10:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	78fb      	ldrb	r3, [r7, #3]
 8007b18:	4619      	mov	r1, r3
 8007b1a:	f7fe fd1e 	bl	800655a <USBD_LL_DataOutStage>
}
 8007b1e:	bf00      	nop
 8007b20:	3708      	adds	r7, #8
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b082      	sub	sp, #8
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
 8007b2e:	460b      	mov	r3, r1
 8007b30:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007b38:	78fa      	ldrb	r2, [r7, #3]
 8007b3a:	6879      	ldr	r1, [r7, #4]
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	00db      	lsls	r3, r3, #3
 8007b40:	1a9b      	subs	r3, r3, r2
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	440b      	add	r3, r1
 8007b46:	3348      	adds	r3, #72	; 0x48
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	78fb      	ldrb	r3, [r7, #3]
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	f7fe fd67 	bl	8006620 <USBD_LL_DataInStage>
}
 8007b52:	bf00      	nop
 8007b54:	3708      	adds	r7, #8
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b082      	sub	sp, #8
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f7fe fe6b 	bl	8006844 <USBD_LL_SOF>
}
 8007b6e:	bf00      	nop
 8007b70:	3708      	adds	r7, #8
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b084      	sub	sp, #16
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d102      	bne.n	8007b90 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	73fb      	strb	r3, [r7, #15]
 8007b8e:	e008      	b.n	8007ba2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	2b02      	cmp	r3, #2
 8007b96:	d102      	bne.n	8007b9e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	73fb      	strb	r3, [r7, #15]
 8007b9c:	e001      	b.n	8007ba2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007b9e:	f7f8 ff7b 	bl	8000a98 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ba8:	7bfa      	ldrb	r2, [r7, #15]
 8007baa:	4611      	mov	r1, r2
 8007bac:	4618      	mov	r0, r3
 8007bae:	f7fe fe0e 	bl	80067ce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f7fe fdc7 	bl	800674c <USBD_LL_Reset>
}
 8007bbe:	bf00      	nop
 8007bc0:	3710      	adds	r7, #16
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
	...

08007bc8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7fe fe09 	bl	80067ee <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	6812      	ldr	r2, [r2, #0]
 8007bea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007bee:	f043 0301 	orr.w	r3, r3, #1
 8007bf2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6a1b      	ldr	r3, [r3, #32]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d005      	beq.n	8007c08 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007bfc:	4b04      	ldr	r3, [pc, #16]	; (8007c10 <HAL_PCD_SuspendCallback+0x48>)
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	4a03      	ldr	r2, [pc, #12]	; (8007c10 <HAL_PCD_SuspendCallback+0x48>)
 8007c02:	f043 0306 	orr.w	r3, r3, #6
 8007c06:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007c08:	bf00      	nop
 8007c0a:	3708      	adds	r7, #8
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	e000ed00 	.word	0xe000ed00

08007c14 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7fe fdf8 	bl	8006818 <USBD_LL_Resume>
}
 8007c28:	bf00      	nop
 8007c2a:	3708      	adds	r7, #8
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	460b      	mov	r3, r1
 8007c3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c42:	78fa      	ldrb	r2, [r7, #3]
 8007c44:	4611      	mov	r1, r2
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7fe fe23 	bl	8006892 <USBD_LL_IsoOUTIncomplete>
}
 8007c4c:	bf00      	nop
 8007c4e:	3708      	adds	r7, #8
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c66:	78fa      	ldrb	r2, [r7, #3]
 8007c68:	4611      	mov	r1, r2
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7fe fe04 	bl	8006878 <USBD_LL_IsoINIncomplete>
}
 8007c70:	bf00      	nop
 8007c72:	3708      	adds	r7, #8
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7fe fe10 	bl	80068ac <USBD_LL_DevConnected>
}
 8007c8c:	bf00      	nop
 8007c8e:	3708      	adds	r7, #8
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7fe fe0d 	bl	80068c2 <USBD_LL_DevDisconnected>
}
 8007ca8:	bf00      	nop
 8007caa:	3708      	adds	r7, #8
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d13c      	bne.n	8007d3a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007cc0:	4a20      	ldr	r2, [pc, #128]	; (8007d44 <USBD_LL_Init+0x94>)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4a1e      	ldr	r2, [pc, #120]	; (8007d44 <USBD_LL_Init+0x94>)
 8007ccc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007cd0:	4b1c      	ldr	r3, [pc, #112]	; (8007d44 <USBD_LL_Init+0x94>)
 8007cd2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007cd6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007cd8:	4b1a      	ldr	r3, [pc, #104]	; (8007d44 <USBD_LL_Init+0x94>)
 8007cda:	2206      	movs	r2, #6
 8007cdc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007cde:	4b19      	ldr	r3, [pc, #100]	; (8007d44 <USBD_LL_Init+0x94>)
 8007ce0:	2202      	movs	r2, #2
 8007ce2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007ce4:	4b17      	ldr	r3, [pc, #92]	; (8007d44 <USBD_LL_Init+0x94>)
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007cea:	4b16      	ldr	r3, [pc, #88]	; (8007d44 <USBD_LL_Init+0x94>)
 8007cec:	2202      	movs	r2, #2
 8007cee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007cf0:	4b14      	ldr	r3, [pc, #80]	; (8007d44 <USBD_LL_Init+0x94>)
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007cf6:	4b13      	ldr	r3, [pc, #76]	; (8007d44 <USBD_LL_Init+0x94>)
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007cfc:	4b11      	ldr	r3, [pc, #68]	; (8007d44 <USBD_LL_Init+0x94>)
 8007cfe:	2200      	movs	r2, #0
 8007d00:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007d02:	4b10      	ldr	r3, [pc, #64]	; (8007d44 <USBD_LL_Init+0x94>)
 8007d04:	2200      	movs	r2, #0
 8007d06:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007d08:	4b0e      	ldr	r3, [pc, #56]	; (8007d44 <USBD_LL_Init+0x94>)
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007d0e:	480d      	ldr	r0, [pc, #52]	; (8007d44 <USBD_LL_Init+0x94>)
 8007d10:	f7fa fae9 	bl	80022e6 <HAL_PCD_Init>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d001      	beq.n	8007d1e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007d1a:	f7f8 febd 	bl	8000a98 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007d1e:	2180      	movs	r1, #128	; 0x80
 8007d20:	4808      	ldr	r0, [pc, #32]	; (8007d44 <USBD_LL_Init+0x94>)
 8007d22:	f7fb fc7a 	bl	800361a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007d26:	2240      	movs	r2, #64	; 0x40
 8007d28:	2100      	movs	r1, #0
 8007d2a:	4806      	ldr	r0, [pc, #24]	; (8007d44 <USBD_LL_Init+0x94>)
 8007d2c:	f7fb fc2e 	bl	800358c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007d30:	2280      	movs	r2, #128	; 0x80
 8007d32:	2101      	movs	r1, #1
 8007d34:	4803      	ldr	r0, [pc, #12]	; (8007d44 <USBD_LL_Init+0x94>)
 8007d36:	f7fb fc29 	bl	800358c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3708      	adds	r7, #8
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	20001788 	.word	0x20001788

08007d48 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d50:	2300      	movs	r3, #0
 8007d52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d54:	2300      	movs	r3, #0
 8007d56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7fa fbe5 	bl	800252e <HAL_PCD_Start>
 8007d64:	4603      	mov	r3, r0
 8007d66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d68:	7bfb      	ldrb	r3, [r7, #15]
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f000 f978 	bl	8008060 <USBD_Get_USB_Status>
 8007d70:	4603      	mov	r3, r0
 8007d72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d74:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b084      	sub	sp, #16
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
 8007d86:	4608      	mov	r0, r1
 8007d88:	4611      	mov	r1, r2
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	70fb      	strb	r3, [r7, #3]
 8007d90:	460b      	mov	r3, r1
 8007d92:	70bb      	strb	r3, [r7, #2]
 8007d94:	4613      	mov	r3, r2
 8007d96:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007da6:	78bb      	ldrb	r3, [r7, #2]
 8007da8:	883a      	ldrh	r2, [r7, #0]
 8007daa:	78f9      	ldrb	r1, [r7, #3]
 8007dac:	f7fa fff6 	bl	8002d9c <HAL_PCD_EP_Open>
 8007db0:	4603      	mov	r3, r0
 8007db2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007db4:	7bfb      	ldrb	r3, [r7, #15]
 8007db6:	4618      	mov	r0, r3
 8007db8:	f000 f952 	bl	8008060 <USBD_Get_USB_Status>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b084      	sub	sp, #16
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007de4:	78fa      	ldrb	r2, [r7, #3]
 8007de6:	4611      	mov	r1, r2
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7fb f83f 	bl	8002e6c <HAL_PCD_EP_Close>
 8007dee:	4603      	mov	r3, r0
 8007df0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007df2:	7bfb      	ldrb	r3, [r7, #15]
 8007df4:	4618      	mov	r0, r3
 8007df6:	f000 f933 	bl	8008060 <USBD_Get_USB_Status>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dfe:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3710      	adds	r7, #16
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	460b      	mov	r3, r1
 8007e12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e14:	2300      	movs	r3, #0
 8007e16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e22:	78fa      	ldrb	r2, [r7, #3]
 8007e24:	4611      	mov	r1, r2
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7fb f917 	bl	800305a <HAL_PCD_EP_SetStall>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e30:	7bfb      	ldrb	r3, [r7, #15]
 8007e32:	4618      	mov	r0, r3
 8007e34:	f000 f914 	bl	8008060 <USBD_Get_USB_Status>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b084      	sub	sp, #16
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
 8007e4e:	460b      	mov	r3, r1
 8007e50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e52:	2300      	movs	r3, #0
 8007e54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e56:	2300      	movs	r3, #0
 8007e58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e60:	78fa      	ldrb	r2, [r7, #3]
 8007e62:	4611      	mov	r1, r2
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7fb f95c 	bl	8003122 <HAL_PCD_EP_ClrStall>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e6e:	7bfb      	ldrb	r3, [r7, #15]
 8007e70:	4618      	mov	r0, r3
 8007e72:	f000 f8f5 	bl	8008060 <USBD_Get_USB_Status>
 8007e76:	4603      	mov	r3, r0
 8007e78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3710      	adds	r7, #16
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b085      	sub	sp, #20
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e96:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007e98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	da0b      	bge.n	8007eb8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007ea0:	78fb      	ldrb	r3, [r7, #3]
 8007ea2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ea6:	68f9      	ldr	r1, [r7, #12]
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	00db      	lsls	r3, r3, #3
 8007eac:	1a9b      	subs	r3, r3, r2
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	440b      	add	r3, r1
 8007eb2:	333e      	adds	r3, #62	; 0x3e
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	e00b      	b.n	8007ed0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007eb8:	78fb      	ldrb	r3, [r7, #3]
 8007eba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ebe:	68f9      	ldr	r1, [r7, #12]
 8007ec0:	4613      	mov	r3, r2
 8007ec2:	00db      	lsls	r3, r3, #3
 8007ec4:	1a9b      	subs	r3, r3, r2
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	440b      	add	r3, r1
 8007eca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007ece:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3714      	adds	r7, #20
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eec:	2300      	movs	r3, #0
 8007eee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ef6:	78fa      	ldrb	r2, [r7, #3]
 8007ef8:	4611      	mov	r1, r2
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7fa ff29 	bl	8002d52 <HAL_PCD_SetAddress>
 8007f00:	4603      	mov	r3, r0
 8007f02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f04:	7bfb      	ldrb	r3, [r7, #15]
 8007f06:	4618      	mov	r0, r3
 8007f08:	f000 f8aa 	bl	8008060 <USBD_Get_USB_Status>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f10:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b086      	sub	sp, #24
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	60f8      	str	r0, [r7, #12]
 8007f22:	607a      	str	r2, [r7, #4]
 8007f24:	603b      	str	r3, [r7, #0]
 8007f26:	460b      	mov	r3, r1
 8007f28:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007f38:	7af9      	ldrb	r1, [r7, #11]
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	f7fb f842 	bl	8002fc6 <HAL_PCD_EP_Transmit>
 8007f42:	4603      	mov	r3, r0
 8007f44:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f46:	7dfb      	ldrb	r3, [r7, #23]
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f000 f889 	bl	8008060 <USBD_Get_USB_Status>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f52:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3718      	adds	r7, #24
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b086      	sub	sp, #24
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	607a      	str	r2, [r7, #4]
 8007f66:	603b      	str	r3, [r7, #0]
 8007f68:	460b      	mov	r3, r1
 8007f6a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f70:	2300      	movs	r3, #0
 8007f72:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007f7a:	7af9      	ldrb	r1, [r7, #11]
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	f7fa ffbe 	bl	8002f00 <HAL_PCD_EP_Receive>
 8007f84:	4603      	mov	r3, r0
 8007f86:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f88:	7dfb      	ldrb	r3, [r7, #23]
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f000 f868 	bl	8008060 <USBD_Get_USB_Status>
 8007f90:	4603      	mov	r3, r0
 8007f92:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f94:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3718      	adds	r7, #24
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}

08007f9e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f9e:	b580      	push	{r7, lr}
 8007fa0:	b082      	sub	sp, #8
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007fb0:	78fa      	ldrb	r2, [r7, #3]
 8007fb2:	4611      	mov	r1, r2
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7fa ffee 	bl	8002f96 <HAL_PCD_EP_GetRxCount>
 8007fba:	4603      	mov	r3, r0
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3708      	adds	r7, #8
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	460b      	mov	r3, r1
 8007fce:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007fd0:	78fb      	ldrb	r3, [r7, #3]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d002      	beq.n	8007fdc <HAL_PCDEx_LPM_Callback+0x18>
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d01f      	beq.n	800801a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8007fda:	e03b      	b.n	8008054 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a1b      	ldr	r3, [r3, #32]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d007      	beq.n	8007ff4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8007fe4:	f7f8 fc40 	bl	8000868 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007fe8:	4b1c      	ldr	r3, [pc, #112]	; (800805c <HAL_PCDEx_LPM_Callback+0x98>)
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	4a1b      	ldr	r2, [pc, #108]	; (800805c <HAL_PCDEx_LPM_Callback+0x98>)
 8007fee:	f023 0306 	bic.w	r3, r3, #6
 8007ff2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	6812      	ldr	r2, [r2, #0]
 8008002:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008006:	f023 0301 	bic.w	r3, r3, #1
 800800a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008012:	4618      	mov	r0, r3
 8008014:	f7fe fc00 	bl	8006818 <USBD_LL_Resume>
    break;
 8008018:	e01c      	b.n	8008054 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	6812      	ldr	r2, [r2, #0]
 8008028:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800802c:	f043 0301 	orr.w	r3, r3, #1
 8008030:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008038:	4618      	mov	r0, r3
 800803a:	f7fe fbd8 	bl	80067ee <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6a1b      	ldr	r3, [r3, #32]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d005      	beq.n	8008052 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008046:	4b05      	ldr	r3, [pc, #20]	; (800805c <HAL_PCDEx_LPM_Callback+0x98>)
 8008048:	691b      	ldr	r3, [r3, #16]
 800804a:	4a04      	ldr	r2, [pc, #16]	; (800805c <HAL_PCDEx_LPM_Callback+0x98>)
 800804c:	f043 0306 	orr.w	r3, r3, #6
 8008050:	6113      	str	r3, [r2, #16]
    break;
 8008052:	bf00      	nop
}
 8008054:	bf00      	nop
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}
 800805c:	e000ed00 	.word	0xe000ed00

08008060 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008060:	b480      	push	{r7}
 8008062:	b085      	sub	sp, #20
 8008064:	af00      	add	r7, sp, #0
 8008066:	4603      	mov	r3, r0
 8008068:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800806a:	2300      	movs	r3, #0
 800806c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800806e:	79fb      	ldrb	r3, [r7, #7]
 8008070:	2b03      	cmp	r3, #3
 8008072:	d817      	bhi.n	80080a4 <USBD_Get_USB_Status+0x44>
 8008074:	a201      	add	r2, pc, #4	; (adr r2, 800807c <USBD_Get_USB_Status+0x1c>)
 8008076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800807a:	bf00      	nop
 800807c:	0800808d 	.word	0x0800808d
 8008080:	08008093 	.word	0x08008093
 8008084:	08008099 	.word	0x08008099
 8008088:	0800809f 	.word	0x0800809f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800808c:	2300      	movs	r3, #0
 800808e:	73fb      	strb	r3, [r7, #15]
    break;
 8008090:	e00b      	b.n	80080aa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008092:	2303      	movs	r3, #3
 8008094:	73fb      	strb	r3, [r7, #15]
    break;
 8008096:	e008      	b.n	80080aa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008098:	2301      	movs	r3, #1
 800809a:	73fb      	strb	r3, [r7, #15]
    break;
 800809c:	e005      	b.n	80080aa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800809e:	2303      	movs	r3, #3
 80080a0:	73fb      	strb	r3, [r7, #15]
    break;
 80080a2:	e002      	b.n	80080aa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80080a4:	2303      	movs	r3, #3
 80080a6:	73fb      	strb	r3, [r7, #15]
    break;
 80080a8:	bf00      	nop
  }
  return usb_status;
 80080aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3714      	adds	r7, #20
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <pmbus_read>:
 * @brief helper function to debug HAL status.
 * @param error HAL_StatusTypeDef to debug.
 */
static void check_hal_error(HAL_StatusTypeDef error);

static HAL_StatusTypeDef pmbus_read(I2C_HandleTypeDef *hi2c, uint8_t cmd, uint8_t *buffer, uint8_t nbytes) {
 80080b8:	b590      	push	{r4, r7, lr}
 80080ba:	b08b      	sub	sp, #44	; 0x2c
 80080bc:	af04      	add	r7, sp, #16
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	607a      	str	r2, [r7, #4]
 80080c2:	461a      	mov	r2, r3
 80080c4:	460b      	mov	r3, r1
 80080c6:	72fb      	strb	r3, [r7, #11]
 80080c8:	4613      	mov	r3, r2
 80080ca:	72bb      	strb	r3, [r7, #10]
    const uint8_t address = DEVICE_ADDRESS << 1;
 80080cc:	23a2      	movs	r3, #162	; 0xa2
 80080ce:	75fb      	strb	r3, [r7, #23]
    const uint8_t cmd_size = 1;
 80080d0:	2301      	movs	r3, #1
 80080d2:	75bb      	strb	r3, [r7, #22]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, address, cmd, cmd_size, buffer, nbytes, I2C_TIMEOUT*100);
 80080d4:	7dfb      	ldrb	r3, [r7, #23]
 80080d6:	b299      	uxth	r1, r3
 80080d8:	7afb      	ldrb	r3, [r7, #11]
 80080da:	b298      	uxth	r0, r3
 80080dc:	7dbb      	ldrb	r3, [r7, #22]
 80080de:	b29c      	uxth	r4, r3
 80080e0:	7abb      	ldrb	r3, [r7, #10]
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	f242 7210 	movw	r2, #10000	; 0x2710
 80080e8:	9202      	str	r2, [sp, #8]
 80080ea:	9301      	str	r3, [sp, #4]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	9300      	str	r3, [sp, #0]
 80080f0:	4623      	mov	r3, r4
 80080f2:	4602      	mov	r2, r0
 80080f4:	68f8      	ldr	r0, [r7, #12]
 80080f6:	f7f9 fb89 	bl	800180c <HAL_I2C_Mem_Read>
 80080fa:	4603      	mov	r3, r0
 80080fc:	757b      	strb	r3, [r7, #21]

    if (status != HAL_OK) {
 80080fe:	7d7b      	ldrb	r3, [r7, #21]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d005      	beq.n	8008110 <pmbus_read+0x58>
        check_hal_error(status);
 8008104:	7d7b      	ldrb	r3, [r7, #21]
 8008106:	4618      	mov	r0, r3
 8008108:	f000 f807 	bl	800811a <check_hal_error>
        return status;
 800810c:	7d7b      	ldrb	r3, [r7, #21]
 800810e:	e000      	b.n	8008112 <pmbus_read+0x5a>
    }

    return HAL_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	371c      	adds	r7, #28
 8008116:	46bd      	mov	sp, r7
 8008118:	bd90      	pop	{r4, r7, pc}

0800811a <check_hal_error>:
    HAL_StatusTypeDef status = HAL_I2C_Mem_Write(hi2c, address, cmd, cmd_size, buffer, buff_size, I2C_TIMEOUT*10);

    if (status != HAL_OK) check_hal_error(status);
}

static void check_hal_error(HAL_StatusTypeDef error) {
 800811a:	b480      	push	{r7}
 800811c:	b083      	sub	sp, #12
 800811e:	af00      	add	r7, sp, #0
 8008120:	4603      	mov	r3, r0
 8008122:	71fb      	strb	r3, [r7, #7]
    //char msg[16];
    switch (error)
 8008124:	79fb      	ldrb	r3, [r7, #7]
 8008126:	2b02      	cmp	r3, #2
 8008128:	d004      	beq.n	8008134 <check_hal_error+0x1a>
 800812a:	2b03      	cmp	r3, #3
 800812c:	d004      	beq.n	8008138 <check_hal_error+0x1e>
 800812e:	2b01      	cmp	r3, #1
 8008130:	d004      	beq.n	800813c <check_hal_error+0x22>
        //sprintf(msg, "HAL Timeout.\r\n");
        break;

    default:
        // Keep default to ignore warning about HAL_OK case.
        break;
 8008132:	e004      	b.n	800813e <check_hal_error+0x24>
        break;
 8008134:	bf00      	nop
 8008136:	e002      	b.n	800813e <check_hal_error+0x24>
        break;
 8008138:	bf00      	nop
 800813a:	e000      	b.n	800813e <check_hal_error+0x24>
        break;
 800813c:	bf00      	nop
    }
}
 800813e:	bf00      	nop
 8008140:	370c      	adds	r7, #12
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr
	...

0800814c <read_status_cml>:
	}

	return 1; // Error
}

void read_status_cml(I2C_HandleTypeDef *hi2c) {
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
    uint8_t buffer[1] = {0};
 8008154:	2300      	movs	r3, #0
 8008156:	733b      	strb	r3, [r7, #12]
    HAL_StatusTypeDef status = pmbus_read(hi2c, VICOR_CMD_STATUS_CML, buffer, 1);
 8008158:	f107 020c 	add.w	r2, r7, #12
 800815c:	2301      	movs	r3, #1
 800815e:	217e      	movs	r1, #126	; 0x7e
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f7ff ffa9 	bl	80080b8 <pmbus_read>
 8008166:	4603      	mov	r3, r0
 8008168:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800816a:	7bfb      	ldrb	r3, [r7, #15]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d103      	bne.n	8008178 <read_status_cml+0x2c>
    {
        bcm.status_cml.all = buffer[0];
 8008170:	7b3a      	ldrb	r2, [r7, #12]
 8008172:	4b03      	ldr	r3, [pc, #12]	; (8008180 <read_status_cml+0x34>)
 8008174:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    }
}
 8008178:	bf00      	nop
 800817a:	3710      	adds	r7, #16
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	20001b90 	.word	0x20001b90

08008184 <read_page>:
    {
        bcm.measurements.vout = (buffer[1] << 8) | buffer[0];
    }
}

void read_page(I2C_HandleTypeDef *hi2c) {
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
	uint8_t buffer[1];
	pmbus_read(hi2c, VICOR_CMD_PAGE, buffer, 1);
 800818c:	f107 020c 	add.w	r2, r7, #12
 8008190:	2301      	movs	r3, #1
 8008192:	2100      	movs	r1, #0
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f7ff ff8f 	bl	80080b8 <pmbus_read>
	bcm.page = buffer[0];
 800819a:	7b3a      	ldrb	r2, [r7, #12]
 800819c:	4b02      	ldr	r3, [pc, #8]	; (80081a8 <read_page+0x24>)
 800819e:	701a      	strb	r2, [r3, #0]
}
 80081a0:	bf00      	nop
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	20001b90 	.word	0x20001b90

080081ac <write_page>:

void write_page(I2C_HandleTypeDef *hi2c, uint8_t value) {
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b086      	sub	sp, #24
 80081b0:	af02      	add	r7, sp, #8
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	460b      	mov	r3, r1
 80081b6:	70fb      	strb	r3, [r7, #3]
	const uint8_t address = DEVICE_ADDRESS << 1;
 80081b8:	23a2      	movs	r3, #162	; 0xa2
 80081ba:	73fb      	strb	r3, [r7, #15]
	uint8_t buffer[2] = {VICOR_CMD_PAGE, value};
 80081bc:	2300      	movs	r3, #0
 80081be:	733b      	strb	r3, [r7, #12]
 80081c0:	78fb      	ldrb	r3, [r7, #3]
 80081c2:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c, address, buffer, 2, I2C_TIMEOUT);
 80081c4:	7bfb      	ldrb	r3, [r7, #15]
 80081c6:	b299      	uxth	r1, r3
 80081c8:	f107 020c 	add.w	r2, r7, #12
 80081cc:	2364      	movs	r3, #100	; 0x64
 80081ce:	9300      	str	r3, [sp, #0]
 80081d0:	2302      	movs	r3, #2
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f7f9 fa1c 	bl	8001610 <HAL_I2C_Master_Transmit>
}
 80081d8:	bf00      	nop
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <write_operation>:

void write_operation(I2C_HandleTypeDef *hi2c, uint8_t value){
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b086      	sub	sp, #24
 80081e4:	af02      	add	r7, sp, #8
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	460b      	mov	r3, r1
 80081ea:	70fb      	strb	r3, [r7, #3]
	const uint8_t address = DEVICE_ADDRESS << 1;
 80081ec:	23a2      	movs	r3, #162	; 0xa2
 80081ee:	73fb      	strb	r3, [r7, #15]
	uint8_t buffer[2] = {VICOR_CMD_OPERATION, value};
 80081f0:	2301      	movs	r3, #1
 80081f2:	733b      	strb	r3, [r7, #12]
 80081f4:	78fb      	ldrb	r3, [r7, #3]
 80081f6:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c, address, buffer, 2, I2C_TIMEOUT);
 80081f8:	7bfb      	ldrb	r3, [r7, #15]
 80081fa:	b299      	uxth	r1, r3
 80081fc:	f107 020c 	add.w	r2, r7, #12
 8008200:	2364      	movs	r3, #100	; 0x64
 8008202:	9300      	str	r3, [sp, #0]
 8008204:	2302      	movs	r3, #2
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f7f9 fa02 	bl	8001610 <HAL_I2C_Master_Transmit>
}
 800820c:	bf00      	nop
 800820e:	3710      	adds	r7, #16
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <read_operation>:

HAL_StatusTypeDef read_operation(I2C_HandleTypeDef *hi2c) {
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
	uint8_t buffer[1];
	HAL_StatusTypeDef status = pmbus_read(hi2c, VICOR_CMD_OPERATION, buffer, 1);
 800821c:	f107 020c 	add.w	r2, r7, #12
 8008220:	2301      	movs	r3, #1
 8008222:	2101      	movs	r1, #1
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f7ff ff47 	bl	80080b8 <pmbus_read>
 800822a:	4603      	mov	r3, r0
 800822c:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK)
 800822e:	7bfb      	ldrb	r3, [r7, #15]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d104      	bne.n	800823e <read_operation+0x2a>
	{
		bcm.operation = buffer[0];
 8008234:	7b3a      	ldrb	r2, [r7, #12]
 8008236:	4b04      	ldr	r3, [pc, #16]	; (8008248 <read_operation+0x34>)
 8008238:	705a      	strb	r2, [r3, #1]
		return HAL_OK;
 800823a:	2300      	movs	r3, #0
 800823c:	e000      	b.n	8008240 <read_operation+0x2c>
	}
	return status;
 800823e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008240:	4618      	mov	r0, r3
 8008242:	3710      	adds	r7, #16
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}
 8008248:	20001b90 	.word	0x20001b90

0800824c <clear_faults>:
// Persistent or active faults are re-asserted again once cleared.
//  All faults are latched once asserted in the BCM controller. Registered
// faults will not be cleared when shutting down the BCM
// powertrain by recycling the BCM high side voltage or sending
// the OPERATION command
void clear_faults(I2C_HandleTypeDef *hi2c) {
 800824c:	b580      	push	{r7, lr}
 800824e:	b086      	sub	sp, #24
 8008250:	af02      	add	r7, sp, #8
 8008252:	6078      	str	r0, [r7, #4]
    uint8_t buffer[1] = {VICOR_CMD_CLEAR_FAULTS};
 8008254:	2303      	movs	r3, #3
 8008256:	733b      	strb	r3, [r7, #12]
    const uint8_t address = DEVICE_ADDRESS << 1;
 8008258:	23a2      	movs	r3, #162	; 0xa2
 800825a:	73fb      	strb	r3, [r7, #15]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(hi2c, address, buffer, 1, I2C_TIMEOUT);
 800825c:	7bfb      	ldrb	r3, [r7, #15]
 800825e:	b299      	uxth	r1, r3
 8008260:	f107 020c 	add.w	r2, r7, #12
 8008264:	2364      	movs	r3, #100	; 0x64
 8008266:	9300      	str	r3, [sp, #0]
 8008268:	2301      	movs	r3, #1
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f7f9 f9d0 	bl	8001610 <HAL_I2C_Master_Transmit>
 8008270:	4603      	mov	r3, r0
 8008272:	73bb      	strb	r3, [r7, #14]

    if (status != HAL_OK) check_hal_error(status);
 8008274:	7bbb      	ldrb	r3, [r7, #14]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d003      	beq.n	8008282 <clear_faults+0x36>
 800827a:	7bbb      	ldrb	r3, [r7, #14]
 800827c:	4618      	mov	r0, r3
 800827e:	f7ff ff4c 	bl	800811a <check_hal_error>
}
 8008282:	bf00      	nop
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
	...

0800828c <__errno>:
 800828c:	4b01      	ldr	r3, [pc, #4]	; (8008294 <__errno+0x8>)
 800828e:	6818      	ldr	r0, [r3, #0]
 8008290:	4770      	bx	lr
 8008292:	bf00      	nop
 8008294:	20000198 	.word	0x20000198

08008298 <__libc_init_array>:
 8008298:	b570      	push	{r4, r5, r6, lr}
 800829a:	4e0d      	ldr	r6, [pc, #52]	; (80082d0 <__libc_init_array+0x38>)
 800829c:	4c0d      	ldr	r4, [pc, #52]	; (80082d4 <__libc_init_array+0x3c>)
 800829e:	1ba4      	subs	r4, r4, r6
 80082a0:	10a4      	asrs	r4, r4, #2
 80082a2:	2500      	movs	r5, #0
 80082a4:	42a5      	cmp	r5, r4
 80082a6:	d109      	bne.n	80082bc <__libc_init_array+0x24>
 80082a8:	4e0b      	ldr	r6, [pc, #44]	; (80082d8 <__libc_init_array+0x40>)
 80082aa:	4c0c      	ldr	r4, [pc, #48]	; (80082dc <__libc_init_array+0x44>)
 80082ac:	f000 fc38 	bl	8008b20 <_init>
 80082b0:	1ba4      	subs	r4, r4, r6
 80082b2:	10a4      	asrs	r4, r4, #2
 80082b4:	2500      	movs	r5, #0
 80082b6:	42a5      	cmp	r5, r4
 80082b8:	d105      	bne.n	80082c6 <__libc_init_array+0x2e>
 80082ba:	bd70      	pop	{r4, r5, r6, pc}
 80082bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80082c0:	4798      	blx	r3
 80082c2:	3501      	adds	r5, #1
 80082c4:	e7ee      	b.n	80082a4 <__libc_init_array+0xc>
 80082c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80082ca:	4798      	blx	r3
 80082cc:	3501      	adds	r5, #1
 80082ce:	e7f2      	b.n	80082b6 <__libc_init_array+0x1e>
 80082d0:	08008cb4 	.word	0x08008cb4
 80082d4:	08008cb4 	.word	0x08008cb4
 80082d8:	08008cb4 	.word	0x08008cb4
 80082dc:	08008cb8 	.word	0x08008cb8

080082e0 <malloc>:
 80082e0:	4b02      	ldr	r3, [pc, #8]	; (80082ec <malloc+0xc>)
 80082e2:	4601      	mov	r1, r0
 80082e4:	6818      	ldr	r0, [r3, #0]
 80082e6:	f000 b86d 	b.w	80083c4 <_malloc_r>
 80082ea:	bf00      	nop
 80082ec:	20000198 	.word	0x20000198

080082f0 <free>:
 80082f0:	4b02      	ldr	r3, [pc, #8]	; (80082fc <free+0xc>)
 80082f2:	4601      	mov	r1, r0
 80082f4:	6818      	ldr	r0, [r3, #0]
 80082f6:	f000 b817 	b.w	8008328 <_free_r>
 80082fa:	bf00      	nop
 80082fc:	20000198 	.word	0x20000198

08008300 <memcpy>:
 8008300:	b510      	push	{r4, lr}
 8008302:	1e43      	subs	r3, r0, #1
 8008304:	440a      	add	r2, r1
 8008306:	4291      	cmp	r1, r2
 8008308:	d100      	bne.n	800830c <memcpy+0xc>
 800830a:	bd10      	pop	{r4, pc}
 800830c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008310:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008314:	e7f7      	b.n	8008306 <memcpy+0x6>

08008316 <memset>:
 8008316:	4402      	add	r2, r0
 8008318:	4603      	mov	r3, r0
 800831a:	4293      	cmp	r3, r2
 800831c:	d100      	bne.n	8008320 <memset+0xa>
 800831e:	4770      	bx	lr
 8008320:	f803 1b01 	strb.w	r1, [r3], #1
 8008324:	e7f9      	b.n	800831a <memset+0x4>
	...

08008328 <_free_r>:
 8008328:	b538      	push	{r3, r4, r5, lr}
 800832a:	4605      	mov	r5, r0
 800832c:	2900      	cmp	r1, #0
 800832e:	d045      	beq.n	80083bc <_free_r+0x94>
 8008330:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008334:	1f0c      	subs	r4, r1, #4
 8008336:	2b00      	cmp	r3, #0
 8008338:	bfb8      	it	lt
 800833a:	18e4      	addlt	r4, r4, r3
 800833c:	f000 f8cc 	bl	80084d8 <__malloc_lock>
 8008340:	4a1f      	ldr	r2, [pc, #124]	; (80083c0 <_free_r+0x98>)
 8008342:	6813      	ldr	r3, [r2, #0]
 8008344:	4610      	mov	r0, r2
 8008346:	b933      	cbnz	r3, 8008356 <_free_r+0x2e>
 8008348:	6063      	str	r3, [r4, #4]
 800834a:	6014      	str	r4, [r2, #0]
 800834c:	4628      	mov	r0, r5
 800834e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008352:	f000 b8c2 	b.w	80084da <__malloc_unlock>
 8008356:	42a3      	cmp	r3, r4
 8008358:	d90c      	bls.n	8008374 <_free_r+0x4c>
 800835a:	6821      	ldr	r1, [r4, #0]
 800835c:	1862      	adds	r2, r4, r1
 800835e:	4293      	cmp	r3, r2
 8008360:	bf04      	itt	eq
 8008362:	681a      	ldreq	r2, [r3, #0]
 8008364:	685b      	ldreq	r3, [r3, #4]
 8008366:	6063      	str	r3, [r4, #4]
 8008368:	bf04      	itt	eq
 800836a:	1852      	addeq	r2, r2, r1
 800836c:	6022      	streq	r2, [r4, #0]
 800836e:	6004      	str	r4, [r0, #0]
 8008370:	e7ec      	b.n	800834c <_free_r+0x24>
 8008372:	4613      	mov	r3, r2
 8008374:	685a      	ldr	r2, [r3, #4]
 8008376:	b10a      	cbz	r2, 800837c <_free_r+0x54>
 8008378:	42a2      	cmp	r2, r4
 800837a:	d9fa      	bls.n	8008372 <_free_r+0x4a>
 800837c:	6819      	ldr	r1, [r3, #0]
 800837e:	1858      	adds	r0, r3, r1
 8008380:	42a0      	cmp	r0, r4
 8008382:	d10b      	bne.n	800839c <_free_r+0x74>
 8008384:	6820      	ldr	r0, [r4, #0]
 8008386:	4401      	add	r1, r0
 8008388:	1858      	adds	r0, r3, r1
 800838a:	4282      	cmp	r2, r0
 800838c:	6019      	str	r1, [r3, #0]
 800838e:	d1dd      	bne.n	800834c <_free_r+0x24>
 8008390:	6810      	ldr	r0, [r2, #0]
 8008392:	6852      	ldr	r2, [r2, #4]
 8008394:	605a      	str	r2, [r3, #4]
 8008396:	4401      	add	r1, r0
 8008398:	6019      	str	r1, [r3, #0]
 800839a:	e7d7      	b.n	800834c <_free_r+0x24>
 800839c:	d902      	bls.n	80083a4 <_free_r+0x7c>
 800839e:	230c      	movs	r3, #12
 80083a0:	602b      	str	r3, [r5, #0]
 80083a2:	e7d3      	b.n	800834c <_free_r+0x24>
 80083a4:	6820      	ldr	r0, [r4, #0]
 80083a6:	1821      	adds	r1, r4, r0
 80083a8:	428a      	cmp	r2, r1
 80083aa:	bf04      	itt	eq
 80083ac:	6811      	ldreq	r1, [r2, #0]
 80083ae:	6852      	ldreq	r2, [r2, #4]
 80083b0:	6062      	str	r2, [r4, #4]
 80083b2:	bf04      	itt	eq
 80083b4:	1809      	addeq	r1, r1, r0
 80083b6:	6021      	streq	r1, [r4, #0]
 80083b8:	605c      	str	r4, [r3, #4]
 80083ba:	e7c7      	b.n	800834c <_free_r+0x24>
 80083bc:	bd38      	pop	{r3, r4, r5, pc}
 80083be:	bf00      	nop
 80083c0:	20000220 	.word	0x20000220

080083c4 <_malloc_r>:
 80083c4:	b570      	push	{r4, r5, r6, lr}
 80083c6:	1ccd      	adds	r5, r1, #3
 80083c8:	f025 0503 	bic.w	r5, r5, #3
 80083cc:	3508      	adds	r5, #8
 80083ce:	2d0c      	cmp	r5, #12
 80083d0:	bf38      	it	cc
 80083d2:	250c      	movcc	r5, #12
 80083d4:	2d00      	cmp	r5, #0
 80083d6:	4606      	mov	r6, r0
 80083d8:	db01      	blt.n	80083de <_malloc_r+0x1a>
 80083da:	42a9      	cmp	r1, r5
 80083dc:	d903      	bls.n	80083e6 <_malloc_r+0x22>
 80083de:	230c      	movs	r3, #12
 80083e0:	6033      	str	r3, [r6, #0]
 80083e2:	2000      	movs	r0, #0
 80083e4:	bd70      	pop	{r4, r5, r6, pc}
 80083e6:	f000 f877 	bl	80084d8 <__malloc_lock>
 80083ea:	4a21      	ldr	r2, [pc, #132]	; (8008470 <_malloc_r+0xac>)
 80083ec:	6814      	ldr	r4, [r2, #0]
 80083ee:	4621      	mov	r1, r4
 80083f0:	b991      	cbnz	r1, 8008418 <_malloc_r+0x54>
 80083f2:	4c20      	ldr	r4, [pc, #128]	; (8008474 <_malloc_r+0xb0>)
 80083f4:	6823      	ldr	r3, [r4, #0]
 80083f6:	b91b      	cbnz	r3, 8008400 <_malloc_r+0x3c>
 80083f8:	4630      	mov	r0, r6
 80083fa:	f000 f83d 	bl	8008478 <_sbrk_r>
 80083fe:	6020      	str	r0, [r4, #0]
 8008400:	4629      	mov	r1, r5
 8008402:	4630      	mov	r0, r6
 8008404:	f000 f838 	bl	8008478 <_sbrk_r>
 8008408:	1c43      	adds	r3, r0, #1
 800840a:	d124      	bne.n	8008456 <_malloc_r+0x92>
 800840c:	230c      	movs	r3, #12
 800840e:	6033      	str	r3, [r6, #0]
 8008410:	4630      	mov	r0, r6
 8008412:	f000 f862 	bl	80084da <__malloc_unlock>
 8008416:	e7e4      	b.n	80083e2 <_malloc_r+0x1e>
 8008418:	680b      	ldr	r3, [r1, #0]
 800841a:	1b5b      	subs	r3, r3, r5
 800841c:	d418      	bmi.n	8008450 <_malloc_r+0x8c>
 800841e:	2b0b      	cmp	r3, #11
 8008420:	d90f      	bls.n	8008442 <_malloc_r+0x7e>
 8008422:	600b      	str	r3, [r1, #0]
 8008424:	50cd      	str	r5, [r1, r3]
 8008426:	18cc      	adds	r4, r1, r3
 8008428:	4630      	mov	r0, r6
 800842a:	f000 f856 	bl	80084da <__malloc_unlock>
 800842e:	f104 000b 	add.w	r0, r4, #11
 8008432:	1d23      	adds	r3, r4, #4
 8008434:	f020 0007 	bic.w	r0, r0, #7
 8008438:	1ac3      	subs	r3, r0, r3
 800843a:	d0d3      	beq.n	80083e4 <_malloc_r+0x20>
 800843c:	425a      	negs	r2, r3
 800843e:	50e2      	str	r2, [r4, r3]
 8008440:	e7d0      	b.n	80083e4 <_malloc_r+0x20>
 8008442:	428c      	cmp	r4, r1
 8008444:	684b      	ldr	r3, [r1, #4]
 8008446:	bf16      	itet	ne
 8008448:	6063      	strne	r3, [r4, #4]
 800844a:	6013      	streq	r3, [r2, #0]
 800844c:	460c      	movne	r4, r1
 800844e:	e7eb      	b.n	8008428 <_malloc_r+0x64>
 8008450:	460c      	mov	r4, r1
 8008452:	6849      	ldr	r1, [r1, #4]
 8008454:	e7cc      	b.n	80083f0 <_malloc_r+0x2c>
 8008456:	1cc4      	adds	r4, r0, #3
 8008458:	f024 0403 	bic.w	r4, r4, #3
 800845c:	42a0      	cmp	r0, r4
 800845e:	d005      	beq.n	800846c <_malloc_r+0xa8>
 8008460:	1a21      	subs	r1, r4, r0
 8008462:	4630      	mov	r0, r6
 8008464:	f000 f808 	bl	8008478 <_sbrk_r>
 8008468:	3001      	adds	r0, #1
 800846a:	d0cf      	beq.n	800840c <_malloc_r+0x48>
 800846c:	6025      	str	r5, [r4, #0]
 800846e:	e7db      	b.n	8008428 <_malloc_r+0x64>
 8008470:	20000220 	.word	0x20000220
 8008474:	20000224 	.word	0x20000224

08008478 <_sbrk_r>:
 8008478:	b538      	push	{r3, r4, r5, lr}
 800847a:	4c06      	ldr	r4, [pc, #24]	; (8008494 <_sbrk_r+0x1c>)
 800847c:	2300      	movs	r3, #0
 800847e:	4605      	mov	r5, r0
 8008480:	4608      	mov	r0, r1
 8008482:	6023      	str	r3, [r4, #0]
 8008484:	f7f8 fbc4 	bl	8000c10 <_sbrk>
 8008488:	1c43      	adds	r3, r0, #1
 800848a:	d102      	bne.n	8008492 <_sbrk_r+0x1a>
 800848c:	6823      	ldr	r3, [r4, #0]
 800848e:	b103      	cbz	r3, 8008492 <_sbrk_r+0x1a>
 8008490:	602b      	str	r3, [r5, #0]
 8008492:	bd38      	pop	{r3, r4, r5, pc}
 8008494:	20001bf8 	.word	0x20001bf8

08008498 <siprintf>:
 8008498:	b40e      	push	{r1, r2, r3}
 800849a:	b500      	push	{lr}
 800849c:	b09c      	sub	sp, #112	; 0x70
 800849e:	ab1d      	add	r3, sp, #116	; 0x74
 80084a0:	9002      	str	r0, [sp, #8]
 80084a2:	9006      	str	r0, [sp, #24]
 80084a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80084a8:	4809      	ldr	r0, [pc, #36]	; (80084d0 <siprintf+0x38>)
 80084aa:	9107      	str	r1, [sp, #28]
 80084ac:	9104      	str	r1, [sp, #16]
 80084ae:	4909      	ldr	r1, [pc, #36]	; (80084d4 <siprintf+0x3c>)
 80084b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80084b4:	9105      	str	r1, [sp, #20]
 80084b6:	6800      	ldr	r0, [r0, #0]
 80084b8:	9301      	str	r3, [sp, #4]
 80084ba:	a902      	add	r1, sp, #8
 80084bc:	f000 f868 	bl	8008590 <_svfiprintf_r>
 80084c0:	9b02      	ldr	r3, [sp, #8]
 80084c2:	2200      	movs	r2, #0
 80084c4:	701a      	strb	r2, [r3, #0]
 80084c6:	b01c      	add	sp, #112	; 0x70
 80084c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80084cc:	b003      	add	sp, #12
 80084ce:	4770      	bx	lr
 80084d0:	20000198 	.word	0x20000198
 80084d4:	ffff0208 	.word	0xffff0208

080084d8 <__malloc_lock>:
 80084d8:	4770      	bx	lr

080084da <__malloc_unlock>:
 80084da:	4770      	bx	lr

080084dc <__ssputs_r>:
 80084dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084e0:	688e      	ldr	r6, [r1, #8]
 80084e2:	429e      	cmp	r6, r3
 80084e4:	4682      	mov	sl, r0
 80084e6:	460c      	mov	r4, r1
 80084e8:	4690      	mov	r8, r2
 80084ea:	4699      	mov	r9, r3
 80084ec:	d837      	bhi.n	800855e <__ssputs_r+0x82>
 80084ee:	898a      	ldrh	r2, [r1, #12]
 80084f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80084f4:	d031      	beq.n	800855a <__ssputs_r+0x7e>
 80084f6:	6825      	ldr	r5, [r4, #0]
 80084f8:	6909      	ldr	r1, [r1, #16]
 80084fa:	1a6f      	subs	r7, r5, r1
 80084fc:	6965      	ldr	r5, [r4, #20]
 80084fe:	2302      	movs	r3, #2
 8008500:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008504:	fb95 f5f3 	sdiv	r5, r5, r3
 8008508:	f109 0301 	add.w	r3, r9, #1
 800850c:	443b      	add	r3, r7
 800850e:	429d      	cmp	r5, r3
 8008510:	bf38      	it	cc
 8008512:	461d      	movcc	r5, r3
 8008514:	0553      	lsls	r3, r2, #21
 8008516:	d530      	bpl.n	800857a <__ssputs_r+0x9e>
 8008518:	4629      	mov	r1, r5
 800851a:	f7ff ff53 	bl	80083c4 <_malloc_r>
 800851e:	4606      	mov	r6, r0
 8008520:	b950      	cbnz	r0, 8008538 <__ssputs_r+0x5c>
 8008522:	230c      	movs	r3, #12
 8008524:	f8ca 3000 	str.w	r3, [sl]
 8008528:	89a3      	ldrh	r3, [r4, #12]
 800852a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800852e:	81a3      	strh	r3, [r4, #12]
 8008530:	f04f 30ff 	mov.w	r0, #4294967295
 8008534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008538:	463a      	mov	r2, r7
 800853a:	6921      	ldr	r1, [r4, #16]
 800853c:	f7ff fee0 	bl	8008300 <memcpy>
 8008540:	89a3      	ldrh	r3, [r4, #12]
 8008542:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800854a:	81a3      	strh	r3, [r4, #12]
 800854c:	6126      	str	r6, [r4, #16]
 800854e:	6165      	str	r5, [r4, #20]
 8008550:	443e      	add	r6, r7
 8008552:	1bed      	subs	r5, r5, r7
 8008554:	6026      	str	r6, [r4, #0]
 8008556:	60a5      	str	r5, [r4, #8]
 8008558:	464e      	mov	r6, r9
 800855a:	454e      	cmp	r6, r9
 800855c:	d900      	bls.n	8008560 <__ssputs_r+0x84>
 800855e:	464e      	mov	r6, r9
 8008560:	4632      	mov	r2, r6
 8008562:	4641      	mov	r1, r8
 8008564:	6820      	ldr	r0, [r4, #0]
 8008566:	f000 fa93 	bl	8008a90 <memmove>
 800856a:	68a3      	ldr	r3, [r4, #8]
 800856c:	1b9b      	subs	r3, r3, r6
 800856e:	60a3      	str	r3, [r4, #8]
 8008570:	6823      	ldr	r3, [r4, #0]
 8008572:	441e      	add	r6, r3
 8008574:	6026      	str	r6, [r4, #0]
 8008576:	2000      	movs	r0, #0
 8008578:	e7dc      	b.n	8008534 <__ssputs_r+0x58>
 800857a:	462a      	mov	r2, r5
 800857c:	f000 faa1 	bl	8008ac2 <_realloc_r>
 8008580:	4606      	mov	r6, r0
 8008582:	2800      	cmp	r0, #0
 8008584:	d1e2      	bne.n	800854c <__ssputs_r+0x70>
 8008586:	6921      	ldr	r1, [r4, #16]
 8008588:	4650      	mov	r0, sl
 800858a:	f7ff fecd 	bl	8008328 <_free_r>
 800858e:	e7c8      	b.n	8008522 <__ssputs_r+0x46>

08008590 <_svfiprintf_r>:
 8008590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008594:	461d      	mov	r5, r3
 8008596:	898b      	ldrh	r3, [r1, #12]
 8008598:	061f      	lsls	r7, r3, #24
 800859a:	b09d      	sub	sp, #116	; 0x74
 800859c:	4680      	mov	r8, r0
 800859e:	460c      	mov	r4, r1
 80085a0:	4616      	mov	r6, r2
 80085a2:	d50f      	bpl.n	80085c4 <_svfiprintf_r+0x34>
 80085a4:	690b      	ldr	r3, [r1, #16]
 80085a6:	b96b      	cbnz	r3, 80085c4 <_svfiprintf_r+0x34>
 80085a8:	2140      	movs	r1, #64	; 0x40
 80085aa:	f7ff ff0b 	bl	80083c4 <_malloc_r>
 80085ae:	6020      	str	r0, [r4, #0]
 80085b0:	6120      	str	r0, [r4, #16]
 80085b2:	b928      	cbnz	r0, 80085c0 <_svfiprintf_r+0x30>
 80085b4:	230c      	movs	r3, #12
 80085b6:	f8c8 3000 	str.w	r3, [r8]
 80085ba:	f04f 30ff 	mov.w	r0, #4294967295
 80085be:	e0c8      	b.n	8008752 <_svfiprintf_r+0x1c2>
 80085c0:	2340      	movs	r3, #64	; 0x40
 80085c2:	6163      	str	r3, [r4, #20]
 80085c4:	2300      	movs	r3, #0
 80085c6:	9309      	str	r3, [sp, #36]	; 0x24
 80085c8:	2320      	movs	r3, #32
 80085ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085ce:	2330      	movs	r3, #48	; 0x30
 80085d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085d4:	9503      	str	r5, [sp, #12]
 80085d6:	f04f 0b01 	mov.w	fp, #1
 80085da:	4637      	mov	r7, r6
 80085dc:	463d      	mov	r5, r7
 80085de:	f815 3b01 	ldrb.w	r3, [r5], #1
 80085e2:	b10b      	cbz	r3, 80085e8 <_svfiprintf_r+0x58>
 80085e4:	2b25      	cmp	r3, #37	; 0x25
 80085e6:	d13e      	bne.n	8008666 <_svfiprintf_r+0xd6>
 80085e8:	ebb7 0a06 	subs.w	sl, r7, r6
 80085ec:	d00b      	beq.n	8008606 <_svfiprintf_r+0x76>
 80085ee:	4653      	mov	r3, sl
 80085f0:	4632      	mov	r2, r6
 80085f2:	4621      	mov	r1, r4
 80085f4:	4640      	mov	r0, r8
 80085f6:	f7ff ff71 	bl	80084dc <__ssputs_r>
 80085fa:	3001      	adds	r0, #1
 80085fc:	f000 80a4 	beq.w	8008748 <_svfiprintf_r+0x1b8>
 8008600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008602:	4453      	add	r3, sl
 8008604:	9309      	str	r3, [sp, #36]	; 0x24
 8008606:	783b      	ldrb	r3, [r7, #0]
 8008608:	2b00      	cmp	r3, #0
 800860a:	f000 809d 	beq.w	8008748 <_svfiprintf_r+0x1b8>
 800860e:	2300      	movs	r3, #0
 8008610:	f04f 32ff 	mov.w	r2, #4294967295
 8008614:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008618:	9304      	str	r3, [sp, #16]
 800861a:	9307      	str	r3, [sp, #28]
 800861c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008620:	931a      	str	r3, [sp, #104]	; 0x68
 8008622:	462f      	mov	r7, r5
 8008624:	2205      	movs	r2, #5
 8008626:	f817 1b01 	ldrb.w	r1, [r7], #1
 800862a:	4850      	ldr	r0, [pc, #320]	; (800876c <_svfiprintf_r+0x1dc>)
 800862c:	f7f7 fdf8 	bl	8000220 <memchr>
 8008630:	9b04      	ldr	r3, [sp, #16]
 8008632:	b9d0      	cbnz	r0, 800866a <_svfiprintf_r+0xda>
 8008634:	06d9      	lsls	r1, r3, #27
 8008636:	bf44      	itt	mi
 8008638:	2220      	movmi	r2, #32
 800863a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800863e:	071a      	lsls	r2, r3, #28
 8008640:	bf44      	itt	mi
 8008642:	222b      	movmi	r2, #43	; 0x2b
 8008644:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008648:	782a      	ldrb	r2, [r5, #0]
 800864a:	2a2a      	cmp	r2, #42	; 0x2a
 800864c:	d015      	beq.n	800867a <_svfiprintf_r+0xea>
 800864e:	9a07      	ldr	r2, [sp, #28]
 8008650:	462f      	mov	r7, r5
 8008652:	2000      	movs	r0, #0
 8008654:	250a      	movs	r5, #10
 8008656:	4639      	mov	r1, r7
 8008658:	f811 3b01 	ldrb.w	r3, [r1], #1
 800865c:	3b30      	subs	r3, #48	; 0x30
 800865e:	2b09      	cmp	r3, #9
 8008660:	d94d      	bls.n	80086fe <_svfiprintf_r+0x16e>
 8008662:	b1b8      	cbz	r0, 8008694 <_svfiprintf_r+0x104>
 8008664:	e00f      	b.n	8008686 <_svfiprintf_r+0xf6>
 8008666:	462f      	mov	r7, r5
 8008668:	e7b8      	b.n	80085dc <_svfiprintf_r+0x4c>
 800866a:	4a40      	ldr	r2, [pc, #256]	; (800876c <_svfiprintf_r+0x1dc>)
 800866c:	1a80      	subs	r0, r0, r2
 800866e:	fa0b f000 	lsl.w	r0, fp, r0
 8008672:	4318      	orrs	r0, r3
 8008674:	9004      	str	r0, [sp, #16]
 8008676:	463d      	mov	r5, r7
 8008678:	e7d3      	b.n	8008622 <_svfiprintf_r+0x92>
 800867a:	9a03      	ldr	r2, [sp, #12]
 800867c:	1d11      	adds	r1, r2, #4
 800867e:	6812      	ldr	r2, [r2, #0]
 8008680:	9103      	str	r1, [sp, #12]
 8008682:	2a00      	cmp	r2, #0
 8008684:	db01      	blt.n	800868a <_svfiprintf_r+0xfa>
 8008686:	9207      	str	r2, [sp, #28]
 8008688:	e004      	b.n	8008694 <_svfiprintf_r+0x104>
 800868a:	4252      	negs	r2, r2
 800868c:	f043 0302 	orr.w	r3, r3, #2
 8008690:	9207      	str	r2, [sp, #28]
 8008692:	9304      	str	r3, [sp, #16]
 8008694:	783b      	ldrb	r3, [r7, #0]
 8008696:	2b2e      	cmp	r3, #46	; 0x2e
 8008698:	d10c      	bne.n	80086b4 <_svfiprintf_r+0x124>
 800869a:	787b      	ldrb	r3, [r7, #1]
 800869c:	2b2a      	cmp	r3, #42	; 0x2a
 800869e:	d133      	bne.n	8008708 <_svfiprintf_r+0x178>
 80086a0:	9b03      	ldr	r3, [sp, #12]
 80086a2:	1d1a      	adds	r2, r3, #4
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	9203      	str	r2, [sp, #12]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	bfb8      	it	lt
 80086ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80086b0:	3702      	adds	r7, #2
 80086b2:	9305      	str	r3, [sp, #20]
 80086b4:	4d2e      	ldr	r5, [pc, #184]	; (8008770 <_svfiprintf_r+0x1e0>)
 80086b6:	7839      	ldrb	r1, [r7, #0]
 80086b8:	2203      	movs	r2, #3
 80086ba:	4628      	mov	r0, r5
 80086bc:	f7f7 fdb0 	bl	8000220 <memchr>
 80086c0:	b138      	cbz	r0, 80086d2 <_svfiprintf_r+0x142>
 80086c2:	2340      	movs	r3, #64	; 0x40
 80086c4:	1b40      	subs	r0, r0, r5
 80086c6:	fa03 f000 	lsl.w	r0, r3, r0
 80086ca:	9b04      	ldr	r3, [sp, #16]
 80086cc:	4303      	orrs	r3, r0
 80086ce:	3701      	adds	r7, #1
 80086d0:	9304      	str	r3, [sp, #16]
 80086d2:	7839      	ldrb	r1, [r7, #0]
 80086d4:	4827      	ldr	r0, [pc, #156]	; (8008774 <_svfiprintf_r+0x1e4>)
 80086d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086da:	2206      	movs	r2, #6
 80086dc:	1c7e      	adds	r6, r7, #1
 80086de:	f7f7 fd9f 	bl	8000220 <memchr>
 80086e2:	2800      	cmp	r0, #0
 80086e4:	d038      	beq.n	8008758 <_svfiprintf_r+0x1c8>
 80086e6:	4b24      	ldr	r3, [pc, #144]	; (8008778 <_svfiprintf_r+0x1e8>)
 80086e8:	bb13      	cbnz	r3, 8008730 <_svfiprintf_r+0x1a0>
 80086ea:	9b03      	ldr	r3, [sp, #12]
 80086ec:	3307      	adds	r3, #7
 80086ee:	f023 0307 	bic.w	r3, r3, #7
 80086f2:	3308      	adds	r3, #8
 80086f4:	9303      	str	r3, [sp, #12]
 80086f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086f8:	444b      	add	r3, r9
 80086fa:	9309      	str	r3, [sp, #36]	; 0x24
 80086fc:	e76d      	b.n	80085da <_svfiprintf_r+0x4a>
 80086fe:	fb05 3202 	mla	r2, r5, r2, r3
 8008702:	2001      	movs	r0, #1
 8008704:	460f      	mov	r7, r1
 8008706:	e7a6      	b.n	8008656 <_svfiprintf_r+0xc6>
 8008708:	2300      	movs	r3, #0
 800870a:	3701      	adds	r7, #1
 800870c:	9305      	str	r3, [sp, #20]
 800870e:	4619      	mov	r1, r3
 8008710:	250a      	movs	r5, #10
 8008712:	4638      	mov	r0, r7
 8008714:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008718:	3a30      	subs	r2, #48	; 0x30
 800871a:	2a09      	cmp	r2, #9
 800871c:	d903      	bls.n	8008726 <_svfiprintf_r+0x196>
 800871e:	2b00      	cmp	r3, #0
 8008720:	d0c8      	beq.n	80086b4 <_svfiprintf_r+0x124>
 8008722:	9105      	str	r1, [sp, #20]
 8008724:	e7c6      	b.n	80086b4 <_svfiprintf_r+0x124>
 8008726:	fb05 2101 	mla	r1, r5, r1, r2
 800872a:	2301      	movs	r3, #1
 800872c:	4607      	mov	r7, r0
 800872e:	e7f0      	b.n	8008712 <_svfiprintf_r+0x182>
 8008730:	ab03      	add	r3, sp, #12
 8008732:	9300      	str	r3, [sp, #0]
 8008734:	4622      	mov	r2, r4
 8008736:	4b11      	ldr	r3, [pc, #68]	; (800877c <_svfiprintf_r+0x1ec>)
 8008738:	a904      	add	r1, sp, #16
 800873a:	4640      	mov	r0, r8
 800873c:	f3af 8000 	nop.w
 8008740:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008744:	4681      	mov	r9, r0
 8008746:	d1d6      	bne.n	80086f6 <_svfiprintf_r+0x166>
 8008748:	89a3      	ldrh	r3, [r4, #12]
 800874a:	065b      	lsls	r3, r3, #25
 800874c:	f53f af35 	bmi.w	80085ba <_svfiprintf_r+0x2a>
 8008750:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008752:	b01d      	add	sp, #116	; 0x74
 8008754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008758:	ab03      	add	r3, sp, #12
 800875a:	9300      	str	r3, [sp, #0]
 800875c:	4622      	mov	r2, r4
 800875e:	4b07      	ldr	r3, [pc, #28]	; (800877c <_svfiprintf_r+0x1ec>)
 8008760:	a904      	add	r1, sp, #16
 8008762:	4640      	mov	r0, r8
 8008764:	f000 f882 	bl	800886c <_printf_i>
 8008768:	e7ea      	b.n	8008740 <_svfiprintf_r+0x1b0>
 800876a:	bf00      	nop
 800876c:	08008c78 	.word	0x08008c78
 8008770:	08008c7e 	.word	0x08008c7e
 8008774:	08008c82 	.word	0x08008c82
 8008778:	00000000 	.word	0x00000000
 800877c:	080084dd 	.word	0x080084dd

08008780 <_printf_common>:
 8008780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008784:	4691      	mov	r9, r2
 8008786:	461f      	mov	r7, r3
 8008788:	688a      	ldr	r2, [r1, #8]
 800878a:	690b      	ldr	r3, [r1, #16]
 800878c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008790:	4293      	cmp	r3, r2
 8008792:	bfb8      	it	lt
 8008794:	4613      	movlt	r3, r2
 8008796:	f8c9 3000 	str.w	r3, [r9]
 800879a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800879e:	4606      	mov	r6, r0
 80087a0:	460c      	mov	r4, r1
 80087a2:	b112      	cbz	r2, 80087aa <_printf_common+0x2a>
 80087a4:	3301      	adds	r3, #1
 80087a6:	f8c9 3000 	str.w	r3, [r9]
 80087aa:	6823      	ldr	r3, [r4, #0]
 80087ac:	0699      	lsls	r1, r3, #26
 80087ae:	bf42      	ittt	mi
 80087b0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80087b4:	3302      	addmi	r3, #2
 80087b6:	f8c9 3000 	strmi.w	r3, [r9]
 80087ba:	6825      	ldr	r5, [r4, #0]
 80087bc:	f015 0506 	ands.w	r5, r5, #6
 80087c0:	d107      	bne.n	80087d2 <_printf_common+0x52>
 80087c2:	f104 0a19 	add.w	sl, r4, #25
 80087c6:	68e3      	ldr	r3, [r4, #12]
 80087c8:	f8d9 2000 	ldr.w	r2, [r9]
 80087cc:	1a9b      	subs	r3, r3, r2
 80087ce:	42ab      	cmp	r3, r5
 80087d0:	dc28      	bgt.n	8008824 <_printf_common+0xa4>
 80087d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80087d6:	6822      	ldr	r2, [r4, #0]
 80087d8:	3300      	adds	r3, #0
 80087da:	bf18      	it	ne
 80087dc:	2301      	movne	r3, #1
 80087de:	0692      	lsls	r2, r2, #26
 80087e0:	d42d      	bmi.n	800883e <_printf_common+0xbe>
 80087e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087e6:	4639      	mov	r1, r7
 80087e8:	4630      	mov	r0, r6
 80087ea:	47c0      	blx	r8
 80087ec:	3001      	adds	r0, #1
 80087ee:	d020      	beq.n	8008832 <_printf_common+0xb2>
 80087f0:	6823      	ldr	r3, [r4, #0]
 80087f2:	68e5      	ldr	r5, [r4, #12]
 80087f4:	f8d9 2000 	ldr.w	r2, [r9]
 80087f8:	f003 0306 	and.w	r3, r3, #6
 80087fc:	2b04      	cmp	r3, #4
 80087fe:	bf08      	it	eq
 8008800:	1aad      	subeq	r5, r5, r2
 8008802:	68a3      	ldr	r3, [r4, #8]
 8008804:	6922      	ldr	r2, [r4, #16]
 8008806:	bf0c      	ite	eq
 8008808:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800880c:	2500      	movne	r5, #0
 800880e:	4293      	cmp	r3, r2
 8008810:	bfc4      	itt	gt
 8008812:	1a9b      	subgt	r3, r3, r2
 8008814:	18ed      	addgt	r5, r5, r3
 8008816:	f04f 0900 	mov.w	r9, #0
 800881a:	341a      	adds	r4, #26
 800881c:	454d      	cmp	r5, r9
 800881e:	d11a      	bne.n	8008856 <_printf_common+0xd6>
 8008820:	2000      	movs	r0, #0
 8008822:	e008      	b.n	8008836 <_printf_common+0xb6>
 8008824:	2301      	movs	r3, #1
 8008826:	4652      	mov	r2, sl
 8008828:	4639      	mov	r1, r7
 800882a:	4630      	mov	r0, r6
 800882c:	47c0      	blx	r8
 800882e:	3001      	adds	r0, #1
 8008830:	d103      	bne.n	800883a <_printf_common+0xba>
 8008832:	f04f 30ff 	mov.w	r0, #4294967295
 8008836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800883a:	3501      	adds	r5, #1
 800883c:	e7c3      	b.n	80087c6 <_printf_common+0x46>
 800883e:	18e1      	adds	r1, r4, r3
 8008840:	1c5a      	adds	r2, r3, #1
 8008842:	2030      	movs	r0, #48	; 0x30
 8008844:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008848:	4422      	add	r2, r4
 800884a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800884e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008852:	3302      	adds	r3, #2
 8008854:	e7c5      	b.n	80087e2 <_printf_common+0x62>
 8008856:	2301      	movs	r3, #1
 8008858:	4622      	mov	r2, r4
 800885a:	4639      	mov	r1, r7
 800885c:	4630      	mov	r0, r6
 800885e:	47c0      	blx	r8
 8008860:	3001      	adds	r0, #1
 8008862:	d0e6      	beq.n	8008832 <_printf_common+0xb2>
 8008864:	f109 0901 	add.w	r9, r9, #1
 8008868:	e7d8      	b.n	800881c <_printf_common+0x9c>
	...

0800886c <_printf_i>:
 800886c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008870:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008874:	460c      	mov	r4, r1
 8008876:	7e09      	ldrb	r1, [r1, #24]
 8008878:	b085      	sub	sp, #20
 800887a:	296e      	cmp	r1, #110	; 0x6e
 800887c:	4617      	mov	r7, r2
 800887e:	4606      	mov	r6, r0
 8008880:	4698      	mov	r8, r3
 8008882:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008884:	f000 80b3 	beq.w	80089ee <_printf_i+0x182>
 8008888:	d822      	bhi.n	80088d0 <_printf_i+0x64>
 800888a:	2963      	cmp	r1, #99	; 0x63
 800888c:	d036      	beq.n	80088fc <_printf_i+0x90>
 800888e:	d80a      	bhi.n	80088a6 <_printf_i+0x3a>
 8008890:	2900      	cmp	r1, #0
 8008892:	f000 80b9 	beq.w	8008a08 <_printf_i+0x19c>
 8008896:	2958      	cmp	r1, #88	; 0x58
 8008898:	f000 8083 	beq.w	80089a2 <_printf_i+0x136>
 800889c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088a0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80088a4:	e032      	b.n	800890c <_printf_i+0xa0>
 80088a6:	2964      	cmp	r1, #100	; 0x64
 80088a8:	d001      	beq.n	80088ae <_printf_i+0x42>
 80088aa:	2969      	cmp	r1, #105	; 0x69
 80088ac:	d1f6      	bne.n	800889c <_printf_i+0x30>
 80088ae:	6820      	ldr	r0, [r4, #0]
 80088b0:	6813      	ldr	r3, [r2, #0]
 80088b2:	0605      	lsls	r5, r0, #24
 80088b4:	f103 0104 	add.w	r1, r3, #4
 80088b8:	d52a      	bpl.n	8008910 <_printf_i+0xa4>
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	6011      	str	r1, [r2, #0]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	da03      	bge.n	80088ca <_printf_i+0x5e>
 80088c2:	222d      	movs	r2, #45	; 0x2d
 80088c4:	425b      	negs	r3, r3
 80088c6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80088ca:	486f      	ldr	r0, [pc, #444]	; (8008a88 <_printf_i+0x21c>)
 80088cc:	220a      	movs	r2, #10
 80088ce:	e039      	b.n	8008944 <_printf_i+0xd8>
 80088d0:	2973      	cmp	r1, #115	; 0x73
 80088d2:	f000 809d 	beq.w	8008a10 <_printf_i+0x1a4>
 80088d6:	d808      	bhi.n	80088ea <_printf_i+0x7e>
 80088d8:	296f      	cmp	r1, #111	; 0x6f
 80088da:	d020      	beq.n	800891e <_printf_i+0xb2>
 80088dc:	2970      	cmp	r1, #112	; 0x70
 80088de:	d1dd      	bne.n	800889c <_printf_i+0x30>
 80088e0:	6823      	ldr	r3, [r4, #0]
 80088e2:	f043 0320 	orr.w	r3, r3, #32
 80088e6:	6023      	str	r3, [r4, #0]
 80088e8:	e003      	b.n	80088f2 <_printf_i+0x86>
 80088ea:	2975      	cmp	r1, #117	; 0x75
 80088ec:	d017      	beq.n	800891e <_printf_i+0xb2>
 80088ee:	2978      	cmp	r1, #120	; 0x78
 80088f0:	d1d4      	bne.n	800889c <_printf_i+0x30>
 80088f2:	2378      	movs	r3, #120	; 0x78
 80088f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088f8:	4864      	ldr	r0, [pc, #400]	; (8008a8c <_printf_i+0x220>)
 80088fa:	e055      	b.n	80089a8 <_printf_i+0x13c>
 80088fc:	6813      	ldr	r3, [r2, #0]
 80088fe:	1d19      	adds	r1, r3, #4
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	6011      	str	r1, [r2, #0]
 8008904:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008908:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800890c:	2301      	movs	r3, #1
 800890e:	e08c      	b.n	8008a2a <_printf_i+0x1be>
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	6011      	str	r1, [r2, #0]
 8008914:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008918:	bf18      	it	ne
 800891a:	b21b      	sxthne	r3, r3
 800891c:	e7cf      	b.n	80088be <_printf_i+0x52>
 800891e:	6813      	ldr	r3, [r2, #0]
 8008920:	6825      	ldr	r5, [r4, #0]
 8008922:	1d18      	adds	r0, r3, #4
 8008924:	6010      	str	r0, [r2, #0]
 8008926:	0628      	lsls	r0, r5, #24
 8008928:	d501      	bpl.n	800892e <_printf_i+0xc2>
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	e002      	b.n	8008934 <_printf_i+0xc8>
 800892e:	0668      	lsls	r0, r5, #25
 8008930:	d5fb      	bpl.n	800892a <_printf_i+0xbe>
 8008932:	881b      	ldrh	r3, [r3, #0]
 8008934:	4854      	ldr	r0, [pc, #336]	; (8008a88 <_printf_i+0x21c>)
 8008936:	296f      	cmp	r1, #111	; 0x6f
 8008938:	bf14      	ite	ne
 800893a:	220a      	movne	r2, #10
 800893c:	2208      	moveq	r2, #8
 800893e:	2100      	movs	r1, #0
 8008940:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008944:	6865      	ldr	r5, [r4, #4]
 8008946:	60a5      	str	r5, [r4, #8]
 8008948:	2d00      	cmp	r5, #0
 800894a:	f2c0 8095 	blt.w	8008a78 <_printf_i+0x20c>
 800894e:	6821      	ldr	r1, [r4, #0]
 8008950:	f021 0104 	bic.w	r1, r1, #4
 8008954:	6021      	str	r1, [r4, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d13d      	bne.n	80089d6 <_printf_i+0x16a>
 800895a:	2d00      	cmp	r5, #0
 800895c:	f040 808e 	bne.w	8008a7c <_printf_i+0x210>
 8008960:	4665      	mov	r5, ip
 8008962:	2a08      	cmp	r2, #8
 8008964:	d10b      	bne.n	800897e <_printf_i+0x112>
 8008966:	6823      	ldr	r3, [r4, #0]
 8008968:	07db      	lsls	r3, r3, #31
 800896a:	d508      	bpl.n	800897e <_printf_i+0x112>
 800896c:	6923      	ldr	r3, [r4, #16]
 800896e:	6862      	ldr	r2, [r4, #4]
 8008970:	429a      	cmp	r2, r3
 8008972:	bfde      	ittt	le
 8008974:	2330      	movle	r3, #48	; 0x30
 8008976:	f805 3c01 	strble.w	r3, [r5, #-1]
 800897a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800897e:	ebac 0305 	sub.w	r3, ip, r5
 8008982:	6123      	str	r3, [r4, #16]
 8008984:	f8cd 8000 	str.w	r8, [sp]
 8008988:	463b      	mov	r3, r7
 800898a:	aa03      	add	r2, sp, #12
 800898c:	4621      	mov	r1, r4
 800898e:	4630      	mov	r0, r6
 8008990:	f7ff fef6 	bl	8008780 <_printf_common>
 8008994:	3001      	adds	r0, #1
 8008996:	d14d      	bne.n	8008a34 <_printf_i+0x1c8>
 8008998:	f04f 30ff 	mov.w	r0, #4294967295
 800899c:	b005      	add	sp, #20
 800899e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089a2:	4839      	ldr	r0, [pc, #228]	; (8008a88 <_printf_i+0x21c>)
 80089a4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80089a8:	6813      	ldr	r3, [r2, #0]
 80089aa:	6821      	ldr	r1, [r4, #0]
 80089ac:	1d1d      	adds	r5, r3, #4
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	6015      	str	r5, [r2, #0]
 80089b2:	060a      	lsls	r2, r1, #24
 80089b4:	d50b      	bpl.n	80089ce <_printf_i+0x162>
 80089b6:	07ca      	lsls	r2, r1, #31
 80089b8:	bf44      	itt	mi
 80089ba:	f041 0120 	orrmi.w	r1, r1, #32
 80089be:	6021      	strmi	r1, [r4, #0]
 80089c0:	b91b      	cbnz	r3, 80089ca <_printf_i+0x15e>
 80089c2:	6822      	ldr	r2, [r4, #0]
 80089c4:	f022 0220 	bic.w	r2, r2, #32
 80089c8:	6022      	str	r2, [r4, #0]
 80089ca:	2210      	movs	r2, #16
 80089cc:	e7b7      	b.n	800893e <_printf_i+0xd2>
 80089ce:	064d      	lsls	r5, r1, #25
 80089d0:	bf48      	it	mi
 80089d2:	b29b      	uxthmi	r3, r3
 80089d4:	e7ef      	b.n	80089b6 <_printf_i+0x14a>
 80089d6:	4665      	mov	r5, ip
 80089d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80089dc:	fb02 3311 	mls	r3, r2, r1, r3
 80089e0:	5cc3      	ldrb	r3, [r0, r3]
 80089e2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80089e6:	460b      	mov	r3, r1
 80089e8:	2900      	cmp	r1, #0
 80089ea:	d1f5      	bne.n	80089d8 <_printf_i+0x16c>
 80089ec:	e7b9      	b.n	8008962 <_printf_i+0xf6>
 80089ee:	6813      	ldr	r3, [r2, #0]
 80089f0:	6825      	ldr	r5, [r4, #0]
 80089f2:	6961      	ldr	r1, [r4, #20]
 80089f4:	1d18      	adds	r0, r3, #4
 80089f6:	6010      	str	r0, [r2, #0]
 80089f8:	0628      	lsls	r0, r5, #24
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	d501      	bpl.n	8008a02 <_printf_i+0x196>
 80089fe:	6019      	str	r1, [r3, #0]
 8008a00:	e002      	b.n	8008a08 <_printf_i+0x19c>
 8008a02:	066a      	lsls	r2, r5, #25
 8008a04:	d5fb      	bpl.n	80089fe <_printf_i+0x192>
 8008a06:	8019      	strh	r1, [r3, #0]
 8008a08:	2300      	movs	r3, #0
 8008a0a:	6123      	str	r3, [r4, #16]
 8008a0c:	4665      	mov	r5, ip
 8008a0e:	e7b9      	b.n	8008984 <_printf_i+0x118>
 8008a10:	6813      	ldr	r3, [r2, #0]
 8008a12:	1d19      	adds	r1, r3, #4
 8008a14:	6011      	str	r1, [r2, #0]
 8008a16:	681d      	ldr	r5, [r3, #0]
 8008a18:	6862      	ldr	r2, [r4, #4]
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	4628      	mov	r0, r5
 8008a1e:	f7f7 fbff 	bl	8000220 <memchr>
 8008a22:	b108      	cbz	r0, 8008a28 <_printf_i+0x1bc>
 8008a24:	1b40      	subs	r0, r0, r5
 8008a26:	6060      	str	r0, [r4, #4]
 8008a28:	6863      	ldr	r3, [r4, #4]
 8008a2a:	6123      	str	r3, [r4, #16]
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a32:	e7a7      	b.n	8008984 <_printf_i+0x118>
 8008a34:	6923      	ldr	r3, [r4, #16]
 8008a36:	462a      	mov	r2, r5
 8008a38:	4639      	mov	r1, r7
 8008a3a:	4630      	mov	r0, r6
 8008a3c:	47c0      	blx	r8
 8008a3e:	3001      	adds	r0, #1
 8008a40:	d0aa      	beq.n	8008998 <_printf_i+0x12c>
 8008a42:	6823      	ldr	r3, [r4, #0]
 8008a44:	079b      	lsls	r3, r3, #30
 8008a46:	d413      	bmi.n	8008a70 <_printf_i+0x204>
 8008a48:	68e0      	ldr	r0, [r4, #12]
 8008a4a:	9b03      	ldr	r3, [sp, #12]
 8008a4c:	4298      	cmp	r0, r3
 8008a4e:	bfb8      	it	lt
 8008a50:	4618      	movlt	r0, r3
 8008a52:	e7a3      	b.n	800899c <_printf_i+0x130>
 8008a54:	2301      	movs	r3, #1
 8008a56:	464a      	mov	r2, r9
 8008a58:	4639      	mov	r1, r7
 8008a5a:	4630      	mov	r0, r6
 8008a5c:	47c0      	blx	r8
 8008a5e:	3001      	adds	r0, #1
 8008a60:	d09a      	beq.n	8008998 <_printf_i+0x12c>
 8008a62:	3501      	adds	r5, #1
 8008a64:	68e3      	ldr	r3, [r4, #12]
 8008a66:	9a03      	ldr	r2, [sp, #12]
 8008a68:	1a9b      	subs	r3, r3, r2
 8008a6a:	42ab      	cmp	r3, r5
 8008a6c:	dcf2      	bgt.n	8008a54 <_printf_i+0x1e8>
 8008a6e:	e7eb      	b.n	8008a48 <_printf_i+0x1dc>
 8008a70:	2500      	movs	r5, #0
 8008a72:	f104 0919 	add.w	r9, r4, #25
 8008a76:	e7f5      	b.n	8008a64 <_printf_i+0x1f8>
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d1ac      	bne.n	80089d6 <_printf_i+0x16a>
 8008a7c:	7803      	ldrb	r3, [r0, #0]
 8008a7e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a82:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a86:	e76c      	b.n	8008962 <_printf_i+0xf6>
 8008a88:	08008c89 	.word	0x08008c89
 8008a8c:	08008c9a 	.word	0x08008c9a

08008a90 <memmove>:
 8008a90:	4288      	cmp	r0, r1
 8008a92:	b510      	push	{r4, lr}
 8008a94:	eb01 0302 	add.w	r3, r1, r2
 8008a98:	d807      	bhi.n	8008aaa <memmove+0x1a>
 8008a9a:	1e42      	subs	r2, r0, #1
 8008a9c:	4299      	cmp	r1, r3
 8008a9e:	d00a      	beq.n	8008ab6 <memmove+0x26>
 8008aa0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008aa4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008aa8:	e7f8      	b.n	8008a9c <memmove+0xc>
 8008aaa:	4283      	cmp	r3, r0
 8008aac:	d9f5      	bls.n	8008a9a <memmove+0xa>
 8008aae:	1881      	adds	r1, r0, r2
 8008ab0:	1ad2      	subs	r2, r2, r3
 8008ab2:	42d3      	cmn	r3, r2
 8008ab4:	d100      	bne.n	8008ab8 <memmove+0x28>
 8008ab6:	bd10      	pop	{r4, pc}
 8008ab8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008abc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008ac0:	e7f7      	b.n	8008ab2 <memmove+0x22>

08008ac2 <_realloc_r>:
 8008ac2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ac4:	4607      	mov	r7, r0
 8008ac6:	4614      	mov	r4, r2
 8008ac8:	460e      	mov	r6, r1
 8008aca:	b921      	cbnz	r1, 8008ad6 <_realloc_r+0x14>
 8008acc:	4611      	mov	r1, r2
 8008ace:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008ad2:	f7ff bc77 	b.w	80083c4 <_malloc_r>
 8008ad6:	b922      	cbnz	r2, 8008ae2 <_realloc_r+0x20>
 8008ad8:	f7ff fc26 	bl	8008328 <_free_r>
 8008adc:	4625      	mov	r5, r4
 8008ade:	4628      	mov	r0, r5
 8008ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ae2:	f000 f814 	bl	8008b0e <_malloc_usable_size_r>
 8008ae6:	42a0      	cmp	r0, r4
 8008ae8:	d20f      	bcs.n	8008b0a <_realloc_r+0x48>
 8008aea:	4621      	mov	r1, r4
 8008aec:	4638      	mov	r0, r7
 8008aee:	f7ff fc69 	bl	80083c4 <_malloc_r>
 8008af2:	4605      	mov	r5, r0
 8008af4:	2800      	cmp	r0, #0
 8008af6:	d0f2      	beq.n	8008ade <_realloc_r+0x1c>
 8008af8:	4631      	mov	r1, r6
 8008afa:	4622      	mov	r2, r4
 8008afc:	f7ff fc00 	bl	8008300 <memcpy>
 8008b00:	4631      	mov	r1, r6
 8008b02:	4638      	mov	r0, r7
 8008b04:	f7ff fc10 	bl	8008328 <_free_r>
 8008b08:	e7e9      	b.n	8008ade <_realloc_r+0x1c>
 8008b0a:	4635      	mov	r5, r6
 8008b0c:	e7e7      	b.n	8008ade <_realloc_r+0x1c>

08008b0e <_malloc_usable_size_r>:
 8008b0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b12:	1f18      	subs	r0, r3, #4
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	bfbc      	itt	lt
 8008b18:	580b      	ldrlt	r3, [r1, r0]
 8008b1a:	18c0      	addlt	r0, r0, r3
 8008b1c:	4770      	bx	lr
	...

08008b20 <_init>:
 8008b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b22:	bf00      	nop
 8008b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b26:	bc08      	pop	{r3}
 8008b28:	469e      	mov	lr, r3
 8008b2a:	4770      	bx	lr

08008b2c <_fini>:
 8008b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b2e:	bf00      	nop
 8008b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b32:	bc08      	pop	{r3}
 8008b34:	469e      	mov	lr, r3
 8008b36:	4770      	bx	lr
